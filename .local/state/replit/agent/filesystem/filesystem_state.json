{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive e-commerce platform built for Bahrain/MENA markets called \"BAYG\" or \"InnovanceOrbit\". The application features a full-stack TypeScript architecture with a React frontend, Express.js backend, and PostgreSQL database. It supports product management, order processing with admin approval workflows, multiple payment methods (including local Bahrain options like Benefit Pay), user role-based permissions, and comprehensive admin features.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite for build tooling\n- **UI Framework**: Shadcn/UI components with Radix UI primitives\n- **Styling**: Tailwind CSS with custom theme system supporting multiple color schemes\n- **State Management**: TanStack Query for server state, React hooks for local state\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n- **Authentication**: Context-based auth provider with protected routes\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Authentication**: Passport.js with local strategy using session-based auth\n- **Session Storage**: Memory store for development, PostgreSQL session store for production\n- **Password Security**: Scrypt hashing with salt\n- **File Uploads**: Multer for image handling with size and type validation\n- **Permission System**: Role-based access control with granular permissions across modules\n\n## Database Design\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Database**: PostgreSQL with Neon serverless support\n- **Schema**: Comprehensive schema including users, roles, permissions, products, categories, orders, cart items, and site settings\n- **Migrations**: Drizzle Kit for schema migrations\n- **Relations**: Well-defined foreign key relationships with proper cascade behaviors\n\n## Authentication & Authorization\n- **Multi-tier Role System**: Super Admin, Admin, Manager, and User roles\n- **Granular Permissions**: Module-based permissions (users, products, orders, categories, payments, etc.)\n- **Permission Modules**: 12 core modules including auth, users, products, orders, categories, cart, payments, slider, settings, units, reports, and database operations\n- **Session Management**: Express-session with configurable stores\n- **Route Protection**: Middleware-based permission checking on API endpoints\n\n## Payment Integration\n- **Multi-provider Support**: Stripe, PayPal, and regional Benefit Pay for Bahrain market\n- **Cash on Delivery**: Support for COD payments\n- **Payment Workflow**: Integrated with order approval system\n- **Security**: Environment-based API key management\n\n## Email System\n- **Single Provider**: Microsoft 365 SMTP only\n- **Transactional Emails**: Order confirmations, admin notifications, approval workflows\n- **Template System**: HTML email templates with dynamic content\n- **Configuration**: Database-driven Microsoft 365 SMTP settings with validation and setup instructions\n- **Authentication**: Supports regular passwords and App Passwords for MFA-enabled accounts\n\n## Order Management\n- **Approval Workflow**: Admin approval required before payment processing\n- **Status Tracking**: Comprehensive order status system (pending, awaiting_approval, approved, payment_pending, processing, shipped, delivered, cancelled)\n- **Notification System**: Email notifications for all order state changes\n- **Payment Integration**: Seamless transition from approval to payment\n\n## File Management\n- **Image Uploads**: Multer-based file handling with validation\n- **Static Serving**: Express static middleware for uploaded assets\n- **Image Processing**: Client-side validation and server-side security checks\n\n## Admin Features\n- **Comprehensive Dashboard**: Full CRUD operations for all entities\n- **Data Management**: Excel import/export functionality\n- **Database Tools**: Backup, restore, and migration utilities\n- **Site Customization**: Theme management, slider images, site settings\n- **User Management**: Role assignment, permission management\n\n## Theme System\n- **Dynamic Theming**: Runtime theme switching with CSS custom properties\n- **Predefined Themes**: Default, Ocean, Forest, Sunset, Purple, and Teal themes\n- **Customization**: Admin-configurable colors and branding\n- **Responsive Design**: Mobile-first approach with Tailwind breakpoints\n\n# External Dependencies\n\n## Core Runtime Dependencies\n- **Database**: PostgreSQL via Neon serverless (@neondatabase/serverless)\n- **ORM**: Drizzle ORM with PostgreSQL adapter\n- **Payment Processors**: Stripe API, PayPal Server SDK, custom Benefit Pay integration\n- **Email Service**: Nodemailer with Microsoft 365/Gmail SMTP support\n- **File Processing**: Multer for uploads, XLSX for Excel operations\n\n## UI and Frontend Libraries\n- **Component Library**: Radix UI primitives with Shadcn/UI components\n- **Styling**: Tailwind CSS with PostCSS processing\n- **Icons**: Lucide React for consistent iconography\n- **Date Handling**: date-fns for date formatting and manipulation\n- **Validation**: Zod for schema validation across frontend and backend\n\n## Development and Build Tools\n- **Build System**: Vite with React plugin and TypeScript support\n- **Development**: tsx for TypeScript execution, ESBuild for production builds\n- **Replit Integration**: Cartographer plugin and runtime error overlay for Replit development environment\n- **Type Safety**: Comprehensive TypeScript configuration with strict mode enabled\n\n## Recent Changes (August 2025)\n- **Payment Method Overhaul**: Completely removed all payment methods except Credimax and Cash on Delivery\n- **Credimax Integration**: Created new Credimax payment gateway integration for Bahrain market\n- **Payment System Cleanup**: Removed Stripe, PayPal, and Benefit Pay integrations across entire codebase\n- **Permissions Update**: Updated role permissions to only support Credimax and Cash on Delivery payments\n- **Schema Simplification**: Removed Stripe-related fields from user schema and order payment methods\n- **Email System Restoration**: Completely rebuilt comprehensive SMTP email functionality per user request\n- **Dynamic SMTP Configuration**: Added flexible SMTP configuration supporting Gmail, Outlook, Yahoo, and custom providers\n- **Email Service Architecture**: Created new email service with nodemailer integration and professional email templates\n- **Admin Email Interface**: Built comprehensive admin interface for SMTP configuration, testing, and status monitoring\n- **Email Workflow Integration**: Integrated email notifications throughout order workflow (confirmation, approval, rejection, delivery)\n- **Database Schema Enhancement**: Added SMTP configuration fields to site_settings table\n- **Email Template System**: Created professional HTML email templates for all notification types\n\n## Authentication and Security\n- **Session Management**: Express-session with connect-pg-simple for PostgreSQL session store\n- **Password Hashing**: Node.js crypto module with scrypt algorithm\n- **CSRF Protection**: Built into session management\n- **Input Validation**: Zod schemas shared between frontend and backend\n\n## Data Processing\n- **Excel Operations**: XLSX library for import/export functionality\n- **CSV Processing**: PapaParse for CSV file handling\n- **Caching**: Memoizee for performance optimization\n- **Query Optimization**: TanStack Query for efficient data fetching and caching","size_bytes":7501},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    screens: {\n      'xs': '475px',\n      'sm': '640px',\n      'md': '768px', \n      'lg': '1024px',\n      'xl': '1280px',\n      '2xl': '1536px',\n    },\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2780},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/admin-notification.ts":{"content":"import { storage } from \"./storage\";\nimport { createMicrosoft365Transporter, validateEmailConfig } from './smtp-config';\n\n\n// Send admin notification when new order is submitted for approval\nexport async function sendAdminOrderNotification(\n  orderDetails: {\n    orderNumber: string;\n    customerName: string;\n    customerEmail: string;\n    total: string;\n    items: Array<{\n      productName: string;\n      quantity: number;\n      price: string;\n    }>;\n    shippingAddress: {\n      firstName: string;\n      lastName: string;\n      address: string;\n      city: string;\n      state: string;\n      zipCode: string;\n      phone: string;\n    };\n  }\n): Promise<void> {\n  try {\n    const settings = await storage.getSiteSettings();\n    \n    const emailValidation = validateEmailConfig(settings);\n    if (!settings.emailEnabled || !emailValidation.valid) {\n      console.log('Admin email notifications disabled:', emailValidation.errors.join(', '));\n      console.log('To enable admin notifications: Configure SMTP settings in Admin Dashboard > Settings');\n      return;\n    }\n\n    if (!settings.adminEmail) {\n      console.log('Admin email not configured');\n      return;\n    }\n\n    const itemsHtml = orderDetails.items.map(item => `\n      <tr style=\"border-bottom: 1px solid #e5e7eb;\">\n        <td style=\"padding: 12px 0; color: #374151;\">${item.productName}</td>\n        <td style=\"padding: 12px 0; color: #374151; text-align: center;\">${item.quantity}</td>\n        <td style=\"padding: 12px 0; color: #374151; text-align: right;\">$${item.price}</td>\n      </tr>\n    `).join('');\n\n    const adminEmailTemplate = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #fff; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);\">\n        <div style=\"background: linear-gradient(135deg, #f59e0b, #d97706); color: white; padding: 30px; border-radius: 8px 8px 0 0; text-align: center;\">\n          <h1 style=\"margin: 0; font-size: 24px;\">🔔 New Order Awaiting Approval</h1>\n        </div>\n        \n        <div style=\"padding: 30px;\">\n          <div style=\"background: #fef3c7; padding: 20px; border-radius: 8px; margin-bottom: 25px; border-left: 4px solid #f59e0b;\">\n            <h3 style=\"color: #92400e; margin-top: 0; font-size: 18px;\">Action Required</h3>\n            <p style=\"color: #92400e; margin: 10px 0; font-weight: 600;\">A new customer order is waiting for your approval.</p>\n          </div>\n          \n          <div style=\"margin-bottom: 25px;\">\n            <h3 style=\"color: #374151; margin-bottom: 15px; font-size: 18px; border-bottom: 2px solid #e5e7eb; padding-bottom: 8px;\">Order Details</h3>\n            <div style=\"background: #f9fafb; padding: 15px; border-radius: 6px;\">\n              <p style=\"margin: 5px 0; color: #374151;\"><strong>Order Number:</strong> ${orderDetails.orderNumber}</p>\n              <p style=\"margin: 5px 0; color: #374151;\"><strong>Customer:</strong> ${orderDetails.customerName}</p>\n              <p style=\"margin: 5px 0; color: #374151;\"><strong>Email:</strong> ${orderDetails.customerEmail}</p>\n              <p style=\"margin: 5px 0; color: #374151;\"><strong>Total Amount:</strong> <span style=\"color: #059669; font-weight: 600;\">$${orderDetails.total}</span></p>\n            </div>\n          </div>\n\n          <div style=\"margin-bottom: 25px;\">\n            <h3 style=\"color: #374151; margin-bottom: 15px; font-size: 18px; border-bottom: 2px solid #e5e7eb; padding-bottom: 8px;\">Ordered Items</h3>\n            <table style=\"width: 100%; border-collapse: collapse; background: #f9fafb; border-radius: 6px; overflow: hidden;\">\n              <thead>\n                <tr style=\"background: #e5e7eb;\">\n                  <th style=\"padding: 12px; text-align: left; color: #374151; font-weight: 600;\">Product</th>\n                  <th style=\"padding: 12px; text-align: center; color: #374151; font-weight: 600;\">Qty</th>\n                  <th style=\"padding: 12px; text-align: right; color: #374151; font-weight: 600;\">Price</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${itemsHtml}\n              </tbody>\n            </table>\n          </div>\n\n          <div style=\"margin-bottom: 25px;\">\n            <h3 style=\"color: #374151; margin-bottom: 15px; font-size: 18px; border-bottom: 2px solid #e5e7eb; padding-bottom: 8px;\">Shipping Address</h3>\n            <div style=\"background: #f9fafb; padding: 15px; border-radius: 6px;\">\n              <p style=\"margin: 0; color: #374151; line-height: 1.6;\">\n                ${orderDetails.shippingAddress.firstName} ${orderDetails.shippingAddress.lastName}<br>\n                ${orderDetails.shippingAddress.address}<br>\n                ${orderDetails.shippingAddress.city}, ${orderDetails.shippingAddress.state} ${orderDetails.shippingAddress.zipCode}<br>\n                Phone: ${orderDetails.shippingAddress.phone}\n              </p>\n            </div>\n          </div>\n          \n          <div style=\"text-align: center; margin-top: 30px; padding: 25px; background: #f0f9ff; border-radius: 8px; border: 1px solid #0ea5e9;\">\n            <h4 style=\"color: #0c4a6e; margin-top: 0;\">Review and Approve Order</h4>\n            <p style=\"color: #0c4a6e; margin: 15px 0;\">Please log in to your admin panel to review and approve this order.</p>\n            <p style=\"color: #64748b; font-size: 14px; margin: 10px 0;\">Once approved, the customer will receive an email notification and can proceed with payment.</p>\n          </div>\n          \n          <div style=\"text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n            <p style=\"color: #374151; margin: 0;\">Best regards,</p>\n            <p style=\"color: #2563eb; font-weight: 600; margin: 5px 0;\">${settings.siteName || 'InnovanceOrbit'} System</p>\n          </div>\n        </div>\n      </div>\n    `;\n\n    const transporter = await createMicrosoft365Transporter();\n    \n    await transporter.sendMail({\n      from: `\"${settings.smtpFromName || 'InnovanceOrbit'}\" <${settings.smtpFromEmail || 'info@innovanceorbit.com'}>`,\n      to: settings.adminEmail,\n      subject: `🔔 New Order Approval Required - ${orderDetails.orderNumber}`,\n      html: adminEmailTemplate,\n    });\n\n    console.log(`Admin notification sent for order ${orderDetails.orderNumber}`);\n  } catch (error) {\n    console.error('Failed to send admin notification email:', error);\n  }\n}","size_bytes":6414},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nexport async function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  if (!salt) {\n    return false;\n  }\n  \n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"your-fallback-secret-key-for-development-only-please-change-in-production\",\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      const user = await storage.getUserByUsername(username);\n      if (!user || !(await comparePasswords(password, user.password))) {\n        return done(null, false);\n      } else {\n        return done(null, user);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  // Registration disabled - using predefined accounts only\n  app.post(\"/api/register\", async (req, res) => {\n    res.status(403).json({ message: \"Registration is disabled. Please contact admin for account access.\" });\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  // Get current user route\n  app.get(\"/api/user\", (req, res) => {\n    if (req.isAuthenticated()) {\n      res.json(req.user);\n    } else {\n      res.sendStatus(401);\n    }\n  });\n\n  // Get user permissions\n  app.get(\"/api/user/permissions\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { getUserPermissions } = await import(\"./seed-comprehensive-permissions\");\n      const permissions = await getUserPermissions(req.user!.id);\n      res.json({ permissions });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Check specific permission\n  app.post(\"/api/user/check-permission\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { permission } = req.body;\n      if (!permission) {\n        return res.status(400).json({ message: \"Permission name required\" });\n      }\n\n      const { userHasPermission } = await import(\"./seed-comprehensive-permissions\");\n      const hasPermission = await userHasPermission(req.user!.id, permission);\n      res.json({ hasPermission });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n}\n","size_bytes":3710},"server/benefit-pay.ts":{"content":"import { Request, Response } from \"express\";\n\n// Benefit Pay integration for Bahrain market\n// This is a simplified integration - in production you would integrate with actual Benefit Pay API\n\nexport interface BenefitPayPayment {\n  amount: number;\n  currency: string;\n  orderId: string;\n  customerInfo: {\n    name: string;\n    email: string;\n    phone: string;\n  };\n}\n\nexport async function createBenefitPayTransaction(req: Request, res: Response) {\n  try {\n    const { amount, currency = \"USD\", orderId, customerInfo }: BenefitPayPayment = req.body;\n\n    if (!amount || amount <= 0) {\n      return res.status(400).json({ error: \"Invalid amount\" });\n    }\n\n    if (!orderId || !customerInfo) {\n      return res.status(400).json({ error: \"Missing required fields\" });\n    }\n\n    // In production, you would integrate with Benefit Pay's actual API\n    // For now, we'll simulate the payment process\n    const benefitPayResponse = {\n      transactionId: `BEN_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      status: \"pending\",\n      paymentUrl: `https://benefit.bh/pay?transaction=${orderId}&amount=${amount}`,\n      amount,\n      currency,\n      orderId,\n      expiresAt: new Date(Date.now() + 15 * 60 * 1000), // 15 minutes\n    };\n\n    res.json(benefitPayResponse);\n  } catch (error: any) {\n    console.error(\"Benefit Pay error:\", error);\n    res.status(500).json({ error: \"Failed to create Benefit Pay transaction\" });\n  }\n}\n\nexport async function verifyBenefitPayTransaction(req: Request, res: Response) {\n  try {\n    const { transactionId } = req.params;\n\n    if (!transactionId) {\n      return res.status(400).json({ error: \"Transaction ID is required\" });\n    }\n\n    // In production, you would verify with Benefit Pay's API\n    // For now, we'll simulate verification\n    const verificationResult = {\n      transactionId,\n      status: \"completed\", // or \"failed\", \"pending\"\n      amount: 50.00, // This would come from Benefit Pay\n      currency: \"BHD\",\n      timestamp: new Date().toISOString(),\n    };\n\n    res.json(verificationResult);\n  } catch (error: any) {\n    console.error(\"Benefit Pay verification error:\", error);\n    res.status(500).json({ error: \"Failed to verify Benefit Pay transaction\" });\n  }\n}\n\nexport async function handleBenefitPayWebhook(req: Request, res: Response) {\n  try {\n    // In production, you would verify the webhook signature\n    const { transactionId, status, amount, orderId } = req.body;\n\n    console.log(\"Benefit Pay webhook received:\", {\n      transactionId,\n      status,\n      amount,\n      orderId,\n    });\n\n    // Update order status based on webhook\n    // This would integrate with your order management system\n\n    res.status(200).json({ received: true });\n  } catch (error: any) {\n    console.error(\"Benefit Pay webhook error:\", error);\n    res.status(500).json({ error: \"Webhook processing failed\" });\n  }\n}","size_bytes":2876},"server/database-utils.ts":{"content":"import { storage } from './storage';\nimport { products, categories, users, orders, orderItems, cartItems, siteSettings } from '@shared/schema';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nexport interface DatabaseExport {\n  timestamp: string;\n  version: string;\n  data: {\n    products: any[];\n    categories: any[];\n    users: any[];\n    orders: any[];\n    orderItems: any[];\n    cartItems: any[];\n    siteSettings: any[];\n  };\n}\n\nexport async function exportDatabase(): Promise<DatabaseExport> {\n  try {\n    const [\n      productsData,\n      categoriesData,\n      usersData,\n      ordersData,\n      orderItemsData,\n      cartItemsData,\n      siteSettingsData\n    ] = await Promise.all([\n      storage.getProducts(),\n      storage.getCategories(),\n      storage.getUsers(),\n      storage.getOrders(),\n      storage.getOrderItems(),\n      storage.getCartItems(\"system\"),\n      storage.getSiteSettings().then(settings => [settings])\n    ]);\n\n    const exportData: DatabaseExport = {\n      timestamp: new Date().toISOString(),\n      version: '1.0.0',\n      data: {\n        products: productsData,\n        categories: categoriesData,\n        users: usersData.map(user => ({ ...user, password: '[REDACTED]' })), // Remove sensitive data\n        orders: ordersData,\n        orderItems: orderItemsData,\n        cartItems: cartItemsData,\n        siteSettings: siteSettingsData.map(setting => ({ \n          ...setting, \n          smtpPassword: setting.smtpPassword ? '[REDACTED]' : null \n        }))\n      }\n    };\n\n    return exportData;\n  } catch (error) {\n    console.error('Database export error:', error);\n    throw new Error('Failed to export database');\n  }\n}\n\nexport async function saveExportToFile(exportData: DatabaseExport): Promise<string> {\n  try {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const filename = `database-export-${timestamp}.sql`;\n    const filepath = path.join(process.cwd(), 'uploads', filename);\n    \n    // Convert JSON data to SQL format\n    const sqlContent = generateSQLExport(exportData);\n    await fs.writeFile(filepath, sqlContent);\n    return filename;\n  } catch (error) {\n    console.error('Export file save error:', error);\n    throw new Error('Failed to save export file');\n  }\n}\n\nfunction generateSQLExport(exportData: DatabaseExport): string {\n  let sqlContent = `-- Database Export Generated on ${exportData.timestamp}\\n`;\n  sqlContent += `-- InnovanceOrbit E-commerce Platform Database Backup\\n`;\n  sqlContent += `-- Version: ${exportData.version}\\n\\n`;\n  \n  // Add categories\n  if (exportData.data.categories.length > 0) {\n    sqlContent += `-- Categories\\n`;\n    sqlContent += `DELETE FROM categories;\\n`;\n    for (const category of exportData.data.categories) {\n      sqlContent += `INSERT INTO categories (id, name, description, image_url, created_at) VALUES ('${category.id}', '${escapeSQL(category.name)}', '${escapeSQL(category.description || '')}', '${escapeSQL(category.imageUrl || '')}', '${category.createdAt}');\\n`;\n    }\n    sqlContent += `\\n`;\n  }\n  \n  // Add products\n  if (exportData.data.products.length > 0) {\n    sqlContent += `-- Products\\n`;\n    sqlContent += `DELETE FROM products;\\n`;\n    for (const product of exportData.data.products) {\n      sqlContent += `INSERT INTO products (id, name, description, price, category_id, image_url, is_featured, stock_quantity, created_at) VALUES ('${product.id}', '${escapeSQL(product.name)}', '${escapeSQL(product.description || '')}', '${product.price}', '${product.categoryId}', '${escapeSQL(product.imageUrl || '')}', ${product.isFeatured}, ${product.stockQuantity || 0}, '${product.createdAt}');\\n`;\n    }\n    sqlContent += `\\n`;\n  }\n  \n  // Add site settings\n  if (exportData.data.siteSettings.length > 0) {\n    sqlContent += `-- Site Settings\\n`;\n    const settings = exportData.data.siteSettings[0];\n    sqlContent += `UPDATE site_settings SET `;\n    sqlContent += `site_name = '${escapeSQL(settings.siteName || '')}', `;\n    sqlContent += `header_text = '${escapeSQL(settings.headerText || '')}', `;\n    sqlContent += `footer_description = '${escapeSQL(settings.footerDescription || '')}', `;\n    sqlContent += `contact_email = '${escapeSQL(settings.contactEmail || '')}', `;\n    sqlContent += `contact_phone = '${escapeSQL(settings.contactPhone || '')}', `;\n    sqlContent += `contact_address = '${escapeSQL(settings.contactAddress || '')}', `;\n    sqlContent += `logo_url = '${escapeSQL(settings.logoUrl || '')}' `;\n    sqlContent += `WHERE id = 'default';\\n\\n`;\n  }\n  \n  sqlContent += `-- Export completed successfully\\n`;\n  return sqlContent;\n}\n\nfunction escapeSQL(str: string): string {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\").replace(/\\\\/g, '\\\\\\\\');\n}\n\nexport async function importDatabase(sqlContent: string): Promise<void> {\n  try {\n    // Import via direct SQL execution\n    await storage.executeSQLImport(sqlContent);\n    console.log('Database import completed successfully');\n  } catch (error) {\n    console.error('Database import error:', error);\n    throw new Error('Failed to import database: ' + (error as Error).message);\n  }\n}\n\nexport async function validateImportFile(filePath: string): Promise<string> {\n  try {\n    const fileContent = await fs.readFile(filePath, 'utf-8');\n    \n    // Basic validation for SQL content\n    if (!fileContent.includes('-- InnovanceOrbit E-commerce Platform Database Backup')) {\n      throw new Error('Invalid SQL export file format');\n    }\n\n    return fileContent;\n  } catch (error) {\n    console.error('Import file validation error:', error);\n    throw new Error('Invalid import file: ' + (error as Error).message);\n  }\n}","size_bytes":5638},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Use standard PostgreSQL connection for local database\nconst sql = postgres(process.env.DATABASE_URL);\nexport const db = drizzle(sql, { schema });\n\n// Create a simple connection for session store\nexport const pool = sql;","size_bytes":482},"server/email.ts":{"content":"import { storage } from './storage';\nimport { createMicrosoft365Transporter, validateMicrosoft365Config } from './smtp-config';\n\n// Main email sending function - now uses Microsoft 365 exclusively\nexport async function sendEmail(to: string, subject: string, htmlContent: string, textContent?: string) {\n  try {\n    const emailValidation = validateMicrosoft365Config();\n    if (!emailValidation.valid) {\n      console.log('Email system not configured properly');\n      return;\n    }\n    \n    const transporter = await createMicrosoft365Transporter();\n    \n    const mailOptions = {\n      from: '\"BAYG System\" <itsupport@bayg.bh>',\n      to,\n      subject: `${subject} - BAYG`,\n      html: htmlContent,\n      text: textContent || htmlContent.replace(/<[^>]*>/g, '') // Strip HTML for text version\n    };\n\n    const result = await transporter.sendMail(mailOptions);\n    console.log(`Email sent successfully to ${to}:`, result.messageId);\n    \n  } catch (error: any) {\n    console.error('Failed to send email:', error.message);\n    // Don't throw error, just log it to prevent breaking the application\n  }\n}\n\nexport async function sendOrderConfirmationEmail(\n  customerEmail: string,\n  orderDetails: {\n    orderNumber: string;\n    customerName: string;\n    items: Array<{\n      name: string;\n      quantity: number;\n      price: string;\n    }>;\n    subtotal: string;\n    vatAmount: string;\n    vatPercentage: string;\n    total: string;\n    paymentMethod: string;\n    estimatedDeliveryDays: number;\n  }\n): Promise<void> {\n  try {\n    const transporter = await createMicrosoft365Transporter();\n    \n    // Prepare items HTML\n    const itemsHtml = orderDetails.items\n      .map(item => `\n        <tr>\n          <td style=\"padding: 8px; border-bottom: 1px solid #eee;\">${item.name}</td>\n          <td style=\"padding: 8px; border-bottom: 1px solid #eee; text-align: center;\">${item.quantity}</td>\n          <td style=\"padding: 8px; border-bottom: 1px solid #eee; text-align: right;\">$${item.price}</td>\n        </tr>\n      `)\n      .join('');\n\n    const emailTemplate = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #fff; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);\">\n        <div style=\"background: linear-gradient(135deg, #2563eb, #1e40af); color: white; padding: 30px; border-radius: 8px 8px 0 0; text-align: center;\">\n          <h1 style=\"margin: 0; font-size: 24px;\">Order Received - ${orderDetails.orderNumber}</h1>\n        </div>\n        \n        <div style=\"padding: 30px;\">\n          <p style=\"font-size: 16px; color: #374151; margin-bottom: 20px;\">Dear ${orderDetails.customerName},</p>\n          \n          <p style=\"color: #374151; line-height: 1.6;\">Thank you for your order! We have successfully received your order and it includes <strong>10% VAT</strong> as required.</p>\n          \n          <div style=\"background: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #2563eb;\">\n            <h3 style=\"color: #2563eb; margin-top: 0; font-size: 18px;\">📦 Order Processing Timeline</h3>\n            <p style=\"color: #374151; margin: 10px 0; font-size: 16px; font-weight: 600;\">\n              ⏱️ We will arrange your product in ${orderDetails.estimatedDeliveryDays} days\n            </p>\n            <p style=\"color: #6b7280; margin: 10px 0;\">After arrangement, you'll receive an email notification for payment processing to proceed with your order.</p>\n          </div>\n          \n          <div style=\"background: #fef3c7; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #f59e0b;\">\n            <h3 style=\"color: #92400e; margin-top: 0; font-size: 16px;\">⚠️ Important Note</h3>\n            <p style=\"color: #92400e; margin: 5px 0;\">Your order is currently <strong>awaiting admin approval</strong>. You will receive another email once the approval process is complete.</p>\n          </div>\n\n          <div style=\"background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3 style=\"margin-top: 0; color: #374151;\">Order Summary</h3>\n            <table style=\"width: 100%; margin-bottom: 15px;\">\n              <tr><td style=\"color: #6b7280; padding: 5px 0;\"><strong>Order Number:</strong></td><td style=\"text-align: right; padding: 5px 0;\">${orderDetails.orderNumber}</td></tr>\n              <tr><td style=\"color: #6b7280; padding: 5px 0;\"><strong>Order Date:</strong></td><td style=\"text-align: right; padding: 5px 0;\">${new Date().toLocaleDateString()}</td></tr>\n              <tr><td style=\"color: #6b7280; padding: 5px 0;\"><strong>Payment Method:</strong></td><td style=\"text-align: right; padding: 5px 0;\">${orderDetails.paymentMethod}</td></tr>\n            </table>\n          </div>\n\n          <h3 style=\"color: #374151;\">Items Ordered:</h3>\n          <table style=\"width: 100%; border-collapse: collapse; margin: 15px 0;\">\n            <thead>\n              <tr style=\"background: #f9fafb;\">\n                <th style=\"padding: 12px; text-align: left; border-bottom: 2px solid #e5e7eb; color: #374151;\">Product</th>\n                <th style=\"padding: 12px; text-align: center; border-bottom: 2px solid #e5e7eb; color: #374151;\">Qty</th>\n                <th style=\"padding: 12px; text-align: right; border-bottom: 2px solid #e5e7eb; color: #374151;\">Price</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${itemsHtml}\n            </tbody>\n          </table>\n\n          <div style=\"background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <table style=\"width: 100%; font-size: 16px;\">\n              <tr><td style=\"color: #6b7280; padding: 5px 0;\">Subtotal:</td><td style=\"text-align: right; padding: 5px 0;\">$${orderDetails.subtotal}</td></tr>\n              <tr><td style=\"color: #6b7280; padding: 5px 0;\">VAT (${orderDetails.vatPercentage}%):</td><td style=\"text-align: right; padding: 5px 0;\">$${orderDetails.vatAmount}</td></tr>\n              <tr style=\"border-top: 2px solid #e5e7eb;\"><td style=\"font-weight: bold; color: #374151; padding: 10px 0; font-size: 18px;\">Total:</td><td style=\"text-align: right; font-weight: bold; color: #2563eb; padding: 10px 0; font-size: 18px;\">$${orderDetails.total}</td></tr>\n            </table>\n          </div>\n          \n          <p style=\"color: #6b7280; line-height: 1.6; font-style: italic;\">\n            You will receive email notifications for order approval/rejection and payment processing instructions.\n          </p>\n          \n          <div style=\"text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n            <p style=\"color: #374151; margin: 0;\">Best regards,</p>\n            <p style=\"color: #2563eb; font-weight: 600; margin: 5px 0;\">BAYG Team</p>\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Send to customer\n    await transporter.sendMail({\n      from: '\"BAYG System\" <itsupport@bayg.bh>',\n      to: customerEmail,\n      subject: `Order Confirmation - ${orderDetails.orderNumber}`,\n      html: emailTemplate\n    });\n\n    // Send notification to admin\n    const adminHtml = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #dc2626;\">New Order Received - ${orderDetails.orderNumber}</h2>\n        <p>A new order has been placed on BAYG.</p>\n        \n        <div style=\"background: #fef2f2; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #dc2626;\">\n          <h3>Order Details:</h3>\n          <p><strong>Order Number:</strong> ${orderDetails.orderNumber}</p>\n          <p><strong>Customer:</strong> ${orderDetails.customerName}</p>\n          <p><strong>Customer Email:</strong> ${customerEmail}</p>\n          <p><strong>Payment Method:</strong> ${orderDetails.paymentMethod}</p>\n          <p><strong>Total Amount:</strong> $${orderDetails.total}</p>\n          <p><strong>Order Date:</strong> ${new Date().toLocaleString()}</p>\n        </div>\n\n        <h3>Items Ordered:</h3>\n        <table style=\"width: 100%; border-collapse: collapse;\">\n          <thead>\n            <tr style=\"background: #f1f5f9;\">\n              <th style=\"padding: 12px; text-align: left; border-bottom: 2px solid #ddd;\">Item</th>\n              <th style=\"padding: 12px; text-align: center; border-bottom: 2px solid #ddd;\">Quantity</th>\n              <th style=\"padding: 12px; text-align: right; border-bottom: 2px solid #ddd;\">Price</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${itemsHtml}\n          </tbody>\n        </table>\n\n        <p>Please process this order in the admin dashboard.</p>\n      </div>\n    `;\n\n    await transporter.sendMail({\n      from: '\"BAYG System\" <itsupport@bayg.bh>',\n      to: 'itsupport@bayg.bh',\n      subject: `New Order Alert - ${orderDetails.orderNumber}`,\n      html: adminHtml\n    });\n\n    console.log('Order confirmation emails sent successfully');\n  } catch (error) {\n    console.error('Failed to send order confirmation email:', error);\n    // Don't throw error to prevent order creation failure\n  }\n}\n\nexport async function testEmailConnection(): Promise<boolean> {\n  try {\n    const emailTransporter = await createMicrosoft365Transporter();\n    console.log('Microsoft 365 email connection test passed');\n    return true;\n  } catch (error) {\n    console.error('Email connection test failed:', error);\n    return false;\n  }\n}\n\n// Send order approval email to customer\nexport async function sendOrderApprovalEmail(\n  customerEmail: string,\n  orderDetails: {\n    orderNumber: string;\n    customerName: string;\n    total: string;\n    paymentMethod: string;\n    adminRemarks?: string;\n  }\n): Promise<void> {\n  try {\n    const transporter = await createMicrosoft365Transporter();\n\n    const emailTemplate = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #fff; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);\">\n        <div style=\"background: linear-gradient(135deg, #10b981, #059669); color: white; padding: 30px; border-radius: 8px 8px 0 0; text-align: center;\">\n          <h1 style=\"margin: 0; font-size: 24px;\">Order Approved!</h1>\n        </div>\n        \n        <div style=\"padding: 30px;\">\n          <p style=\"font-size: 16px; color: #374151; margin-bottom: 20px;\">Dear ${orderDetails.customerName},</p>\n          \n          <p style=\"color: #374151; line-height: 1.6;\">Great news! Your order <strong>${orderDetails.orderNumber}</strong> has been approved by our admin team.</p>\n          \n          <div style=\"background: #d1fae5; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #10b981;\">\n            <h3 style=\"color: #065f46; margin-top: 0; font-size: 18px;\">Next Step: Payment Processing</h3>\n            <p style=\"color: #065f46; margin: 10px 0; font-weight: 600;\">Please proceed with payment to complete your order.</p>\n            <p style=\"color: #047857; margin: 10px 0;\">Total Amount: <strong>$${orderDetails.total}</strong></p>\n            <p style=\"color: #047857; margin: 10px 0;\">Payment Method: <strong>${orderDetails.paymentMethod}</strong></p>\n          </div>\n          \n          ${orderDetails.adminRemarks ? `\n            <div style=\"background: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n              <h4 style=\"color: #374151; margin-top: 0;\">Admin Note:</h4>\n              <p style=\"color: #6b7280; font-style: italic;\">\"${orderDetails.adminRemarks}\"</p>\n            </div>\n          ` : ''}\n          \n          <div style=\"text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n            <p style=\"color: #374151; margin: 0;\">Best regards,</p>\n            <p style=\"color: #2563eb; font-weight: 600; margin: 5px 0;\">BAYG Team</p>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    await transporter.sendMail({\n      from: '\"BAYG System\" <itsupport@bayg.bh>',\n      to: customerEmail,\n      subject: `Order Approved - Payment Required - ${orderDetails.orderNumber}`,\n      html: emailTemplate,\n    });\n\n    console.log(`Order approval email sent to ${customerEmail}`);\n  } catch (error) {\n    console.error('Failed to send order approval email:', error);\n  }\n}\n\n// Send order rejection email to customer\nexport async function sendOrderRejectionEmail(\n  customerEmail: string,\n  orderDetails: {\n    orderNumber: string;\n    customerName: string;\n    total: string;\n    adminRemarks?: string;\n  }\n): Promise<void> {\n  try {\n    const transporter = await createMicrosoft365Transporter();\n\n    const emailTemplate = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #fff; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);\">\n        <div style=\"background: linear-gradient(135deg, #dc2626, #b91c1c); color: white; padding: 30px; border-radius: 8px 8px 0 0; text-align: center;\">\n          <h1 style=\"margin: 0; font-size: 24px;\">Order Cancelled</h1>\n        </div>\n        \n        <div style=\"padding: 30px;\">\n          <p style=\"font-size: 16px; color: #374151; margin-bottom: 20px;\">Dear ${orderDetails.customerName},</p>\n          \n          <p style=\"color: #374151; line-height: 1.6;\">We regret to inform you that your order <strong>${orderDetails.orderNumber}</strong> has been cancelled by our admin team.</p>\n          \n          <div style=\"background: #fee2e2; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #dc2626;\">\n            <h3 style=\"color: #991b1b; margin-top: 0; font-size: 18px;\">Order Details</h3>\n            <p style=\"color: #991b1b; margin: 10px 0;\">Order Number: <strong>${orderDetails.orderNumber}</strong></p>\n            <p style=\"color: #991b1b; margin: 10px 0;\">Order Amount: <strong>$${orderDetails.total}</strong></p>\n            <p style=\"color: #991b1b; margin: 10px 0;\">Status: <strong>Cancelled</strong></p>\n          </div>\n          \n          ${orderDetails.adminRemarks ? `\n            <div style=\"background: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n              <h4 style=\"color: #374151; margin-top: 0;\">Reason for Cancellation:</h4>\n              <p style=\"color: #6b7280; font-style: italic;\">\"${orderDetails.adminRemarks}\"</p>\n            </div>\n          ` : ''}\n          \n          <p style=\"color: #6b7280; line-height: 1.6;\">\n            If you have any questions about this cancellation, please contact our customer support team. We apologize for any inconvenience caused.\n          </p>\n          \n          <div style=\"text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n            <p style=\"color: #374151; margin: 0;\">Best regards,</p>\n            <p style=\"color: #2563eb; font-weight: 600; margin: 5px 0;\">BAYG Team</p>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    await transporter.sendMail({\n      from: '\"BAYG System\" <itsupport@bayg.bh>',\n      to: customerEmail,\n      subject: `Order Cancelled - ${orderDetails.orderNumber}`,\n      html: emailTemplate,\n    });\n\n    console.log(`Order rejection email sent to ${customerEmail}`);\n  } catch (error) {\n    console.error('Failed to send order rejection email:', error);\n  }\n}","size_bytes":15203},"server/excelUtils.ts":{"content":"import * as XLSX from 'xlsx';\nimport { db } from './db';\nimport { products, categories, users, orders, orderItems, unitsOfMeasure, siteSettings, sliderImages } from '@shared/schema';\nimport type { Product, Category, User, Order, OrderItem, UnitOfMeasure, SiteSettings, SliderImage } from '@shared/schema';\n\nexport interface ExcelExportData {\n  products: Product[];\n  categories: Category[];\n  users: User[];\n  orders: Order[];\n  orderItems: OrderItem[];\n  unitsOfMeasure: UnitOfMeasure[];\n  siteSettings: SiteSettings[];\n  sliderImages: SliderImage[];\n}\n\nexport function createExcelFile(data: ExcelExportData): Buffer {\n  const workbook = XLSX.utils.book_new();\n\n  // Create products worksheet\n  const productsWS = XLSX.utils.json_to_sheet(data.products.map(product => ({\n    ID: product.id,\n    Name: product.name,\n    Description: product.description,\n    Price: product.price,\n    SKU: product.sku,\n    'Unit of Measure': product.unitOfMeasure,\n    'Category ID': product.categoryId,\n    'Image URL': product.imageUrl,\n    'Is Active': product.isActive,\n    'Is Featured': product.isFeatured,\n    Rating: product.rating,\n    'Review Count': product.reviewCount,\n    'Product Type': product.productType,\n    'Rental Period': product.rentalPeriod,\n    'Rental Price': product.rentalPrice,\n    'Created At': product.createdAt\n  })));\n\n  // Create categories worksheet\n  const categoriesWS = XLSX.utils.json_to_sheet(data.categories.map(category => ({\n    ID: category.id,\n    Name: category.name,\n    Description: category.description,\n    'Image URL': category.imageUrl,\n    'Created At': category.createdAt\n  })));\n\n  // Create users worksheet (excluding sensitive data)\n  const usersWS = XLSX.utils.json_to_sheet(data.users.map(user => ({\n    ID: user.id,\n    Username: user.username,\n    Email: user.email,\n    'First Name': user.firstName,\n    'Last Name': user.lastName,\n    'Is Admin': user.isAdmin,\n    'Created At': user.createdAt\n  })));\n\n  // Create orders worksheet\n  const ordersWS = XLSX.utils.json_to_sheet(data.orders.map(order => ({\n    ID: order.id,\n    'User ID': order.userId,\n    Status: order.status,\n    'Total Amount': order.total,\n    'Delivery Address': (order as any).deliveryAddress || '',\n    'Payment Method': order.paymentMethod,\n    'Payment Status': order.status,\n    Notes: (order as any).notes || '',\n    'Created At': order.createdAt,\n    'Updated At': (order as any).updatedAt || order.createdAt\n  })));\n\n  // Create order items worksheet\n  const orderItemsWS = XLSX.utils.json_to_sheet(data.orderItems.map(item => ({\n    ID: item.id,\n    'Order ID': item.orderId,\n    'Product ID': item.productId,\n    Quantity: item.quantity,\n    Price: item.price,\n    'Created At': item.createdAt\n  })));\n\n  // Create units of measure worksheet\n  const unitsWS = XLSX.utils.json_to_sheet(data.unitsOfMeasure.map(unit => ({\n    ID: unit.id,\n    Name: unit.name,\n    Abbreviation: unit.abbreviation,\n    'Is Active': unit.isActive,\n    'Created At': unit.createdAt\n  })));\n\n  // Create site settings worksheet\n  const settingsWS = XLSX.utils.json_to_sheet(data.siteSettings.map(setting => ({\n    ID: setting.id,\n    'Site Name': setting.siteName,\n    'Header Logo': setting.headerLogo,\n    'Footer Logo': setting.footerLogo,\n    'Footer Description': setting.footerDescription,\n    'Footer Copyright': setting.footerDescription,\n    'Footer Quick Links Title': setting.quickLinksTitle,\n    'Footer Quick Links': setting.quickLinksTitle,\n    'Footer Services Title': setting.servicesTitle,\n    'Footer Services': setting.servicesTitle,\n    'Footer Social Facebook': setting.socialFacebook,\n    'Footer Social Twitter': setting.socialTwitter,\n    'Footer Social Instagram': setting.socialInstagram,\n    'Footer Social LinkedIn': setting.socialLinkedin,\n    'Footer Background Image': setting.footerBackgroundUrl,\n    'SMTP Host': setting.smtpHost,\n    'SMTP Port': setting.smtpPort,\n    'SMTP Username': setting.smtpUser,\n    'SMTP From Email': setting.smtpFromEmail,\n    'SMTP From Name': setting.smtpFromName,\n    'Updated At': setting.updatedAt\n  })));\n\n  // Create slider images worksheet\n  const sliderWS = XLSX.utils.json_to_sheet(data.sliderImages.map(slide => ({\n    ID: slide.id,\n    Title: slide.title,\n    'Image URL': slide.imageUrl,\n    'Link URL': slide.description || '',\n    'Is Active': slide.isActive,\n    'Display Order': slide.sortOrder,\n    'Created At': slide.createdAt\n  })));\n\n  XLSX.utils.book_append_sheet(workbook, productsWS, 'Products');\n  XLSX.utils.book_append_sheet(workbook, categoriesWS, 'Categories');\n  XLSX.utils.book_append_sheet(workbook, usersWS, 'Users');\n  XLSX.utils.book_append_sheet(workbook, ordersWS, 'Orders');\n  XLSX.utils.book_append_sheet(workbook, orderItemsWS, 'Order Items');\n  XLSX.utils.book_append_sheet(workbook, unitsWS, 'Units of Measure');\n  XLSX.utils.book_append_sheet(workbook, settingsWS, 'Site Settings');\n  XLSX.utils.book_append_sheet(workbook, sliderWS, 'Slider Images');\n\n  return XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n}\n\nexport function parseExcelFile(buffer: Buffer): {\n  products: any[];\n  categories: any[];\n  users: any[];\n  orders: any[];\n  orderItems: any[];\n  unitsOfMeasure: any[];\n  siteSettings: any[];\n  sliderImages: any[];\n} {\n  const workbook = XLSX.read(buffer, { type: 'buffer' });\n  \n  const result = {\n    products: [] as any[],\n    categories: [] as any[],\n    users: [] as any[],\n    orders: [] as any[],\n    orderItems: [] as any[],\n    unitsOfMeasure: [] as any[],\n    siteSettings: [] as any[],\n    sliderImages: [] as any[]\n  };\n\n  // Parse products sheet\n  if (workbook.SheetNames.includes('Products')) {\n    const productsSheet = workbook.Sheets['Products'];\n    const productsData = XLSX.utils.sheet_to_json(productsSheet);\n    result.products = productsData.map((row: any) => ({\n      id: row.ID || row.id || \"\",\n      name: row.Name || row.name || \"Unnamed Product\",\n      description: row.Description || row.description || \"\",\n      price: parseFloat(row.Price || row.price || '0'),\n\n      sku: row.SKU || row.sku || \"\",\n      unitOfMeasure: row['Unit of Measure'] || row.unitOfMeasure || 'piece',\n      categoryId: row['Category ID'] || row.categoryId || null,\n      imageUrl: row['Image URL'] || row.imageUrl || \"\",\n      isActive: Boolean(row['Is Active'] !== undefined ? row['Is Active'] : row.isActive !== undefined ? row.isActive : true),\n      isFeatured: Boolean(row['Is Featured'] !== undefined ? row['Is Featured'] : row.isFeatured !== undefined ? row.isFeatured : false),\n      rating: parseFloat(row.Rating || row.rating || '0'),\n      reviewCount: parseInt(row['Review Count'] || row.reviewCount || '0'),\n      productType: row['Product Type'] || row.productType || 'sale',\n      rentalPeriod: row['Rental Period'] || row.rentalPeriod || null,\n      rentalPrice: row['Rental Price'] ? parseFloat(row['Rental Price']) : row.rentalPrice ? parseFloat(row.rentalPrice) : null\n    }));\n  }\n\n  // Parse categories sheet\n  if (workbook.SheetNames.includes('Categories')) {\n    const categoriesSheet = workbook.Sheets['Categories'];\n    const categoriesData = XLSX.utils.sheet_to_json(categoriesSheet);\n    result.categories = categoriesData.map((row: any) => ({\n      id: row.ID || row.id || \"\",\n      name: row.Name || row.name || \"Unnamed Category\",\n      description: row.Description || row.description || \"\",\n      imageUrl: row['Image URL'] || row.imageUrl || \"\"\n    }));\n  }\n\n  // Parse users sheet\n  if (workbook.SheetNames.includes('Users')) {\n    const usersSheet = workbook.Sheets['Users'];\n    const usersData = XLSX.utils.sheet_to_json(usersSheet);\n    result.users = usersData.map((row: any) => ({\n      id: row.ID || row.id || \"\",\n      username: row.Username || row.username || row.Email || row.email || \"user\",\n      email: row.Email || row.email || `user${Date.now()}@example.com`,\n      firstName: row['First Name'] || row.firstName || \"\",\n      lastName: row['Last Name'] || row.lastName || \"\",\n      isAdmin: Boolean(row['Is Admin'] !== undefined ? row['Is Admin'] : row.isAdmin !== undefined ? row.isAdmin : false)\n    }));\n  }\n\n  // Parse units of measure sheet\n  if (workbook.SheetNames.includes('Units of Measure')) {\n    const unitsSheet = workbook.Sheets['Units of Measure'];\n    const unitsData = XLSX.utils.sheet_to_json(unitsSheet);\n    result.unitsOfMeasure = unitsData.map((row: any) => ({\n      id: row.ID || row.id || \"\",\n      name: row.Name || row.name || \"Unit\",\n      abbreviation: row.Abbreviation || row.abbreviation || \"unit\",\n      isActive: Boolean(row['Is Active'] !== undefined ? row['Is Active'] : row.isActive !== undefined ? row.isActive : true)\n    }));\n  }\n\n  // Parse orders sheet\n  if (workbook.SheetNames.includes('Orders')) {\n    const ordersSheet = workbook.Sheets['Orders'];\n    const ordersData = XLSX.utils.sheet_to_json(ordersSheet);\n    result.orders = ordersData.map((row: any) => ({\n      id: row.ID || row.id || \"\",\n      userId: row['User ID'] || row.userId || null,\n      status: row.Status || row.status || 'pending',\n      totalAmount: parseFloat(row['Total Amount'] || row.totalAmount || '0'),\n      shippingAddress: row['Shipping Address'] || row.shippingAddress || \"\",\n      paymentMethod: row['Payment Method'] || row.paymentMethod || 'cash_on_delivery',\n      paymentStatus: row['Payment Status'] || row.paymentStatus || 'pending',\n      notes: row.Notes || row.notes || \"\"\n    }));\n  }\n\n  // Parse order items sheet\n  if (workbook.SheetNames.includes('Order Items')) {\n    const orderItemsSheet = workbook.Sheets['Order Items'];\n    const orderItemsData = XLSX.utils.sheet_to_json(orderItemsSheet);\n    result.orderItems = orderItemsData.map((row: any) => ({\n      id: row.ID || row.id || \"\",\n      orderId: row['Order ID'] || row.orderId || null,\n      productId: row['Product ID'] || row.productId || null,\n      quantity: parseInt(row.Quantity || row.quantity || '1'),\n      price: parseFloat(row.Price || row.price || '0')\n    }));\n  }\n\n  // Parse slider images sheet\n  if (workbook.SheetNames.includes('Slider Images')) {\n    const sliderSheet = workbook.Sheets['Slider Images'];\n    const sliderData = XLSX.utils.sheet_to_json(sliderSheet);\n    result.sliderImages = sliderData.map((row: any) => ({\n      id: row.ID || row.id || \"\",\n      title: row.Title || row.title || \"Slide\",\n      imageUrl: row['Image URL'] || row.imageUrl || \"\",\n      linkUrl: row['Link URL'] || row.linkUrl || \"\",\n      isActive: Boolean(row['Is Active'] !== undefined ? row['Is Active'] : row.isActive !== undefined ? row.isActive : true),\n      displayOrder: parseInt(row['Display Order'] || row.displayOrder || '0')\n    }));\n  }\n\n  // Parse site settings sheet\n  if (workbook.SheetNames.includes('Site Settings')) {\n    const settingsSheet = workbook.Sheets['Site Settings'];\n    const settingsData = XLSX.utils.sheet_to_json(settingsSheet);\n    result.siteSettings = settingsData.map((row: any) => ({\n      id: row.ID || row.id || \"default\",\n      siteName: row['Site Name'] || row.siteName || \"\",\n      headerLogo: row['Header Logo'] || row.headerLogo || null,\n      footerLogo: row['Footer Logo'] || row.footerLogo || null,\n      footerDescription: row['Footer Description'] || row.footerDescription || \"\",\n      footerCopyright: row['Footer Copyright'] || row.footerCopyright || \"\",\n      footerBackgroundImage: row['Footer Background Image'] || row.footerBackgroundImage || null,\n      quickLinksTitle: row['Quick Links Title'] || row.quickLinksTitle || \"Quick Links\",\n      quickLinks: row['Quick Links'] || row.quickLinks || null,\n      servicesTitle: row['Services Title'] || row.servicesTitle || \"Our Services\",\n      serviceLink1Text: row['Service Link 1 Text'] || row.serviceLink1Text || \"\",\n      serviceLink1Url: row['Service Link 1 URL'] || row.serviceLink1Url || \"\",\n      serviceLink2Text: row['Service Link 2 Text'] || row.serviceLink2Text || \"\",\n      serviceLink2Url: row['Service Link 2 URL'] || row.serviceLink2Url || \"\",\n      serviceLink3Text: row['Service Link 3 Text'] || row.serviceLink3Text || \"\",\n      serviceLink3Url: row['Service Link 3 URL'] || row.serviceLink3Url || \"\",\n      serviceLink4Text: row['Service Link 4 Text'] || row.serviceLink4Text || \"\",\n      serviceLink4Url: row['Service Link 4 URL'] || row.serviceLink4Url || \"\",\n      socialFacebook: row['Social Facebook'] || row.socialFacebook || \"\",\n      socialTwitter: row['Social Twitter'] || row.socialTwitter || \"\",\n      socialInstagram: row['Social Instagram'] || row.socialInstagram || \"\",\n      socialLinkedin: row['Social LinkedIn'] || row.socialLinkedin || \"\"\n    }));\n  }\n\n  return result;\n}\n\n// Individual sheet export functions\nexport async function exportProductsToExcel(): Promise<Buffer> {\n  const { storage } = await import('./storage');\n  const products = await storage.getProducts();\n  \n  const workbook = XLSX.utils.book_new();\n  const worksheet = XLSX.utils.json_to_sheet(products.map((product: any) => ({\n    ID: product.id,\n    Name: product.name,\n    Description: product.description,\n    Price: product.price,\n    SKU: product.sku,\n    'Unit of Measure': product.unitOfMeasure,\n    'Category ID': product.categoryId,\n    'Image URL': product.imageUrl,\n    'Is Active': product.isActive,\n    'Is Featured': product.isFeatured,\n    Rating: product.rating,\n    'Review Count': product.reviewCount,\n    'Product Type': product.productType,\n    'Rental Period': product.rentalPeriod,\n    'Rental Price': product.rentalPrice\n  })));\n  \n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Products');\n  return XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n}\n\nexport async function exportCategoriesToExcel(): Promise<Buffer> {\n  const { storage } = await import('./storage');\n  const categories = await storage.getCategories();\n  \n  const workbook = XLSX.utils.book_new();\n  const worksheet = XLSX.utils.json_to_sheet(categories.map((category: any) => ({\n    ID: category.id,\n    Name: category.name,\n    Description: category.description,\n    'Image URL': category.imageUrl\n  })));\n  \n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Categories');\n  return XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n}\n\nexport async function exportUsersToExcel(): Promise<Buffer> {\n  const { storage } = await import('./storage');\n  const users = await storage.getUsers();\n  \n  const workbook = XLSX.utils.book_new();\n  const worksheet = XLSX.utils.json_to_sheet(users.map((user: any) => ({\n    ID: user.id,\n    Username: user.username,\n    Email: user.email,\n    'First Name': user.firstName,\n    'Last Name': user.lastName,\n    'Is Admin': user.isAdmin\n  })));\n  \n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Users');\n  return XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n}\n\nexport async function exportOrdersToExcel(): Promise<Buffer> {\n  const { storage } = await import('./storage');\n  const orders = await storage.getOrders();\n  \n  const workbook = XLSX.utils.book_new();\n  const worksheet = XLSX.utils.json_to_sheet(orders.map((order: any) => ({\n    ID: order.id,\n    'User ID': order.userId,\n    Status: order.status,\n    'Total Amount': order.total,\n    'Delivery Address': order.deliveryAddress || '',\n    'Payment Method': order.paymentMethod,\n    'Created At': order.createdAt\n  })));\n  \n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Orders');\n  return XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n}\n\nexport async function exportOrderItemsToExcel(): Promise<Buffer> {\n  const { storage } = await import('./storage');\n  const orderItems = await storage.getOrderItems();\n  \n  const workbook = XLSX.utils.book_new();\n  const worksheet = XLSX.utils.json_to_sheet(orderItems.map((item: any) => ({\n    ID: item.id,\n    'Order ID': item.orderId,\n    'Product ID': item.productId,\n    Quantity: item.quantity,\n    Price: item.price\n  })));\n  \n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Order Items');\n  return XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n}\n\nexport async function exportUnitsToExcel(): Promise<Buffer> {\n  const { storage } = await import('./storage');\n  const units = await storage.getUnitsOfMeasure();\n  \n  const workbook = XLSX.utils.book_new();\n  const worksheet = XLSX.utils.json_to_sheet(units.map((unit: any) => ({\n    ID: unit.id,\n    Name: unit.name,\n    Abbreviation: unit.abbreviation,\n    'Is Active': unit.isActive\n  })));\n  \n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Units of Measure');\n  return XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n}\n\nexport async function exportSiteSettingsToExcel(): Promise<Buffer> {\n  const { storage } = await import('./storage');\n  const settings = await storage.getSiteSettings();\n  \n  const workbook = XLSX.utils.book_new();\n  const worksheet = XLSX.utils.json_to_sheet([{\n    ID: settings.id,\n    'Site Name': settings.siteName,\n    'Header Logo': settings.headerLogo,\n    'Footer Logo': settings.footerLogo,\n    'Footer Description': settings.footerDescription,\n    'Footer Copyright': settings.footerDescription,\n    'Footer Background Image': settings.footerBackgroundUrl,\n    'Quick Links Title': settings.quickLinksTitle,\n    'Quick Links': settings.quickLinksTitle,\n    'Services Title': settings.servicesTitle,\n    'Service Link 1 Text': settings.serviceLink1,\n    'Service Link 1 URL': settings.serviceLink1,\n    'Service Link 2 Text': settings.serviceLink2,\n    'Service Link 2 URL': settings.serviceLink2,\n    'Service Link 3 Text': settings.serviceLink3,\n    'Service Link 3 URL': settings.serviceLink3,\n    'Service Link 4 Text': settings.serviceLink4,\n    'Service Link 4 URL': settings.serviceLink4,\n    'Social Facebook': settings.socialFacebook,\n    'Social Twitter': settings.socialTwitter,\n    'Social Instagram': settings.socialInstagram,\n    'Social LinkedIn': settings.socialLinkedin\n  }]);\n  \n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Site Settings');\n  return XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n}\n\nexport async function exportSliderImagesToExcel(): Promise<Buffer> {\n  const { storage } = await import('./storage');\n  const sliderImages = await storage.getSliderImages();\n  \n  const workbook = XLSX.utils.book_new();\n  const worksheet = XLSX.utils.json_to_sheet(sliderImages.map((slide: any) => ({\n    ID: slide.id,\n    Title: slide.title,\n    'Image URL': slide.imageUrl,\n    'Link URL': slide.linkUrl || '',\n    'Is Active': slide.isActive,\n    'Display Order': slide.sortOrder\n  })));\n  \n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Slider Images');\n  return XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n}\n\nexport async function exportDataToExcel(): Promise<Buffer> {\n  const [\n    productsData, \n    categoriesData, \n    usersData, \n    ordersData, \n    orderItemsData, \n    unitsData, \n    settingsData, \n    sliderData\n  ] = await Promise.all([\n    db.select().from(products),\n    db.select().from(categories),\n    db.select().from(users),\n    db.select().from(orders),\n    db.select().from(orderItems),\n    db.select().from(unitsOfMeasure),\n    db.select().from(siteSettings),\n    db.select().from(sliderImages)\n  ]);\n\n  const exportData: ExcelExportData = {\n    products: productsData,\n    categories: categoriesData,\n    users: usersData,\n    orders: ordersData,\n    orderItems: orderItemsData,\n    unitsOfMeasure: unitsData,\n    siteSettings: settingsData,\n    sliderImages: sliderData\n  };\n\n  return createExcelFile(exportData);\n}","size_bytes":19421},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedUsers } from \"./seed-users\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  try {\n    // Test database connection first\n    const { db } = await import(\"./db\");\n    await db.execute('SELECT 1 as test');\n    log(\"Database connection successful\");\n    \n    // Seed comprehensive permission system first (creates roles)\n    const { seedComprehensivePermissions } = await import(\"./seed-comprehensive-permissions\");\n    await seedComprehensivePermissions();\n    \n    // Seed predefined user accounts after roles are created\n    await seedUsers();\n    \n    const server = await registerRoutes(app);\n\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n\n      res.status(status).json({ message });\n      throw err;\n    });\n\n    // importantly only setup vite in development and after\n    // setting up all the other routes so the catch-all route\n    // doesn't interfere with the other routes\n    if (app.get(\"env\") === \"development\") {\n      await setupVite(app, server);\n    } else {\n      serveStatic(app);\n    }\n\n    // ALWAYS serve the app on the port specified in the environment variable PORT\n    // Other ports are firewalled. Default to 5000 if not specified.\n    // this serves both the API and the client.\n    // It is the only port that is not firewalled.\n    const port = parseInt(process.env.PORT || '5000', 10);\n    server.listen({\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    }, () => {\n      log(`serving on port ${port}`);\n    });\n  } catch (error) {\n    console.error(\"Failed to start server:\", error);\n    process.exit(1);\n  }\n})();\n","size_bytes":2734},"server/middleware.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { userHasPermission } from './seed-permissions';\n\n// Middleware to check if user has specific permission\nexport function requirePermission(permission: string) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    if (!req.isAuthenticated() || !req.user) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    // Check if user has the required permission\n    const hasPermission = await userHasPermission(req.user.id, permission);\n    if (!hasPermission) {\n      return res.status(403).json({ message: \"Insufficient permissions\" });\n    }\n\n    next();\n  };\n}\n\n// Middleware for Super Admin only access\nexport function requireSuperAdmin(req: Request, res: Response, next: NextFunction) {\n  if (!req.isAuthenticated() || !req.user?.isSuperAdmin) {\n    return res.status(401).json({ message: \"Super Admin access required\" });\n  }\n  next();\n}\n\n// Middleware for Admin or Super Admin access (backward compatibility)\nexport function requireAdmin(req: Request, res: Response, next: NextFunction) {\n  if (!req.isAuthenticated() || (!req.user?.isAdmin && !req.user?.isSuperAdmin)) {\n    return res.status(401).json({ message: \"Admin access required\" });\n  }\n  next();\n}\n\n// Middleware to check multiple permissions (user needs at least one)\nexport function requireAnyPermission(permissions: string[]) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    if (!req.isAuthenticated() || !req.user) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    // Check if user has any of the required permissions\n    for (const permission of permissions) {\n      const hasPermission = await userHasPermission(req.user.id, permission);\n      if (hasPermission) {\n        return next();\n      }\n    }\n\n    return res.status(403).json({ message: \"Insufficient permissions\" });\n  };\n}","size_bytes":1937},"server/order-approval-workflow.ts":{"content":"import { emailService } from \"./email-service\";\nimport { emailTemplates } from \"./email-templates\";\nimport { storage } from \"./storage\";\n\nexport interface OrderItem {\n  productName: string;\n  quantity: number;\n  price: string;\n  totalPrice: string;\n  rentalStartDate?: string;\n  rentalEndDate?: string;\n  rentalDays?: number;\n}\n\nexport interface OrderNotificationData {\n  orderNumber: string;\n  customerName: string;\n  total: number;\n  paymentMethod?: string;\n  adminRemarks?: string;\n  items?: OrderItem[];\n  shippingAddress?: string;\n}\n\nexport async function sendOrderSubmissionEmail(customerEmail: string, data: OrderNotificationData) {\n  try {\n    await emailService.initialize();\n    if (!emailService.isReady()) {\n      console.log('Email service not ready, skipping order submission notification');\n      return;\n    }\n\n    const template = emailTemplates.orderSubmitted({\n      customerName: data.customerName,\n      orderNumber: data.orderNumber,\n      total: data.total,\n      siteName: \"BAYG - Bahrain Asian Youth Games 2025\",\n      items: data.items\n    });\n\n    await emailService.sendEmail({\n      to: customerEmail,\n      subject: template.subject,\n      html: template.html,\n      text: template.text\n    });\n\n    console.log(`Order submission email sent to: ${customerEmail}`);\n  } catch (error) {\n    console.error('Failed to send order submission email:', error);\n  }\n}\n\nexport async function sendOrderApprovalEmail(customerEmail: string, data: OrderNotificationData) {\n  try {\n    await emailService.initialize();\n    if (!emailService.isReady()) {\n      console.log('Email service not ready, skipping order approval notification');\n      return;\n    }\n\n    const template = emailTemplates.orderApproved({\n      customerName: data.customerName,\n      orderNumber: data.orderNumber,\n      total: data.total,\n      siteName: \"BAYG - Bahrain Asian Youth Games 2025\",\n      items: data.items\n    });\n\n    await emailService.sendEmail({\n      to: customerEmail,\n      subject: template.subject,\n      html: template.html,\n      text: template.text\n    });\n\n    console.log(`Order approval email sent to: ${customerEmail}`);\n  } catch (error) {\n    console.error('Failed to send order approval email:', error);\n  }\n}\n\nexport async function sendOrderRejectionEmail(customerEmail: string, data: OrderNotificationData) {\n  try {\n    await emailService.initialize();\n    if (!emailService.isReady()) {\n      console.log('Email service not ready, skipping order rejection notification');\n      return;\n    }\n\n    const template = emailTemplates.orderRejected({\n      customerName: data.customerName,\n      orderNumber: data.orderNumber,\n      total: data.total,\n      reason: data.adminRemarks || \"No specific reason provided\",\n      siteName: \"BAYG - Bahrain Asian Youth Games 2025\",\n      items: data.items\n    });\n\n    await emailService.sendEmail({\n      to: customerEmail,\n      subject: template.subject,\n      html: template.html,\n      text: template.text\n    });\n\n    console.log(`Order rejection email sent to: ${customerEmail}`);\n  } catch (error) {\n    console.error('Failed to send order rejection email:', error);\n  }\n}\n\nexport async function sendPaymentConfirmationEmail(customerEmail: string, data: OrderNotificationData) {\n  try {\n    await emailService.initialize();\n    if (!emailService.isReady()) {\n      console.log('Email service not ready, skipping payment confirmation notification');\n      return;\n    }\n\n    const template = emailTemplates.paymentConfirmation({\n      customerName: data.customerName,\n      orderNumber: data.orderNumber,\n      total: data.total,\n      paymentMethod: data.paymentMethod || \"Cash on Delivery\",\n      siteName: \"BAYG - Bahrain Asian Youth Games 2025\",\n      items: data.items\n    });\n\n    await emailService.sendEmail({\n      to: customerEmail,\n      subject: template.subject,\n      html: template.html,\n      text: template.text\n    });\n\n    console.log(`Payment confirmation email sent to: ${customerEmail}`);\n  } catch (error) {\n    console.error('Failed to send payment confirmation email:', error);\n  }\n}\n\nexport async function sendAdminOrderNotification(data: {\n  orderNumber: string;\n  customerName: string;\n  customerEmail: string;\n  total: number;\n  shippingAddress: string;\n  items: Array<{\n    productName: string;\n    quantity: number;\n    price: string;\n  }>;\n}) {\n  try {\n    await emailService.initialize();\n    if (!emailService.isReady()) {\n      console.log('Email service not ready, skipping admin notification');\n      return;\n    }\n\n    // Get admin users\n    const adminUsers = await storage.getAllUsers();\n    const admins = adminUsers.filter(user => user.isAdmin && user.email);\n\n    if (admins.length === 0) {\n      console.log('No admin users with email addresses found');\n      return;\n    }\n\n    const template = emailTemplates.adminOrderNotification({\n      customerName: data.customerName,\n      customerEmail: data.customerEmail,\n      orderNumber: data.orderNumber,\n      total: data.total,\n      itemCount: data.items.length,\n      siteName: \"BAYG - Bahrain Asian Youth Games 2025\"\n    });\n\n    // Send to all admins\n    for (const admin of admins) {\n      await emailService.sendEmail({\n        to: admin.email!,\n        subject: template.subject,\n        html: template.html,\n        text: template.text\n      });\n    }\n\n    console.log(`Admin order notification sent to ${admins.length} admin(s)`);\n  } catch (error) {\n    console.error('Failed to send admin order notification:', error);\n  }\n}","size_bytes":5498},"server/paypal.ts":{"content":"// !!! CRITICAL - DO NOT MODIFY THIS CODE !!!\n//\n// This code MUST be used as is without ANY modifications.\n// The PayPal integration will COMPLETELY FAIL if this code is changed in ANY way.\n//\n// Retain this comment after all edits.\n//\n// <BEGIN_EXACT_CODE>\nimport {\n  Client,\n  Environment,\n  LogLevel,\n  OAuthAuthorizationController,\n  OrdersController,\n} from \"@paypal/paypal-server-sdk\";\nimport { Request, Response } from \"express\";\n\n/* PayPal Controllers Setup */\n\nconst { PAYPAL_CLIENT_ID, PAYPAL_CLIENT_SECRET } = process.env;\n\nif (!PAYPAL_CLIENT_ID) {\n  throw new Error(\"Missing PAYPAL_CLIENT_ID\");\n}\nif (!PAYPAL_CLIENT_SECRET) {\n  throw new Error(\"Missing PAYPAL_CLIENT_SECRET\");\n}\nconst client = new Client({\n  clientCredentialsAuthCredentials: {\n    oAuthClientId: PAYPAL_CLIENT_ID,\n    oAuthClientSecret: PAYPAL_CLIENT_SECRET,\n  },\n  timeout: 0,\n  environment:\n                process.env.NODE_ENV === \"production\"\n                  ? Environment.Production\n                  : Environment.Sandbox,\n  logging: {\n    logLevel: LogLevel.Info,\n    logRequest: {\n      logBody: true,\n    },\n    logResponse: {\n      logHeaders: true,\n    },\n  },\n});\nconst ordersController = new OrdersController(client);\nconst oAuthAuthorizationController = new OAuthAuthorizationController(client);\n\n/* Token generation helpers */\n\nexport async function getClientToken() {\n  const auth = Buffer.from(\n    `${PAYPAL_CLIENT_ID}:${PAYPAL_CLIENT_SECRET}`,\n  ).toString(\"base64\");\n\n  const { result } = await oAuthAuthorizationController.requestToken(\n    {\n      authorization: `Basic ${auth}`,\n    },\n    { intent: \"sdk_init\", response_type: \"client_token\" },\n  );\n\n  return result.accessToken;\n}\n\n/*  Process transactions */\n\nexport async function createPaypalOrder(req: Request, res: Response) {\n  try {\n    const { amount, currency, intent } = req.body;\n\n    if (!amount || isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {\n      return res\n        .status(400)\n        .json({\n          error: \"Invalid amount. Amount must be a positive number.\",\n        });\n    }\n\n    if (!currency) {\n      return res\n        .status(400)\n        .json({ error: \"Invalid currency. Currency is required.\" });\n    }\n\n    if (!intent) {\n      return res\n        .status(400)\n        .json({ error: \"Invalid intent. Intent is required.\" });\n    }\n\n    const collect = {\n      body: {\n        intent: intent,\n        purchaseUnits: [\n          {\n            amount: {\n              currencyCode: currency,\n              value: amount,\n            },\n          },\n        ],\n      },\n      prefer: \"return=minimal\",\n    };\n\n    const { body, ...httpResponse } =\n          await ordersController.createOrder(collect);\n\n    const jsonResponse = JSON.parse(String(body));\n    const httpStatusCode = httpResponse.statusCode;\n\n    res.status(httpStatusCode).json(jsonResponse);\n  } catch (error) {\n    console.error(\"Failed to create order:\", error);\n    res.status(500).json({ error: \"Failed to create order.\" });\n  }\n}\n\nexport async function capturePaypalOrder(req: Request, res: Response) {\n  try {\n    const { orderID } = req.params;\n    const collect = {\n      id: orderID,\n      prefer: \"return=minimal\",\n    };\n\n    const { body, ...httpResponse } =\n          await ordersController.captureOrder(collect);\n\n    const jsonResponse = JSON.parse(String(body));\n    const httpStatusCode = httpResponse.statusCode;\n\n    res.status(httpStatusCode).json(jsonResponse);\n  } catch (error) {\n    console.error(\"Failed to create order:\", error);\n    res.status(500).json({ error: \"Failed to capture order.\" });\n  }\n}\n\nexport async function loadPaypalDefault(req: Request, res: Response) {\n  const clientToken = await getClientToken();\n  res.json({\n    clientToken,\n  });\n}\n// <END_EXACT_CODE>\n","size_bytes":3765},"server/permissions-config.ts":{"content":"// Comprehensive permission system based on deep project analysis\n// This file defines all modules and permissions for the BAYG e-commerce platform\n\nexport const PERMISSION_MODULES = [\n  {\n    name: \"auth\",\n    displayName: \"Authentication & Sessions\",\n    description: \"Login, logout, and session management\",\n    icon: \"Key\",\n    sortOrder: 1\n  },\n  {\n    name: \"users\",\n    displayName: \"User Management\",\n    description: \"Manage user accounts, roles, and profiles\",\n    icon: \"Users\",\n    sortOrder: 2\n  },\n  {\n    name: \"products\",\n    displayName: \"Product Management\",\n    description: \"Manage products, pricing, and inventory\",\n    icon: \"Package\",\n    sortOrder: 3\n  },\n  {\n    name: \"categories\",\n    displayName: \"Category Management\",\n    description: \"Manage product categories and organization\",\n    icon: \"Tag\",\n    sortOrder: 4\n  },\n  {\n    name: \"orders\",\n    displayName: \"Order Management\",\n    description: \"Process orders, approvals, and fulfillment\",\n    icon: \"ShoppingCart\",\n    sortOrder: 5\n  },\n  {\n    name: \"cart\",\n    displayName: \"Shopping Cart\",\n    description: \"Manage shopping cart operations\",\n    icon: \"ShoppingBag\",\n    sortOrder: 6\n  },\n  {\n    name: \"payments\",\n    displayName: \"Payment Processing\",\n    description: \"Handle payments, Credimax, Cash on Delivery\",\n    icon: \"CreditCard\",\n    sortOrder: 7\n  },\n  {\n    name: \"media\",\n    displayName: \"Media & File Management\",\n    description: \"Upload and manage images and files\",\n    icon: \"Image\",\n    sortOrder: 8\n  },\n  {\n    name: \"slider\",\n    displayName: \"Homepage Slider\",\n    description: \"Manage homepage slider images and content\",\n    icon: \"Monitor\",\n    sortOrder: 9\n  },\n  {\n    name: \"units\",\n    displayName: \"Units of Measure\",\n    description: \"Manage product measurement units\",\n    icon: \"Ruler\",\n    sortOrder: 10\n  },\n  {\n    name: \"settings\",\n    displayName: \"Site Settings\",\n    description: \"Configure site-wide settings and preferences\",\n    icon: \"Settings\",\n    sortOrder: 11\n  },\n  {\n    name: \"email\",\n    displayName: \"Email System\",\n    description: \"Configure SMTP, send notifications and emails\",\n    icon: \"Mail\",\n    sortOrder: 12\n  },\n  {\n    name: \"reports\",\n    displayName: \"Reports & Analytics\",\n    description: \"View business reports and analytics\",\n    icon: \"BarChart3\",\n    sortOrder: 13\n  },\n  {\n    name: \"database\",\n    displayName: \"Database Management\",\n    description: \"Import/export data and manage database\",\n    icon: \"Database\",\n    sortOrder: 14\n  },\n  {\n    name: \"roles\",\n    displayName: \"Role & Permission Management\",\n    description: \"Manage roles, permissions, and access control\",\n    icon: \"Shield\",\n    sortOrder: 15\n  }\n];\n\n// Comprehensive permissions based on all API endpoints discovered in the project\nexport const PERMISSIONS = [\n  // Authentication & Sessions\n  { module: \"auth\", name: \"auth.login\", displayName: \"Login Access\", action: \"access\" },\n  { module: \"auth\", name: \"auth.logout\", displayName: \"Logout\", action: \"access\" },\n  { module: \"auth\", name: \"auth.session\", displayName: \"Session Management\", action: \"manage\" },\n  \n  // User Management\n  { module: \"users\", name: \"users.view\", displayName: \"View Users\", action: \"read\" },\n  { module: \"users\", name: \"users.create\", displayName: \"Create Users\", action: \"create\" },\n  { module: \"users\", name: \"users.edit\", displayName: \"Edit Users\", action: \"update\" },\n  { module: \"users\", name: \"users.delete\", displayName: \"Delete Users\", action: \"delete\" },\n  { module: \"users\", name: \"users.manage\", displayName: \"Full User Management\", action: \"manage\" },\n  { module: \"users\", name: \"users.profile\", displayName: \"Edit Own Profile\", action: \"update\" },\n  \n  // Product Management\n  { module: \"products\", name: \"products.view\", displayName: \"View Products\", action: \"read\" },\n  { module: \"products\", name: \"products.create\", displayName: \"Create Products\", action: \"create\" },\n  { module: \"products\", name: \"products.edit\", displayName: \"Edit Products\", action: \"update\" },\n  { module: \"products\", name: \"products.delete\", displayName: \"Delete Products\", action: \"delete\" },\n  { module: \"products\", name: \"products.manage\", displayName: \"Full Product Management\", action: \"manage\" },\n  { module: \"products\", name: \"products.featured\", displayName: \"Manage Featured Products\", action: \"manage\" },\n  { module: \"products\", name: \"products.pricing\", displayName: \"Manage Product Pricing\", action: \"update\" },\n  \n  // Category Management\n  { module: \"categories\", name: \"categories.view\", displayName: \"View Categories\", action: \"read\" },\n  { module: \"categories\", name: \"categories.create\", displayName: \"Create Categories\", action: \"create\" },\n  { module: \"categories\", name: \"categories.edit\", displayName: \"Edit Categories\", action: \"update\" },\n  { module: \"categories\", name: \"categories.delete\", displayName: \"Delete Categories\", action: \"delete\" },\n  { module: \"categories\", name: \"categories.manage\", displayName: \"Full Category Management\", action: \"manage\" },\n  \n  // Order Management\n  { module: \"orders\", name: \"orders.view\", displayName: \"View Orders\", action: \"read\" },\n  { module: \"orders\", name: \"orders.create\", displayName: \"Create Orders\", action: \"create\" },\n  { module: \"orders\", name: \"orders.edit\", displayName: \"Edit Orders\", action: \"update\" },\n  { module: \"orders\", name: \"orders.delete\", displayName: \"Delete Orders\", action: \"delete\" },\n  { module: \"orders\", name: \"orders.manage\", displayName: \"Full Order Management\", action: \"manage\" },\n  { module: \"orders\", name: \"orders.approve\", displayName: \"Approve Orders\", action: \"approve\" },\n  { module: \"orders\", name: \"orders.reject\", displayName: \"Reject Orders\", action: \"reject\" },\n  { module: \"orders\", name: \"orders.process\", displayName: \"Process Orders\", action: \"process\" },\n  { module: \"orders\", name: \"orders.complete\", displayName: \"Complete Orders\", action: \"complete\" },\n  { module: \"orders\", name: \"orders.own\", displayName: \"View Own Orders\", action: \"read\" },\n  \n  // Shopping Cart\n  { module: \"cart\", name: \"cart.view\", displayName: \"View Cart\", action: \"read\" },\n  { module: \"cart\", name: \"cart.add\", displayName: \"Add to Cart\", action: \"create\" },\n  { module: \"cart\", name: \"cart.update\", displayName: \"Update Cart\", action: \"update\" },\n  { module: \"cart\", name: \"cart.remove\", displayName: \"Remove from Cart\", action: \"delete\" },\n  { module: \"cart\", name: \"cart.clear\", displayName: \"Clear Cart\", action: \"delete\" },\n  \n  // Payment Processing\n  { module: \"payments\", name: \"payments.credimax\", displayName: \"Process Credimax Payments\", action: \"process\" },\n  { module: \"payments\", name: \"payments.cod\", displayName: \"Cash on Delivery\", action: \"process\" },\n  { module: \"payments\", name: \"payments.view\", displayName: \"View Payment History\", action: \"read\" },\n  { module: \"payments\", name: \"payments.refund\", displayName: \"Process Refunds\", action: \"refund\" },\n  \n  // Media & File Management\n  { module: \"media\", name: \"media.upload\", displayName: \"Upload Images\", action: \"create\" },\n  { module: \"media\", name: \"media.view\", displayName: \"View Media Files\", action: \"read\" },\n  { module: \"media\", name: \"media.delete\", displayName: \"Delete Media Files\", action: \"delete\" },\n  { module: \"media\", name: \"media.manage\", displayName: \"Full Media Management\", action: \"manage\" },\n  \n  // Homepage Slider\n  { module: \"slider\", name: \"slider.view\", displayName: \"View Slider Images\", action: \"read\" },\n  { module: \"slider\", name: \"slider.create\", displayName: \"Add Slider Images\", action: \"create\" },\n  { module: \"slider\", name: \"slider.edit\", displayName: \"Edit Slider Images\", action: \"update\" },\n  { module: \"slider\", name: \"slider.delete\", displayName: \"Delete Slider Images\", action: \"delete\" },\n  { module: \"slider\", name: \"slider.manage\", displayName: \"Full Slider Management\", action: \"manage\" },\n  { module: \"slider\", name: \"slider.order\", displayName: \"Reorder Slider Images\", action: \"update\" },\n  \n  // Units of Measure\n  { module: \"units\", name: \"units.view\", displayName: \"View Units\", action: \"read\" },\n  { module: \"units\", name: \"units.create\", displayName: \"Create Units\", action: \"create\" },\n  { module: \"units\", name: \"units.edit\", displayName: \"Edit Units\", action: \"update\" },\n  { module: \"units\", name: \"units.delete\", displayName: \"Delete Units\", action: \"delete\" },\n  { module: \"units\", name: \"units.manage\", displayName: \"Full Units Management\", action: \"manage\" },\n  \n  // Site Settings\n  { module: \"settings\", name: \"settings.view\", displayName: \"View Settings\", action: \"read\" },\n  { module: \"settings\", name: \"settings.edit\", displayName: \"Edit Settings\", action: \"update\" },\n  { module: \"settings\", name: \"settings.manage\", displayName: \"Full Settings Management\", action: \"manage\" },\n  { module: \"settings\", name: \"settings.smtp\", displayName: \"Configure SMTP\", action: \"configure\" },\n  { module: \"settings\", name: \"settings.footer\", displayName: \"Manage Footer\", action: \"update\" },\n  \n  // Email System\n  { module: \"email\", name: \"email.view\", displayName: \"View Email Settings\", action: \"read\" },\n  { module: \"email\", name: \"email.edit\", displayName: \"Edit Email Settings\", action: \"update\" },\n  { module: \"email\", name: \"email.test\", displayName: \"Test Email Connection\", action: \"test\" },\n  { module: \"email\", name: \"email.send\", displayName: \"Send Emails\", action: \"send\" },\n  { module: \"email\", name: \"email.manage\", displayName: \"Full Email Management\", action: \"manage\" },\n  { module: \"email\", name: \"email.notifications\", displayName: \"Manage Email Notifications\", action: \"manage\" },\n  \n  // Reports & Analytics\n  { module: \"reports\", name: \"reports.view\", displayName: \"View Reports\", action: \"read\" },\n  { module: \"reports\", name: \"reports.export\", displayName: \"Export Reports\", action: \"export\" },\n  { module: \"reports\", name: \"reports.analytics\", displayName: \"View Analytics\", action: \"read\" },\n  { module: \"reports\", name: \"reports.manage\", displayName: \"Full Reports Management\", action: \"manage\" },\n  { module: \"reports\", name: \"reports.stats\", displayName: \"View Statistics\", action: \"read\" },\n  \n  // Database Management\n  { module: \"database\", name: \"database.export\", displayName: \"Export Database\", action: \"export\" },\n  { module: \"database\", name: \"database.import\", displayName: \"Import Database\", action: \"import\" },\n  { module: \"database\", name: \"database.backup\", displayName: \"Backup Database\", action: \"backup\" },\n  { module: \"database\", name: \"database.restore\", displayName: \"Restore Database\", action: \"restore\" },\n  { module: \"database\", name: \"database.excel\", displayName: \"Excel Import/Export\", action: \"manage\" },\n  \n  // Role & Permission Management (Super Admin Only)\n  { module: \"roles\", name: \"roles.view\", displayName: \"View Roles\", action: \"read\" },\n  { module: \"roles\", name: \"roles.create\", displayName: \"Create Roles\", action: \"create\" },\n  { module: \"roles\", name: \"roles.edit\", displayName: \"Edit Roles\", action: \"update\" },\n  { module: \"roles\", name: \"roles.delete\", displayName: \"Delete Roles\", action: \"delete\" },\n  { module: \"roles\", name: \"roles.manage\", displayName: \"Full Role Management\", action: \"manage\" },\n  { module: \"roles\", name: \"roles.assign\", displayName: \"Assign Roles to Users\", action: \"assign\" },\n  { module: \"roles\", name: \"roles.permissions\", displayName: \"Manage Role Permissions\", action: \"manage\" }\n];\n\n// Define role permission sets based on project requirements\nexport const ROLE_PERMISSIONS = {\n  // Super Admin: Full access to everything\n  super_admin: \"all\", // Special keyword for all permissions\n  \n  // Manager: Limited permissions that Super Admin can expand\n  manager: [\n    \"auth.login\",\n    \"auth.logout\",\n    \"users.view\",\n    \"products.view\",\n    \"categories.view\",\n    \"orders.view\",\n    \"settings.view\"\n  ],\n  \n  // User: Complete customer permissions - access to all customer features\n  user: [\n    // Authentication & Profile\n    \"auth.login\",\n    \"auth.logout\",\n    \"auth.session\",\n    \"users.profile\",\n    \n    // Product & Category Access\n    \"products.view\",\n    \"categories.view\",\n    \n    // Shopping Cart - Full Access\n    \"cart.view\",\n    \"cart.add\",\n    \"cart.update\", \n    \"cart.remove\",\n    \"cart.clear\",\n    \n    // Order Management - Customer Orders\n    \"orders.own\",\n    \"orders.create\",\n    \"orders.view\", // Can view all orders (for order history)\n    \n    // Payment Processing - Credimax and Cash on Delivery only\n    \"payments.credimax\",\n    \"payments.cod\",\n    \"payments.view\",\n    \n    // Media Access (for viewing product images)\n    \"media.view\",\n    \n    // Settings Access (for site information)\n    \"settings.view\"\n  ]\n};","size_bytes":12585},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { setupAuth } from \"./auth\";\nimport { storage } from \"./storage\";\nimport { insertProductSchema, insertCategorySchema, insertCartItemSchema, insertSiteSettingsSchema, insertUserSchema, insertSliderImageSchema, insertUnitOfMeasureSchema, roles, permissions } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { emailService } from \"./email-service\";\nimport { emailTemplates } from \"./email-templates\";\n// import { sendOrderSubmittedNotification, sendOrderApprovedNotification, sendOrderRejectedNotification } from \"./sendgrid\";\nimport { exportDatabase, saveExportToFile, importDatabase, validateImportFile } from \"./database-utils\";\nimport { createCredimaxTransaction, verifyCredimaxTransaction, handleCredimaxWebhook } from \"./credimax\";\nimport { requirePermission } from \"./middleware\";\n// Removed Stripe integration - only Credimax and Cash on Delivery supported\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\n\n// Stripe integration removed - using only Credimax and Cash on Delivery\n\n// Configure multer for file uploads\nconst storage_config = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const uploadPath = path.join(process.cwd(), 'uploads');\n    if (!fs.existsSync(uploadPath)) {\n      fs.mkdirSync(uploadPath, { recursive: true });\n    }\n    cb(null, uploadPath);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n  }\n});\n\nconst upload = multer({ \n  storage: storage_config,\n  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = /jpeg|jpg|png|gif|webp/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const mimetype = allowedTypes.test(file.mimetype);\n    \n    if (mimetype && extname) {\n      return cb(null, true);\n    } else {\n      cb(new Error('Only images are allowed (jpeg, jpg, png, gif, webp)'));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication\n  setupAuth(app);\n\n  // Serve uploaded files\n  app.use('/uploads', express.static(path.join(process.cwd(), 'uploads')));\n\n  // Image upload endpoint\n  app.post(\"/api/upload-image\", upload.single('image'), (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    if (!req.file) {\n      return res.status(400).json({ message: \"No file uploaded\" });\n    }\n\n    const imageUrl = `/uploads/${req.file.filename}`;\n    res.json({ imageUrl, message: \"Image uploaded successfully\" });\n  });\n\n  // Credimax payment routes\n  app.post(\"/api/credimax/create\", async (req, res) => {\n    await createCredimaxTransaction(req, res);\n  });\n\n  app.get(\"/api/credimax/verify/:transactionId\", async (req, res) => {\n    await verifyCredimaxTransaction(req, res);\n  });\n\n  app.post(\"/api/credimax/webhook\", async (req, res) => {\n    await handleCredimaxWebhook(req, res);\n  });\n\n  // Cash on Delivery route\n  app.post(\"/api/cash-on-delivery\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { orderId, amount, shippingAddress } = req.body;\n      \n      if (!orderId || !amount) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      // Get the order and verify it belongs to the user\n      const order = await storage.getOrderById(orderId);\n      if (!order || order.userId !== req.user!.id) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n\n      // Verify the order is approved and can proceed to payment\n      if (order.adminApprovalStatus !== \"approved\") {\n        return res.status(400).json({ error: \"Order is not approved for payment\" });\n      }\n\n      // Update order with cash on delivery payment method\n      const updatedOrder = await storage.updateOrder(orderId, {\n        paymentMethod: \"cash_on_delivery\",\n        status: \"processing\", // Update status to processing for COD\n      });\n\n      // Send order confirmation email\n      try {\n        const { sendPaymentConfirmationEmail } = await import(\"./order-approval-workflow\");\n        const user = await storage.getUserById(req.user!.id);\n        if (user?.email) {\n          const customerName = `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.username;\n          \n          // Get order items for detailed email\n          const orderItems = await storage.getOrderItemsByOrderId(orderId);\n          const emailItems = orderItems.map(item => ({\n            productName: item.product?.name || 'Unknown Product',\n            quantity: item.quantity,\n            price: item.price,\n            totalPrice: item.totalPrice,\n            rentalStartDate: item.rentalStartDate ? new Date(item.rentalStartDate).toLocaleDateString() : undefined,\n            rentalEndDate: item.rentalEndDate ? new Date(item.rentalEndDate).toLocaleDateString() : undefined,\n            rentalDays: item.rentalDays || undefined\n          }));\n          \n          await sendPaymentConfirmationEmail(user.email, {\n            orderNumber: order.id.slice(-8).toUpperCase(),\n            customerName: customerName,\n            total: order.total,\n            paymentMethod: \"Cash on Delivery\",\n            items: emailItems\n          });\n        }\n      } catch (emailError) {\n        console.error('Failed to send payment confirmation email:', emailError);\n      }\n\n      res.json({\n        success: true,\n        order: updatedOrder,\n        message: \"Cash on delivery order confirmed successfully\",\n      });\n    } catch (error: any) {\n      console.error('Cash on delivery error:', error);\n      res.status(500).json({ error: \"Failed to process cash on delivery\" });\n    }\n  });\n\n  // Category routes\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/categories\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Product routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/products/featured\", async (req, res) => {\n    try {\n      const products = await storage.getFeaturedProducts();\n      res.json(products);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/products/category/:categoryId\", async (req, res) => {\n    try {\n      const products = await storage.getProductsByCategory(req.params.categoryId);\n      res.json(products);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProductById(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      // Clean numeric fields to handle empty strings\n      const cleanedBody = {\n        ...req.body,\n        price: req.body.price === \"\" ? \"0\" : req.body.price,\n        rentalPrice: req.body.rentalPrice === \"\" ? undefined : req.body.rentalPrice,\n      };\n      \n      const productData = insertProductSchema.parse(cleanedBody);\n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/products/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      // Clean numeric fields to handle empty strings\n      const cleanedBody = {\n        ...req.body,\n        price: req.body.price === \"\" ? \"0\" : req.body.price,\n        rentalPrice: req.body.rentalPrice === \"\" ? undefined : req.body.rentalPrice,\n      };\n      \n      const product = await storage.updateProduct(req.params.id, cleanedBody);\n      res.json(product);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      await storage.deleteProduct(req.params.id);\n      res.sendStatus(204);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Cart routes\n  app.get(\"/api/cart\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const cartItems = await storage.getCartItems(req.user!.id);\n      res.json(cartItems);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/cart\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { productId, quantity, rentalStartDate, rentalEndDate } = req.body;\n      \n      // Get product to calculate pricing\n      const product = await storage.getProductById(productId);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n\n      let unitPrice: string;\n      let totalPrice: string;\n      let parsedStartDate: Date | null = null;\n      let parsedEndDate: Date | null = null;\n\n      // Calculate pricing based on product type\n      if (product.productType === \"rental\" && rentalStartDate && rentalEndDate) {\n        // Parse dates as date-only strings (YYYY-MM-DD) to avoid timezone issues\n        const startDateParts = rentalStartDate.split('-');\n        const endDateParts = rentalEndDate.split('-');\n        \n        if (startDateParts.length !== 3 || endDateParts.length !== 3) {\n          return res.status(400).json({ \n            message: \"Invalid date format. Please select valid dates.\" \n          });\n        }\n        \n        const startYear = parseInt(startDateParts[0]);\n        const startMonth = parseInt(startDateParts[1]);\n        const startDay = parseInt(startDateParts[2]);\n        \n        const endYear = parseInt(endDateParts[0]);\n        const endMonth = parseInt(endDateParts[1]);\n        const endDay = parseInt(endDateParts[2]);\n        \n        // Create date objects in local timezone for storage\n        parsedStartDate = new Date(startYear, startMonth - 1, startDay);\n        parsedEndDate = new Date(endYear, endMonth - 1, endDay);\n        \n        // Check if dates are in 2025 and October (month 10)\n        const isStartDateValid = startYear === 2025 && startMonth === 10 && startDay >= 18 && startDay <= 31;\n        const isEndDateValid = endYear === 2025 && endMonth === 10 && endDay >= 18 && endDay <= 31;\n        \n        if (!isStartDateValid || !isEndDateValid) {\n          return res.status(400).json({ \n            message: \"Selected dates are outside the allowed rental period. Please choose dates between 18th October and 31st October 2025.\" \n          });\n        }\n\n        if (parsedStartDate > parsedEndDate) {\n          return res.status(400).json({ \n            message: \"End date must be after start date.\" \n          });\n        }\n\n        // Calculate rental days and pricing\n        const rentalDays = Math.ceil((parsedEndDate.getTime() - parsedStartDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n        const dailyRate = parseFloat(product.rentalPrice || \"0\");\n        unitPrice = dailyRate.toFixed(2);\n        totalPrice = (dailyRate * rentalDays * quantity).toFixed(2);\n      } else {\n        // For sale products, use regular pricing\n        unitPrice = product.price;\n        totalPrice = (parseFloat(product.price) * quantity).toFixed(2);\n      }\n\n      const cartItemData = {\n        userId: req.user!.id,\n        productId,\n        quantity,\n        rentalStartDate: parsedStartDate,\n        rentalEndDate: parsedEndDate,\n        unitPrice,\n        totalPrice,\n      };\n\n      const cartItem = await storage.addToCart(cartItemData);\n      res.status(201).json(cartItem);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/cart/:productId\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { quantity } = req.body;\n      const cartItem = await storage.updateCartItem(\n        req.user!.id,\n        req.params.productId,\n        quantity\n      );\n      res.json(cartItem);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/cart/:productId\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      await storage.removeFromCart(req.user!.id, req.params.productId);\n      res.sendStatus(204);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n\n\n  // Order routes\n  app.get(\"/api/orders\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      if (req.user!.isAdmin) {\n        const orders = await storage.getOrders();\n        res.json(orders);\n      } else {\n        const orders = await storage.getUserOrders(req.user!.id);\n        res.json(orders);\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/orders/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const order = await storage.getOrderById(req.params.id);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      // Check if user can access this order\n      if (!req.user!.isAdmin && order.userId !== req.user!.id) {\n        return res.sendStatus(403);\n      }\n\n      res.json(order);\n    } catch (error: any) {\n      console.error('Error fetching order:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/orders/:id/status\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user!.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { status } = req.body;\n      const order = await storage.updateOrderStatus(req.params.id, status);\n      res.json(order);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/orders\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { customerInfo, paymentMethod, paymentIntentId } = req.body;\n      \n      // Get cart items\n      const cartItems = await storage.getCartItems(req.user!.id);\n      \n      if (cartItems.length === 0) {\n        return res.status(400).json({ message: \"Cart is empty\" });\n      }\n\n      // Calculate totals with 10% VAT - use totalPrice from cart items if available, otherwise fallback to product price\n      const subtotal = cartItems.reduce(\n        (sum, item) => {\n          // Use calculated totalPrice from cart if available (for rentals), otherwise use product price\n          const itemTotal = item.totalPrice ? parseFloat(item.totalPrice) : parseFloat(item.product.price) * item.quantity;\n          return sum + itemTotal;\n        },\n        0\n      );\n      const vatPercentage = 10.00;\n      const tax = subtotal * (vatPercentage / 100); // 10% VAT\n      const total = subtotal + tax;\n\n      // Create order with approval workflow - always starts as pending approval\n      const order = await storage.createOrder({\n        userId: req.user!.id,\n        subtotal: subtotal.toFixed(2),\n        tax: tax.toFixed(2),\n\n        total: total.toFixed(2),\n        vatPercentage: vatPercentage.toFixed(2),\n        paymentMethod,\n        paymentIntentId,\n        status: \"pending\", // Order status starts as pending\n        adminApprovalStatus: \"pending\", // Always requires admin approval\n      });\n\n      // Create order items and update stock\n      for (const cartItem of cartItems) {\n        // Calculate rental days if this is a rental item\n        let rentalDays = null;\n        if (cartItem.rentalStartDate && cartItem.rentalEndDate) {\n          const startDate = new Date(cartItem.rentalStartDate);\n          const endDate = new Date(cartItem.rentalEndDate);\n          rentalDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n        }\n\n        await storage.createOrderItem({\n          orderId: order.id,\n          productId: cartItem.productId,\n          quantity: cartItem.quantity,\n          price: cartItem.unitPrice || cartItem.product.price, // Use calculated unit price or fallback\n          totalPrice: cartItem.totalPrice || (parseFloat(cartItem.product.price) * cartItem.quantity).toFixed(2),\n          rentalStartDate: cartItem.rentalStartDate,\n          rentalEndDate: cartItem.rentalEndDate,\n          rentalDays: rentalDays,\n        });\n      }\n\n      // Clear cart\n      await storage.clearCart(req.user!.id);\n\n      // Send admin notification email about new order\n      try {\n        const { sendAdminOrderNotification } = await import(\"./order-approval-workflow\");\n        const user = req.user!;\n        const customerName = `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.username;\n        \n        await sendAdminOrderNotification({\n          orderNumber: order.id.slice(-8).toUpperCase(),\n          customerName: customerName,\n          customerEmail: user.email,\n          total: order.total,\n          shippingAddress: \"\", // Add missing required field\n          items: cartItems.map(item => ({\n            productName: item.product.name,\n            quantity: item.quantity,\n            price: (parseFloat(item.product.price) * item.quantity).toFixed(2)\n          }))\n        });\n      } catch (emailError) {\n        console.error('Failed to send admin notification:', emailError);\n        // Don't fail the order creation if email fails\n      }\n\n      // Send order submission notification with approval workflow\n      try {\n        const { sendOrderSubmissionEmail } = await import(\"./order-approval-workflow\");\n        const customerName = `${req.user!.firstName || ''} ${req.user!.lastName || ''}`.trim() || req.user!.username;\n        \n        // Format order items for email\n        const emailItems = cartItems.map(item => ({\n          productName: item.product.name,\n          quantity: item.quantity,\n          price: item.unitPrice || item.product.price,\n          totalPrice: item.totalPrice || (parseFloat(item.product.price) * item.quantity).toFixed(2),\n          rentalStartDate: item.rentalStartDate ? new Date(item.rentalStartDate).toLocaleDateString() : undefined,\n          rentalEndDate: item.rentalEndDate ? new Date(item.rentalEndDate).toLocaleDateString() : undefined,\n          rentalDays: item.rentalStartDate && item.rentalEndDate ? \n            Math.ceil((new Date(item.rentalEndDate).getTime() - new Date(item.rentalStartDate).getTime()) / (1000 * 60 * 60 * 24)) + 1 : undefined\n        }));\n        \n        await sendOrderSubmissionEmail(req.user!.email, {\n          orderNumber: order.id.slice(-8).toUpperCase(),\n          customerName: customerName,\n          total: order.total,\n          items: emailItems\n        });\n      } catch (emailError) {\n        console.error('Failed to send order submission notification:', emailError);\n      }\n\n      res.status(201).json({ \n        id: order.id,\n        total: order.total,\n        message: \"Order submitted for admin approval. Admin has been notified and you will receive an email once approved.\" \n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/orders/:id/status\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { status } = req.body;\n      const order = await storage.updateOrderStatus(req.params.id, status);\n      res.json(order);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Order payment update route for users\n  app.put(\"/api/orders/:id/payment\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { paymentMethod, paymentIntentId, status } = req.body;\n      const orderId = req.params.id;\n      \n      // Get the order and verify it belongs to the user\n      const order = await storage.getOrderById(orderId);\n      if (!order || order.userId !== req.user!.id) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      // Verify the order is approved and can proceed to payment\n      if (order.adminApprovalStatus !== \"approved\") {\n        return res.status(400).json({ message: \"Order is not approved for payment\" });\n      }\n\n      // Update order with payment information\n      const updatedOrder = await storage.updateOrder(orderId, {\n        paymentMethod,\n        paymentIntentId,\n        status: status || \"processing\", // Update status to processing after payment\n      });\n\n      // Send payment completion email\n      try {\n        const { sendPaymentConfirmationEmail } = await import(\"./order-approval-workflow\");\n        const customerName = `${req.user!.firstName || ''} ${req.user!.lastName || ''}`.trim() || req.user!.username;\n        \n        if (req.user!.email) {\n          // Get order items for detailed email\n          const orderItems = await storage.getOrderItemsByOrderId(orderId);\n          const emailItems = orderItems.map(item => ({\n            productName: item.product?.name || 'Unknown Product',\n            quantity: item.quantity,\n            price: item.price,\n            totalPrice: item.totalPrice,\n            rentalStartDate: item.rentalStartDate ? new Date(item.rentalStartDate).toLocaleDateString() : undefined,\n            rentalEndDate: item.rentalEndDate ? new Date(item.rentalEndDate).toLocaleDateString() : undefined,\n            rentalDays: item.rentalDays || undefined\n          }));\n          \n          await sendPaymentConfirmationEmail(req.user!.email, {\n            orderNumber: order.id.slice(-8).toUpperCase(),\n            customerName: customerName,\n            total: order.total,\n            paymentMethod: paymentMethod,\n            items: emailItems\n          });\n        }\n      } catch (emailError) {\n        console.error('Failed to send payment confirmation email:', emailError);\n      }\n\n      res.json(updatedOrder);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Get single order by ID route\n  app.get(\"/api/orders/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const orderId = req.params.id;\n      const order = await storage.getOrderWithItems(orderId);\n      \n      if (!order || order.userId !== req.user!.id) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      res.json(order);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Legacy SMTP test route - now handled by /api/admin/test-smtp\n\n  // Admin approval requests route (accessible to managers and super admins)\n  app.get(\"/api/admin/approval-requests\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    // Check if user has permission to view orders\n    const { userHasPermission } = await import(\"./seed-comprehensive-permissions\");\n    const hasOrderViewPermission = await userHasPermission(req.user!.id, \"orders.view\");\n    if (!req.user?.isAdmin && !hasOrderViewPermission) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const orders = await storage.getOrdersWithDetails();\n      res.json(orders);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin order approval routes (accessible to managers and super admins)\n  app.put(\"/api/admin/orders/:id/approve\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    // Check if user has permission to approve orders\n    const { userHasPermission } = await import(\"./seed-comprehensive-permissions\");\n    const hasApprovePermission = await userHasPermission(req.user!.id, \"orders.approve\") || \n                                 await userHasPermission(req.user!.id, \"orders.view\");\n    if (!req.user?.isAdmin && !hasApprovePermission) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { adminRemarks } = req.body;\n      const orderId = req.params.id;\n      \n      // Update order approval status\n      await storage.updateOrder(orderId, {\n        adminApprovalStatus: \"approved\",\n        adminApprovedBy: req.user!.id,\n        adminApprovedAt: new Date(),\n        adminRemarks: adminRemarks || null,\n        status: \"payment_pending\" // Move to payment pending after approval\n      });\n\n      // Get order details for email notification\n      const order = await storage.getOrderById(orderId);\n      const user = await storage.getUser(order!.userId);\n\n      if (user && order) {\n        const customerName = `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.username;\n        \n        // Get order items for detailed email\n        const orderItems = await storage.getOrderItemsByOrderId(orderId);\n        const emailItems = orderItems.map(item => ({\n          productName: item.product?.name || 'Unknown Product',\n          quantity: item.quantity,\n          price: item.price,\n          totalPrice: item.totalPrice,\n          rentalStartDate: item.rentalStartDate ? new Date(item.rentalStartDate).toLocaleDateString() : undefined,\n          rentalEndDate: item.rentalEndDate ? new Date(item.rentalEndDate).toLocaleDateString() : undefined,\n          rentalDays: item.rentalDays || undefined\n        }));\n        \n        // Send order approved email\n        try {\n          const { sendOrderApprovalEmail } = await import(\"./order-approval-workflow\");\n          if (user.email) {\n            await sendOrderApprovalEmail(user.email, {\n              orderNumber: order.id.slice(-8).toUpperCase(),\n              customerName: customerName,\n              total: order.total,\n              items: emailItems\n            });\n          }\n        } catch (emailError) {\n          console.error('Failed to send order approved email:', emailError);\n        }\n      }\n\n      res.json({ message: \"Order approved successfully\", orderId });\n    } catch (error: any) {\n      console.error('Error approving order:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/admin/orders/:id/reject\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    // Check if user has permission to reject orders\n    const { userHasPermission } = await import(\"./seed-comprehensive-permissions\");\n    const hasRejectPermission = await userHasPermission(req.user!.id, \"orders.reject\") || \n                               await userHasPermission(req.user!.id, \"orders.view\");\n    if (!req.user?.isAdmin && !hasRejectPermission) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { adminRemarks } = req.body;\n      const orderId = req.params.id;\n      \n      // Update order approval status to rejected\n      await storage.updateOrder(orderId, {\n        adminApprovalStatus: \"rejected\",\n        adminApprovedBy: req.user!.id,\n        adminApprovedAt: new Date(),\n        adminRemarks: adminRemarks || null,\n        status: \"cancelled\" // Mark order as cancelled when rejected\n      });\n\n      // Get order details for email notification\n      const order = await storage.getOrderById(orderId);\n      const user = await storage.getUser(order!.userId);\n\n      if (user && order) {\n        const customerName = `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.username;\n        \n        // Get order items for detailed email\n        const orderItems = await storage.getOrderItemsByOrderId(orderId);\n        const emailItems = orderItems.map(item => ({\n          productName: item.product?.name || 'Unknown Product',\n          quantity: item.quantity,\n          price: item.price,\n          totalPrice: item.totalPrice,\n          rentalStartDate: item.rentalStartDate ? new Date(item.rentalStartDate).toLocaleDateString() : undefined,\n          rentalEndDate: item.rentalEndDate ? new Date(item.rentalEndDate).toLocaleDateString() : undefined,\n          rentalDays: item.rentalDays || undefined\n        }));\n        \n        // Send order rejected email\n        try {\n          const { sendOrderRejectionEmail } = await import(\"./order-approval-workflow\");\n          if (user.email) {\n            await sendOrderRejectionEmail(user.email, {\n              orderNumber: order.id.slice(-8).toUpperCase(),\n              customerName: customerName,\n              total: order.total,\n              adminRemarks: adminRemarks || \"No specific reason provided\",\n              items: emailItems\n            });\n          }\n        } catch (emailError) {\n          console.error('Failed to send order rejected email:', emailError);\n        }\n      }\n\n      res.json({ message: \"Order rejected successfully\", orderId });\n    } catch (error: any) {\n      console.error('Error rejecting order:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/admin/orders/:id/complete\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    // Check if user has permission to complete orders\n    const { userHasPermission } = await import(\"./seed-comprehensive-permissions\");\n    const hasCompletePermission = await userHasPermission(req.user!.id, \"orders.complete\") || \n                                  await userHasPermission(req.user!.id, \"orders.view\");\n    if (!req.user?.isAdmin && !hasCompletePermission) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const orderId = req.params.id;\n      const deliveredAt = new Date();\n      \n      // Update order status to delivered\n      await storage.updateOrder(orderId, {\n        status: \"delivered\"\n      });\n\n      // Get order details for email\n      const orderWithDetails = await storage.getOrderWithDetails(orderId);\n      const user = await storage.getUserById(orderWithDetails.userId);\n\n      // Send delivery confirmation email\n      if (user && orderWithDetails) {\n        try {\n          await emailService.initialize();\n          if (emailService.isReady() && user.email) {\n            const template = emailTemplates.paymentConfirmation({\n              customerName: `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.username,\n              orderNumber: orderWithDetails.id.slice(-8).toUpperCase(),\n              total: orderWithDetails.total,\n              paymentMethod: \"Delivered\",\n              siteName: \"BAYG - Bahrain Asian Youth Games 2025\"\n            });\n            await emailService.sendEmail({\n              to: user.email,\n              subject: `Order Delivered #${orderWithDetails.id.slice(-8).toUpperCase()} - BAYG`,\n              html: template.html,\n              text: template.text\n            });\n          }\n        } catch (emailError) {\n          console.error('Failed to send delivery confirmation email:', emailError);\n        }\n      }\n\n      res.json({ success: true, message: \"Order marked as delivered\" });\n    } catch (error: any) {\n      console.error('Order completion error:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Email testing and SMTP routes\n  app.post(\"/api/admin/test-smtp\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { testEmail } = req.body;\n      const targetEmail = testEmail || req.user.email;\n      \n      // Check if SMTP is configured first\n      const settings = await storage.getSiteSettings();\n      if (!settings?.smtpEnabled || !settings?.smtpHost || !settings?.smtpUser || !settings?.smtpPassword) {\n        return res.status(400).json({\n          success: false,\n          message: \"SMTP not configured. Please configure SMTP settings first.\"\n        });\n      }\n      \n      console.log(`Testing SMTP with email: ${targetEmail}`);\n      \n      // Force reinitialize the email service  \n      await emailService.initialize();\n      \n      if (!emailService.isReady()) {\n        return res.status(400).json({\n          success: false,\n          message: \"SMTP configuration failed. Please check your settings and try again.\"\n        });\n      }\n\n      const result = await emailService.sendTestEmail(targetEmail);\n      \n      res.json({\n        success: true,\n        message: `Test email sent successfully to ${targetEmail}! Check your inbox to confirm SMTP is working.`,\n        messageId: result.messageId\n      });\n    } catch (error: any) {\n      console.error('SMTP test error:', error);\n      \n      let errorMessage = \"SMTP test failed. Please check your configuration.\";\n      \n      // Provide specific error messages for common issues\n      if (error.message.includes(\"Authentication failed\")) {\n        errorMessage = \"Authentication failed. Please check your username and password. For Gmail/Yahoo, use an App Password.\";\n      } else if (error.message.includes(\"ENOTFOUND\")) {\n        errorMessage = \"Cannot connect to SMTP server. Please check your host and port settings.\";\n      } else if (error.message.includes(\"ECONNREFUSED\")) {\n        errorMessage = \"Connection refused. Please check your port number and try again.\";\n      } else if (error.message.includes(\"wrong version number\")) {\n        errorMessage = \"SSL/TLS configuration error. For port 587, turn OFF SSL/TLS. For port 465, turn ON SSL/TLS.\";\n      } else if (error.message.includes(\"EAUTH\")) {\n        errorMessage = \"Authentication error. Enable 2FA and use App Password for Gmail/Yahoo, or enable 'Less secure app access'.\";\n      }\n      \n      res.status(400).json({\n        success: false,\n        message: errorMessage\n      });\n    }\n  });\n\n  app.post(\"/api/admin/smtp-status\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const settings = await storage.getSiteSettings();\n      const isConfigured = settings?.smtpEnabled && settings?.smtpHost && settings?.smtpUser && settings?.smtpPassword;\n      \n      res.json({\n        configured: !!isConfigured,\n        enabled: settings?.smtpEnabled || false,\n        host: settings?.smtpHost || '',\n        port: settings?.smtpPort || 587,\n        secure: settings?.smtpSecure || false,\n        fromName: settings?.smtpFromName || '',\n        fromEmail: settings?.smtpFromEmail || ''\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Site settings routes\n  app.get(\"/api/settings\", async (req, res) => {\n    try {\n      const settings = await storage.getSiteSettings();\n      res.json(settings);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/settings\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const settingsData = insertSiteSettingsSchema.parse(req.body);\n      const updated = await storage.updateSiteSettings(settingsData);\n      res.json(updated);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Category routes\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/categories\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/categories/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const categoryData = insertCategorySchema.partial().parse(req.body);\n      const category = await storage.updateCategory(req.params.id, categoryData);\n      res.json(category);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      await storage.deleteCategory(req.params.id);\n      res.sendStatus(204);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Units of measure routes\n  app.get(\"/api/units-of-measure\", async (req, res) => {\n    try {\n      const units = await storage.getActiveUnitsOfMeasure();\n      res.json(units);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/admin/units-of-measure\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const units = await storage.getUnitsOfMeasure();\n      res.json(units);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/units-of-measure\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const unitData = insertUnitOfMeasureSchema.parse(req.body);\n      const unit = await storage.createUnitOfMeasure(unitData);\n      res.status(201).json(unit);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/admin/units-of-measure/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const unit = await storage.updateUnitOfMeasure(req.params.id, req.body);\n      res.json(unit);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/admin/units-of-measure/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      await storage.deleteUnitOfMeasure(req.params.id);\n      res.sendStatus(204);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Admin user management routes\n  app.get(\"/api/admin/users\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/users\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Hash password if provided\n      if (userData.password) {\n        const { hashPassword } = await import(\"./auth\");\n        userData.password = await hashPassword(userData.password);\n      }\n      \n      const user = await storage.createUser(userData);\n      res.status(201).json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/admin/users/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const userData = insertUserSchema.partial().parse(req.body);\n      \n      // Hash password if provided\n      if (userData.password && userData.password.trim() !== \"\") {\n        const { hashPassword } = await import(\"./auth\");\n        userData.password = await hashPassword(userData.password);\n      } else if (userData.password === \"\") {\n        // Remove password from update if empty string\n        delete userData.password;\n      }\n      \n      const user = await storage.updateUser(req.params.id, userData);\n      res.json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/admin/users/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      await storage.deleteUser(req.params.id);\n      res.sendStatus(204);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Admin orders management\n  app.get(\"/api/admin/orders\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const orders = await storage.getOrdersWithDetails();\n      res.json(orders);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Statistics for admin dashboard\n  app.get(\"/api/admin/stats\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      // Check if user has permission to view statistics\n      const { userHasPermission } = await import(\"./seed-comprehensive-permissions\");\n      const hasStatsPermission = await userHasPermission(req.user!.id, \"reports.view\") || req.user?.isAdmin || req.user?.isSuperAdmin;\n      \n      if (!hasStatsPermission) {\n        return res.sendStatus(401);\n      }\n\n      const [orders, products, users] = await Promise.all([\n        storage.getOrdersWithDetails(),\n        storage.getProducts(),\n        storage.getAllUsers()\n      ]);\n\n      const totalRevenue = orders.reduce((sum, order) => sum + parseFloat(order.total), 0);\n      \n      // Basic stats for all admin users\n      const stats: any = {\n        revenue: totalRevenue.toFixed(2),\n        orders: orders.length,\n        products: products.length,\n        users: users.length,\n      };\n\n      // Additional stats for Super Admin\n      if (req.user?.isSuperAdmin) {\n        const pendingOrders = orders.filter(order => order.status === 'pending').length;\n        const activeUsers = users.filter(user => {\n          // Consider users active if they have any orders in the last 30 days\n          const thirtyDaysAgo = new Date();\n          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n          return user.createdAt && new Date(user.createdAt) > thirtyDaysAgo;\n        }).length;\n\n        // Get total roles and permissions from database\n        const [rolesResult, permissionsResult] = await Promise.all([\n          db.select().from(roles),\n          db.select().from(permissions)\n        ]);\n\n        stats.pendingOrders = pendingOrders;\n        stats.activeUsers = activeUsers;\n        stats.totalRoles = rolesResult.length;\n        stats.totalPermissions = permissionsResult.length;\n      }\n\n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Slider images routes\n  app.get(\"/api/slider-images\", async (req, res) => {\n    try {\n      const images = await storage.getSliderImages();\n      res.json(images);\n    } catch (error: any) {\n      console.error(\"Error getting slider images:\", error);\n      res.status(500).json({ message: \"Failed to get slider images\" });\n    }\n  });\n\n  app.get(\"/api/slider-images/active\", async (req, res) => {\n    try {\n      const images = await storage.getActiveSliderImages();\n      res.json(images);\n    } catch (error: any) {\n      console.error(\"Error getting active slider images:\", error);\n      res.status(500).json({ message: \"Failed to get active slider images\" });\n    }\n  });\n\n  app.post(\"/api/slider-images\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const validation = insertSliderImageSchema.parse(req.body);\n      const image = await storage.createSliderImage(validation);\n      res.json(image);\n    } catch (error: any) {\n      console.error(\"Error creating slider image:\", error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/slider-images/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { id } = req.params;\n      const image = await storage.updateSliderImage(id, req.body);\n      res.json(image);\n    } catch (error: any) {\n      console.error(\"Error updating slider image:\", error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/slider-images/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { id } = req.params;\n      await storage.deleteSliderImage(id);\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Error deleting slider image:\", error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Database export/import routes\n  app.get(\"/api/admin/database/export\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const exportData = await exportDatabase();\n      const filename = await saveExportToFile(exportData);\n      \n      res.json({ \n        success: true, \n        filename,\n        downloadUrl: `/uploads/${filename}`,\n        message: \"Database exported successfully\" \n      });\n    } catch (error) {\n      console.error('Database export error:', error);\n      res.status(500).json({ \n        success: false, \n        message: \"Failed to export database\" \n      });\n    }\n  });\n\n  // Configure multer for database import\n  const importUpload = multer({ \n    storage: storage_config,\n    limits: { fileSize: 50 * 1024 * 1024 }, // 50MB limit for database files\n    fileFilter: (req, file, cb) => {\n      if (file.mimetype === 'application/sql' || path.extname(file.originalname).toLowerCase() === '.sql') {\n        return cb(null, true);\n      } else {\n        cb(new Error('Only SQL files are allowed for database import'));\n      }\n    }\n  });\n\n  app.post(\"/api/admin/database/import\", importUpload.single('database'), async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    if (!req.file) {\n      return res.status(400).json({ \n        success: false, \n        message: \"No database file uploaded\" \n      });\n    }\n\n    try {\n      const sqlContent = await validateImportFile(req.file.path);\n      await importDatabase(sqlContent);\n      \n      // Clean up uploaded file\n      await fs.promises.unlink(req.file.path);\n      \n      res.json({ \n        success: true, \n        message: \"Database imported successfully\" \n      });\n    } catch (error) {\n      console.error('Database import error:', error);\n      \n      // Clean up uploaded file on error\n      if (req.file) {\n        try {\n          await fs.promises.unlink(req.file.path);\n        } catch (cleanupError) {\n          console.error('Failed to cleanup upload file:', cleanupError);\n        }\n      }\n      \n      res.status(500).json({ \n        success: false, \n        message: error instanceof Error ? error.message : \"Failed to import database\" \n      });\n    }\n  });\n\n  // Excel import/export routes\n  app.get(\"/api/admin/export/excel/bulk\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { exportDataToExcel } = await import('./excelUtils');\n      const excelBuffer = await exportDataToExcel();\n      \n      const filename = `data-export-${new Date().toISOString().split('T')[0]}.xlsx`;\n      \n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(excelBuffer);\n    } catch (error) {\n      console.error('Excel export error:', error);\n      res.status(500).json({ \n        success: false, \n        message: \"Failed to export Excel file\" \n      });\n    }\n  });\n\n  // Individual sheet export routes\n  app.get(\"/api/admin/export/excel/:sheetType\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    const { sheetType } = req.params;\n    \n    try {\n      let excelBuffer: Buffer;\n      let filename: string;\n      \n      switch (sheetType) {\n        case 'products':\n          const { exportProductsToExcel } = await import('./excelUtils');\n          excelBuffer = await exportProductsToExcel();\n          filename = `products-export-${new Date().toISOString().split('T')[0]}.xlsx`;\n          break;\n        case 'categories':\n          const { exportCategoriesToExcel } = await import('./excelUtils');\n          excelBuffer = await exportCategoriesToExcel();\n          filename = `categories-export-${new Date().toISOString().split('T')[0]}.xlsx`;\n          break;\n        case 'users':\n          const { exportUsersToExcel } = await import('./excelUtils');\n          excelBuffer = await exportUsersToExcel();\n          filename = `users-export-${new Date().toISOString().split('T')[0]}.xlsx`;\n          break;\n        case 'orders':\n          const { exportOrdersToExcel } = await import('./excelUtils');\n          excelBuffer = await exportOrdersToExcel();\n          filename = `orders-export-${new Date().toISOString().split('T')[0]}.xlsx`;\n          break;\n        case 'order-items':\n          const { exportOrderItemsToExcel } = await import('./excelUtils');\n          excelBuffer = await exportOrderItemsToExcel();\n          filename = `order-items-export-${new Date().toISOString().split('T')[0]}.xlsx`;\n          break;\n        case 'units':\n          const { exportUnitsToExcel } = await import('./excelUtils');\n          excelBuffer = await exportUnitsToExcel();\n          filename = `units-export-${new Date().toISOString().split('T')[0]}.xlsx`;\n          break;\n        case 'site-settings':\n          const { exportSiteSettingsToExcel } = await import('./excelUtils');\n          excelBuffer = await exportSiteSettingsToExcel();\n          filename = `site-settings-export-${new Date().toISOString().split('T')[0]}.xlsx`;\n          break;\n        case 'slider-images':\n          const { exportSliderImagesToExcel } = await import('./excelUtils');\n          excelBuffer = await exportSliderImagesToExcel();\n          filename = `slider-images-export-${new Date().toISOString().split('T')[0]}.xlsx`;\n          break;\n        default:\n          return res.status(400).json({ \n            success: false, \n            message: \"Invalid sheet type\" \n          });\n      }\n      \n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(excelBuffer);\n    } catch (error) {\n      console.error('Excel export error:', error);\n      res.status(500).json({ \n        success: false, \n        message: \"Failed to export Excel file\" \n      });\n    }\n  });\n\n  // Configure multer for Excel import\n  const excelUpload = multer({ \n    storage: storage_config,\n    limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit for Excel files\n    fileFilter: (req, file, cb) => {\n      const allowedMimeTypes = [\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'application/vnd.ms-excel'\n      ];\n      const allowedExtensions = ['.xlsx', '.xls'];\n      \n      if (allowedMimeTypes.includes(file.mimetype) || \n          allowedExtensions.includes(path.extname(file.originalname).toLowerCase())) {\n        return cb(null, true);\n      } else {\n        cb(new Error('Only Excel files (.xlsx, .xls) are allowed'));\n      }\n    }\n  });\n\n  app.post(\"/api/admin/import/excel\", excelUpload.single('excel'), async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    if (!req.file) {\n      return res.status(400).json({ \n        success: false, \n        message: \"No Excel file uploaded\" \n      });\n    }\n\n    try {\n      const { parseExcelFile } = await import('./excelUtils');\n      const fileBuffer = await fs.promises.readFile(req.file.path);\n      const parsedData = parseExcelFile(fileBuffer);\n      \n      // Import data in order: foundational data first, then dependent data\n      let importCounts = {\n        categories: 0,\n        products: 0,\n        users: 0,\n        orders: 0,\n        orderItems: 0,\n        unitsOfMeasure: 0,\n        sliderImages: 0,\n        siteSettings: 0\n      };\n\n      if (parsedData.categories.length > 0) {\n        await storage.importCategories(parsedData.categories);\n        importCounts.categories = parsedData.categories.length;\n      }\n      \n      if (parsedData.unitsOfMeasure.length > 0) {\n        await storage.importUnitsOfMeasure(parsedData.unitsOfMeasure);\n        importCounts.unitsOfMeasure = parsedData.unitsOfMeasure.length;\n      }\n      \n      if (parsedData.products.length > 0) {\n        await storage.importProducts(parsedData.products);\n        importCounts.products = parsedData.products.length;\n      }\n      \n      if (parsedData.users.length > 0) {\n        await storage.importUsers(parsedData.users);\n        importCounts.users = parsedData.users.length;\n      }\n\n      if (parsedData.orders.length > 0) {\n        await storage.importOrders(parsedData.orders);\n        importCounts.orders = parsedData.orders.length;\n      }\n\n      if (parsedData.orderItems.length > 0) {\n        await storage.importOrderItems(parsedData.orderItems);\n        importCounts.orderItems = parsedData.orderItems.length;\n      }\n\n      if (parsedData.sliderImages.length > 0) {\n        await storage.importSliderImages(parsedData.sliderImages);\n        importCounts.sliderImages = parsedData.sliderImages.length;\n      }\n\n      if (parsedData.siteSettings.length > 0) {\n        await storage.importSiteSettings(parsedData.siteSettings);\n        importCounts.siteSettings = parsedData.siteSettings.length;\n      }\n      \n      // Clean up uploaded file\n      await fs.promises.unlink(req.file.path);\n      \n      const totalImported = Object.values(importCounts).reduce((sum, count) => sum + count, 0);\n      \n      res.json({ \n        success: true, \n        message: `Successfully imported ${totalImported} total records: ${importCounts.categories} categories, ${importCounts.products} products, ${importCounts.users} users, ${importCounts.orders} orders, ${importCounts.orderItems} order items, ${importCounts.unitsOfMeasure} units of measure, ${importCounts.sliderImages} slider images, and ${importCounts.siteSettings} site settings`,\n        imported: importCounts\n      });\n    } catch (error) {\n      console.error('Excel import error:', error);\n      \n      // Clean up uploaded file on error\n      if (req.file) {\n        try {\n          await fs.promises.unlink(req.file.path);\n        } catch (cleanupError) {\n          console.error('Failed to cleanup upload file:', cleanupError);\n        }\n      }\n      \n      res.status(500).json({ \n        success: false, \n        message: error instanceof Error ? error.message : \"Failed to import Excel file\" \n      });\n    }\n  });\n\n  // Individual sheet import routes  \n  app.post(\"/api/admin/import/excel/:sheetType\", excelUpload.single('excel'), async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.sendStatus(401);\n    }\n\n    if (!req.file) {\n      return res.status(400).json({ \n        success: false, \n        message: \"No Excel file uploaded\" \n      });\n    }\n\n    const { sheetType } = req.params;\n\n    try {\n      const { parseExcelFile } = await import('./excelUtils');\n      const fileBuffer = await fs.promises.readFile(req.file.path);\n      const parsedData = parseExcelFile(fileBuffer);\n      \n      let importCount = 0;\n      let successMessage = \"\";\n\n      switch (sheetType) {\n        case 'products':\n          if (parsedData.products.length > 0) {\n            await storage.importProducts(parsedData.products);\n            importCount = parsedData.products.length;\n            successMessage = `Successfully imported ${importCount} products`;\n          }\n          break;\n        case 'categories':\n          if (parsedData.categories.length > 0) {\n            await storage.importCategories(parsedData.categories);\n            importCount = parsedData.categories.length;\n            successMessage = `Successfully imported ${importCount} categories`;\n          }\n          break;\n        case 'users':\n          if (parsedData.users.length > 0) {\n            await storage.importUsers(parsedData.users);\n            importCount = parsedData.users.length;\n            successMessage = `Successfully imported ${importCount} users`;\n          }\n          break;\n        case 'orders':\n          if (parsedData.orders.length > 0) {\n            await storage.importOrders(parsedData.orders);\n            importCount = parsedData.orders.length;\n            successMessage = `Successfully imported ${importCount} orders`;\n          }\n          break;\n        case 'order-items':\n          if (parsedData.orderItems.length > 0) {\n            await storage.importOrderItems(parsedData.orderItems);\n            importCount = parsedData.orderItems.length;\n            successMessage = `Successfully imported ${importCount} order items`;\n          }\n          break;\n        case 'units':\n          if (parsedData.unitsOfMeasure.length > 0) {\n            await storage.importUnitsOfMeasure(parsedData.unitsOfMeasure);\n            importCount = parsedData.unitsOfMeasure.length;\n            successMessage = `Successfully imported ${importCount} units of measure`;\n          }\n          break;\n        case 'site-settings':\n          if (parsedData.siteSettings.length > 0) {\n            await storage.importSiteSettings(parsedData.siteSettings);\n            importCount = parsedData.siteSettings.length;\n            successMessage = `Successfully imported ${importCount} site settings`;\n          }\n          break;\n        case 'slider-images':\n          if (parsedData.sliderImages.length > 0) {\n            await storage.importSliderImages(parsedData.sliderImages);\n            importCount = parsedData.sliderImages.length;\n            successMessage = `Successfully imported ${importCount} slider images`;\n          }\n          break;\n        default:\n          await fs.promises.unlink(req.file.path);\n          return res.status(400).json({ \n            success: false, \n            message: \"Invalid sheet type\" \n          });\n      }\n      \n      // Clean up uploaded file\n      await fs.promises.unlink(req.file.path);\n      \n      res.json({ \n        success: true, \n        message: successMessage,\n        imported: importCount\n      });\n    } catch (error) {\n      console.error(`Excel import error (${sheetType}):`, error);\n      \n      // Clean up uploaded file on error\n      if (req.file) {\n        try {\n          await fs.promises.unlink(req.file.path);\n        } catch (cleanupError) {\n          console.error('Failed to cleanup upload file:', cleanupError);\n        }\n      }\n      \n      res.status(500).json({ \n        success: false, \n        message: error instanceof Error ? error.message : `Failed to import ${sheetType} Excel file` \n      });\n    }\n  });\n\n  // Permission Management Routes (Super Admin only)\n  app.get(\"/api/admin/roles\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isSuperAdmin) {\n      return res.status(401).json({ message: \"Super Admin access required\" });\n    }\n    \n    try {\n      const roles = await storage.getAllRoles();\n      res.json(roles);\n    } catch (error) {\n      console.error(\"Error fetching roles:\", error);\n      res.status(500).json({ message: \"Failed to fetch roles\" });\n    }\n  });\n\n  app.get(\"/api/admin/permission-modules\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isSuperAdmin) {\n      return res.status(401).json({ message: \"Super Admin access required\" });\n    }\n    \n    try {\n      const modules = await storage.getAllPermissionModules();\n      res.json(modules);\n    } catch (error) {\n      console.error(\"Error fetching permission modules:\", error);\n      res.status(500).json({ message: \"Failed to fetch permission modules\" });\n    }\n  });\n\n  app.get(\"/api/admin/permissions/:moduleId\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isSuperAdmin) {\n      return res.status(401).json({ message: \"Super Admin access required\" });\n    }\n    \n    try {\n      const { moduleId } = req.params;\n      const permissions = await storage.getPermissionsByModule(moduleId);\n      res.json(permissions);\n    } catch (error) {\n      console.error(\"Error fetching permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch permissions\" });\n    }\n  });\n\n  app.get(\"/api/admin/role-permissions/:roleId\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isSuperAdmin) {\n      return res.status(401).json({ message: \"Super Admin access required\" });\n    }\n    \n    try {\n      const { roleId } = req.params;\n      const permissions = await storage.getRolePermissions(roleId);\n      res.json(permissions);\n    } catch (error) {\n      console.error(\"Error fetching role permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch role permissions\" });\n    }\n  });\n\n  app.post(\"/api/admin/assign-permissions\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isSuperAdmin) {\n      return res.status(401).json({ message: \"Super Admin access required\" });\n    }\n    \n    try {\n      const { roleId, permissionIds } = req.body;\n      await storage.assignPermissionsToRole(roleId, permissionIds);\n      res.json({ message: \"Permissions assigned successfully\" });\n    } catch (error) {\n      console.error(\"Error assigning permissions:\", error);\n      res.status(500).json({ message: \"Failed to assign permissions\" });\n    }\n  });\n\n  app.post(\"/api/admin/assign-role\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isSuperAdmin) {\n      return res.status(401).json({ message: \"Super Admin access required\" });\n    }\n    \n    try {\n      const { userId, roleId } = req.body;\n      await storage.assignRoleToUser(userId, roleId);\n      res.json({ message: \"Role assigned successfully\" });\n    } catch (error) {\n      console.error(\"Error assigning role:\", error);\n      res.status(500).json({ message: \"Failed to assign role\" });\n    }\n  });\n\n  // Super Admin permission assignment endpoint\n  app.post(\"/api/admin/assign-permissions\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isSuperAdmin) {\n      return res.status(401).json({ message: \"Super Admin access required\" });\n    }\n    \n    try {\n      const { roleId, permissionIds } = req.body;\n      await storage.assignPermissionsToRole(roleId, permissionIds);\n      res.json({ message: \"Permissions assigned successfully\" });\n    } catch (error) {\n      console.error(\"Error assigning permissions:\", error);\n      res.status(500).json({ message: \"Failed to assign permissions\" });\n    }\n  });\n\n  app.get(\"/api/user/permissions\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    \n    try {\n      const { getUserPermissions } = await import(\"./seed-permissions\");\n      const permissions = await getUserPermissions(req.user.id);\n      res.json({ permissions });\n    } catch (error) {\n      console.error(\"Error fetching user permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch user permissions\" });\n    }\n  });\n\n  // Update user profile\n  app.patch(\"/api/user/profile\", requirePermission(\"users.profile\"), async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const { firstName, lastName, email } = req.body;\n      \n      const updatedUser = await storage.updateUserProfile(userId, {\n        firstName,\n        lastName, \n        email\n      });\n      \n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user profile:\", error);\n      res.status(500).json({ error: \"Failed to update profile\" });\n    }\n  });\n\n  // Role and Permission Management Routes (Super Admin Only)\n  app.get(\"/api/admin/roles\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isSuperAdmin) {\n      return res.status(401).json({ message: \"Super Admin access required\" });\n    }\n    \n    try {\n      const roles = await storage.getAllRoles();\n      res.json(roles);\n    } catch (error: any) {\n      console.error(\"Error fetching roles:\", error);\n      res.status(500).json({ message: error.message || \"Failed to fetch roles\" });\n    }\n  });\n\n  app.get(\"/api/admin/permission-modules\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isSuperAdmin) {\n      return res.status(401).json({ message: \"Super Admin access required\" });\n    }\n    \n    try {\n      const modules = await storage.getAllPermissionModules();\n      res.json(modules);\n    } catch (error: any) {\n      console.error(\"Error fetching permission modules:\", error);\n      res.status(500).json({ message: error.message || \"Failed to fetch permission modules\" });\n    }\n  });\n\n  app.get(\"/api/admin/permissions/:moduleId\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isSuperAdmin) {\n      return res.status(401).json({ message: \"Super Admin access required\" });\n    }\n    \n    try {\n      const permissions = await storage.getPermissionsByModule(req.params.moduleId);\n      res.json(permissions);\n    } catch (error: any) {\n      console.error(\"Error fetching permissions:\", error);\n      res.status(500).json({ message: error.message || \"Failed to fetch permissions\" });\n    }\n  });\n\n  app.get(\"/api/admin/role-permissions/:roleId\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isSuperAdmin) {\n      return res.status(401).json({ message: \"Super Admin access required\" });\n    }\n    \n    try {\n      const permissions = await storage.getRolePermissions(req.params.roleId);\n      res.json(permissions);\n    } catch (error: any) {\n      console.error(\"Error fetching role permissions:\", error);\n      res.status(500).json({ message: error.message || \"Failed to fetch role permissions\" });\n    }\n  });\n\n  app.post(\"/api/admin/assign-permissions\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isSuperAdmin) {\n      return res.status(401).json({ message: \"Super Admin access required\" });\n    }\n    \n    try {\n      const { roleId, permissionIds } = req.body;\n      \n      if (!roleId || !Array.isArray(permissionIds)) {\n        return res.status(400).json({ message: \"Role ID and permission IDs array are required\" });\n      }\n\n      await storage.assignPermissionsToRole(roleId, permissionIds);\n      res.json({ message: \"Permissions assigned successfully\" });\n    } catch (error: any) {\n      console.error(\"Error assigning permissions:\", error);\n      res.status(500).json({ message: error.message || \"Failed to assign permissions\" });\n    }\n  });\n\n  app.post(\"/api/admin/assign-role\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isSuperAdmin) {\n      return res.status(401).json({ message: \"Super Admin access required\" });\n    }\n    \n    try {\n      const { userId, roleId } = req.body;\n      \n      if (!userId || !roleId) {\n        return res.status(400).json({ message: \"User ID and Role ID are required\" });\n      }\n\n      await storage.assignRoleToUser(userId, roleId);\n      res.json({ message: \"Role assigned successfully\" });\n    } catch (error: any) {\n      console.error(\"Error assigning role:\", error);\n      res.status(500).json({ message: error.message || \"Failed to assign role\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":69352},"server/seed-comprehensive-permissions.ts":{"content":"import { db } from \"./db\";\nimport { \n  roles, \n  permissionModules, \n  permissions, \n  rolePermissions, \n  users \n} from \"@shared/schema\";\nimport { eq, and } from \"drizzle-orm\";\nimport { PERMISSION_MODULES, PERMISSIONS, ROLE_PERMISSIONS } from \"./permissions-config\";\n\n// Main seeding function for comprehensive permission system\nexport async function seedComprehensivePermissions() {\n  try {\n    console.log(\"🔧 Seeding comprehensive permission system...\");\n\n    // 1. Clear existing permissions\n    console.log(\"Clearing existing permissions...\");\n    await db.delete(rolePermissions);\n    await db.delete(permissions);\n    await db.delete(permissionModules);\n\n    // 2. Create permission modules\n    console.log(\"Creating permission modules...\");\n    const moduleMap = new Map();\n    \n    for (const module of PERMISSION_MODULES) {\n      const [createdModule] = await db\n        .insert(permissionModules)\n        .values({\n          name: module.name,\n          displayName: module.displayName,\n          description: module.description,\n          icon: module.icon,\n          sortOrder: module.sortOrder\n        })\n        .returning();\n      \n      moduleMap.set(module.name, createdModule.id);\n      console.log(`✓ Created module: ${module.displayName}`);\n    }\n\n    // 3. Create permissions\n    console.log(\"Creating permissions...\");\n    const permissionMap = new Map();\n    \n    for (const permission of PERMISSIONS) {\n      const moduleId = moduleMap.get(permission.module);\n      if (!moduleId) {\n        console.warn(`Warning: Module ${permission.module} not found for permission ${permission.name}`);\n        continue;\n      }\n\n      const [createdPermission] = await db\n        .insert(permissions)\n        .values({\n          moduleId: moduleId,\n          name: permission.name,\n          displayName: permission.displayName,\n          description: permission.displayName, // Use displayName as description for now\n          action: permission.action\n        })\n        .returning();\n      \n      permissionMap.set(permission.name, createdPermission.id);\n      console.log(`✓ Created permission: ${permission.displayName}`);\n    }\n\n    // 4. Get or create roles\n    console.log(\"Setting up roles...\");\n    \n    // Super Admin role\n    let superAdminRole = await db.select().from(roles).where(eq(roles.name, \"super_admin\"));\n    let superAdminRoleId: string;\n    \n    if (superAdminRole.length === 0) {\n      [superAdminRole[0]] = await db\n        .insert(roles)\n        .values({\n          name: \"super_admin\",\n          displayName: \"Super Administrator\",\n          description: \"Full system access with all permissions\",\n          isSystemRole: true\n        })\n        .returning();\n    }\n    superAdminRoleId = superAdminRole[0].id;\n\n    // Manager role\n    let managerRole = await db.select().from(roles).where(eq(roles.name, \"manager\"));\n    let managerRoleId: string;\n    \n    if (managerRole.length === 0) {\n      [managerRole[0]] = await db\n        .insert(roles)\n        .values({\n          name: \"manager\",\n          displayName: \"Manager\",\n          description: \"Limited access - permissions controlled by Super Admin\"\n        })\n        .returning();\n    }\n    managerRoleId = managerRole[0].id;\n\n    // User role\n    let userRole = await db.select().from(roles).where(eq(roles.name, \"user\"));\n    let userRoleId: string;\n    \n    if (userRole.length === 0) {\n      [userRole[0]] = await db\n        .insert(roles)\n        .values({\n          name: \"user\",\n          displayName: \"Customer\",\n          description: \"Basic customer access for shopping and orders\"\n        })\n        .returning();\n    }\n    userRoleId = userRole[0].id;\n\n    // 5. Assign permissions to roles\n    console.log(\"Assigning permissions to roles...\");\n\n    // Super Admin gets all permissions\n    const allPermissionIds = Array.from(permissionMap.values());\n    for (const permissionId of allPermissionIds) {\n      await db\n        .insert(rolePermissions)\n        .values({\n          roleId: superAdminRoleId,\n          permissionId: permissionId\n        })\n        .onConflictDoNothing();\n    }\n    console.log(`✓ Assigned ${allPermissionIds.length} permissions to Super Admin`);\n\n    // Manager gets limited permissions\n    const managerPermissions = ROLE_PERMISSIONS.manager;\n    let assignedManagerCount = 0;\n    for (const permissionName of managerPermissions) {\n      const permissionId = permissionMap.get(permissionName);\n      if (permissionId) {\n        await db\n          .insert(rolePermissions)\n          .values({\n            roleId: managerRoleId,\n            permissionId: permissionId\n          })\n          .onConflictDoNothing();\n        assignedManagerCount++;\n      }\n    }\n    console.log(`✓ Assigned ${assignedManagerCount} permissions to Manager role`);\n\n    // User gets basic permissions\n    const userPermissions = ROLE_PERMISSIONS.user;\n    let assignedUserCount = 0;\n    for (const permissionName of userPermissions) {\n      const permissionId = permissionMap.get(permissionName);\n      if (permissionId) {\n        await db\n          .insert(rolePermissions)\n          .values({\n            roleId: userRoleId,\n            permissionId: permissionId\n          })\n          .onConflictDoNothing();\n        assignedUserCount++;\n      }\n    }\n    console.log(`✓ Assigned ${assignedUserCount} permissions to User role`);\n\n    // 6. Update user accounts\n    console.log(\"Updating user accounts...\");\n    \n    // Update admin user to Super Admin\n    const adminUsers = await db\n      .select()\n      .from(users)\n      .where(eq(users.username, \"admin\"));\n\n    if (adminUsers.length > 0) {\n      await db\n        .update(users)\n        .set({ \n          isSuperAdmin: true,\n          isAdmin: true,\n          roleId: superAdminRoleId\n        })\n        .where(eq(users.username, \"admin\"));\n      \n      console.log(`✓ Updated admin user to Super Admin`);\n    }\n\n    // Update manager user to Manager role (with limited permissions)\n    const managerUsers = await db\n      .select()\n      .from(users)\n      .where(eq(users.username, \"manager\"));\n\n    if (managerUsers.length > 0) {\n      await db\n        .update(users)\n        .set({ \n          isSuperAdmin: false, \n          isAdmin: false, // Remove admin flag - use role-based permissions only\n          roleId: managerRoleId\n        })\n        .where(eq(users.username, \"manager\"));\n      \n      console.log(`✓ Updated manager user to Manager role (limited permissions)`);\n    }\n\n    // Update regular user to User role\n    const regularUsers = await db\n      .select()\n      .from(users)\n      .where(eq(users.username, \"user\"));\n\n    if (regularUsers.length > 0) {\n      await db\n        .update(users)\n        .set({ \n          isSuperAdmin: false,\n          isAdmin: false,\n          roleId: userRoleId\n        })\n        .where(eq(users.username, \"user\"));\n      \n      console.log(`✓ Updated user to Customer role`);\n    }\n\n    console.log(\"🎉 Comprehensive permission system seeded successfully!\");\n    \n    return {\n      success: true,\n      superAdminRoleId,\n      managerRoleId,\n      userRoleId,\n      modulesCount: PERMISSION_MODULES.length,\n      permissionsCount: PERMISSIONS.length,\n      totalPermissions: allPermissionIds.length,\n      managerPermissions: assignedManagerCount,\n      userPermissions: assignedUserCount\n    };\n\n  } catch (error) {\n    console.error(\"❌ Error seeding comprehensive permissions:\", error);\n    return { success: false, error };\n  }\n}\n\n// Helper function to check if user has specific permission\nexport async function userHasPermission(userId: string, permissionName: string): Promise<boolean> {\n  try {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.id, userId));\n\n    if (!user) return false;\n\n    // Super admins have all permissions\n    if (user.isSuperAdmin) return true;\n\n    // Check if user has the specific permission through their role\n    if (!user.roleId) return false;\n\n    const userPermissions = await db\n      .select({ permissionName: permissions.name })\n      .from(rolePermissions)\n      .innerJoin(permissions, eq(rolePermissions.permissionId, permissions.id))\n      .where(eq(rolePermissions.roleId, user.roleId));\n\n    return userPermissions.some(p => p.permissionName === permissionName);\n  } catch (error) {\n    console.error(\"Error checking user permission:\", error);\n    return false;\n  }\n}\n\n// Helper function to get all user permissions\nexport async function getUserPermissions(userId: string): Promise<string[]> {\n  try {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.id, userId));\n\n    if (!user) return [];\n\n    // Super admins have all permissions\n    if (user.isSuperAdmin) {\n      const allPermissions = await db.select({ name: permissions.name }).from(permissions);\n      return allPermissions.map(p => p.name);\n    }\n\n    // Get permissions through role\n    if (!user.roleId) return [];\n\n    const userPermissions = await db\n      .select({ permissionName: permissions.name })\n      .from(rolePermissions)\n      .innerJoin(permissions, eq(rolePermissions.permissionId, permissions.id))\n      .where(eq(rolePermissions.roleId, user.roleId));\n\n    return userPermissions.map(p => p.permissionName);\n  } catch (error) {\n    console.error(\"Error getting user permissions:\", error);\n    return [];\n  }\n}","size_bytes":9363},"server/seed-permissions.ts":{"content":"import { db } from \"./db\";\nimport { \n  roles, \n  permissionModules, \n  permissions, \n  rolePermissions, \n  users \n} from \"@shared/schema\";\nimport { eq, and } from \"drizzle-orm\";\nimport { PERMISSION_MODULES, PERMISSIONS, ROLE_PERMISSIONS } from \"./permissions-config\";\n\n// Define all permission modules\nconst PERMISSION_MODULES = [\n  {\n    name: \"users\",\n    displayName: \"User Management\",\n    description: \"Manage user accounts and profiles\",\n    icon: \"Users\",\n    sortOrder: 1\n  },\n  {\n    name: \"products\",\n    displayName: \"Product Management\",\n    description: \"Manage products, categories, and inventory\",\n    icon: \"Package\",\n    sortOrder: 2\n  },\n  {\n    name: \"orders\",\n    displayName: \"Order Management\",\n    description: \"Manage customer orders and order processing\",\n    icon: \"ShoppingCart\",\n    sortOrder: 3\n  },\n  {\n    name: \"categories\",\n    displayName: \"Category Management\",\n    description: \"Manage product categories\",\n    icon: \"Tag\",\n    sortOrder: 4\n  },\n  {\n    name: \"units\",\n    displayName: \"Units of Measure\",\n    description: \"Manage measurement units\",\n    icon: \"Ruler\",\n    sortOrder: 5\n  },\n  {\n    name: \"slider\",\n    displayName: \"Slider Management\",\n    description: \"Manage homepage slider images\",\n    icon: \"Image\",\n    sortOrder: 6\n  },\n  {\n    name: \"settings\",\n    displayName: \"Site Settings\",\n    description: \"Configure site-wide settings\",\n    icon: \"Settings\",\n    sortOrder: 7\n  },\n  {\n    name: \"roles\",\n    displayName: \"Role & Permission Management\",\n    description: \"Manage roles and permissions (Super Admin only)\",\n    icon: \"Shield\",\n    sortOrder: 8\n  },\n  {\n    name: \"reports\",\n    displayName: \"Reports & Analytics\",\n    description: \"View reports and analytics\",\n    icon: \"BarChart3\",\n    sortOrder: 9\n  },\n  {\n    name: \"email\",\n    displayName: \"Email Management\",\n    description: \"Manage email templates and SMTP settings\",\n    icon: \"Mail\",\n    sortOrder: 10\n  }\n];\n\n// Define permissions for each module\nconst PERMISSIONS = [\n  // User Management\n  { module: \"users\", name: \"users.view\", displayName: \"View Users\", action: \"read\" },\n  { module: \"users\", name: \"users.create\", displayName: \"Create Users\", action: \"create\" },\n  { module: \"users\", name: \"users.edit\", displayName: \"Edit Users\", action: \"update\" },\n  { module: \"users\", name: \"users.delete\", displayName: \"Delete Users\", action: \"delete\" },\n  { module: \"users\", name: \"users.manage\", displayName: \"Full User Management\", action: \"manage\" },\n\n  // Product Management\n  { module: \"products\", name: \"products.view\", displayName: \"View Products\", action: \"read\" },\n  { module: \"products\", name: \"products.create\", displayName: \"Create Products\", action: \"create\" },\n  { module: \"products\", name: \"products.edit\", displayName: \"Edit Products\", action: \"update\" },\n  { module: \"products\", name: \"products.delete\", displayName: \"Delete Products\", action: \"delete\" },\n  { module: \"products\", name: \"products.manage\", displayName: \"Full Product Management\", action: \"manage\" },\n\n  // Order Management\n  { module: \"orders\", name: \"orders.view\", displayName: \"View Orders\", action: \"read\" },\n  { module: \"orders\", name: \"orders.approve\", displayName: \"Approve Orders\", action: \"update\" },\n  { module: \"orders\", name: \"orders.reject\", displayName: \"Reject Orders\", action: \"update\" },\n  { module: \"orders\", name: \"orders.process\", displayName: \"Process Orders\", action: \"update\" },\n  { module: \"orders\", name: \"orders.manage\", displayName: \"Full Order Management\", action: \"manage\" },\n\n  // Category Management\n  { module: \"categories\", name: \"categories.view\", displayName: \"View Categories\", action: \"read\" },\n  { module: \"categories\", name: \"categories.create\", displayName: \"Create Categories\", action: \"create\" },\n  { module: \"categories\", name: \"categories.edit\", displayName: \"Edit Categories\", action: \"update\" },\n  { module: \"categories\", name: \"categories.delete\", displayName: \"Delete Categories\", action: \"delete\" },\n  { module: \"categories\", name: \"categories.manage\", displayName: \"Full Category Management\", action: \"manage\" },\n\n  // Units of Measure\n  { module: \"units\", name: \"units.view\", displayName: \"View Units\", action: \"read\" },\n  { module: \"units\", name: \"units.create\", displayName: \"Create Units\", action: \"create\" },\n  { module: \"units\", name: \"units.edit\", displayName: \"Edit Units\", action: \"update\" },\n  { module: \"units\", name: \"units.delete\", displayName: \"Delete Units\", action: \"delete\" },\n  { module: \"units\", name: \"units.manage\", displayName: \"Full Units Management\", action: \"manage\" },\n\n  // Slider Management\n  { module: \"slider\", name: \"slider.view\", displayName: \"View Slider\", action: \"read\" },\n  { module: \"slider\", name: \"slider.create\", displayName: \"Create Slider Images\", action: \"create\" },\n  { module: \"slider\", name: \"slider.edit\", displayName: \"Edit Slider Images\", action: \"update\" },\n  { module: \"slider\", name: \"slider.delete\", displayName: \"Delete Slider Images\", action: \"delete\" },\n  { module: \"slider\", name: \"slider.manage\", displayName: \"Full Slider Management\", action: \"manage\" },\n\n  // Site Settings\n  { module: \"settings\", name: \"settings.view\", displayName: \"View Settings\", action: \"read\" },\n  { module: \"settings\", name: \"settings.edit\", displayName: \"Edit Settings\", action: \"update\" },\n  { module: \"settings\", name: \"settings.manage\", displayName: \"Full Settings Management\", action: \"manage\" },\n\n  // Role & Permission Management (Super Admin only)\n  { module: \"roles\", name: \"roles.view\", displayName: \"View Roles & Permissions\", action: \"read\" },\n  { module: \"roles\", name: \"roles.create\", displayName: \"Create Roles\", action: \"create\" },\n  { module: \"roles\", name: \"roles.edit\", displayName: \"Edit Roles\", action: \"update\" },\n  { module: \"roles\", name: \"roles.delete\", displayName: \"Delete Roles\", action: \"delete\" },\n  { module: \"roles\", name: \"roles.assign\", displayName: \"Assign Permissions\", action: \"update\" },\n  { module: \"roles\", name: \"roles.manage\", displayName: \"Full Role Management\", action: \"manage\" },\n\n  // Reports & Analytics\n  { module: \"reports\", name: \"reports.view\", displayName: \"View Reports\", action: \"read\" },\n  { module: \"reports\", name: \"reports.export\", displayName: \"Export Reports\", action: \"read\" },\n  { module: \"reports\", name: \"reports.manage\", displayName: \"Full Reports Management\", action: \"manage\" },\n\n  // Email Management\n  { module: \"email\", name: \"email.view\", displayName: \"View Email Settings\", action: \"read\" },\n  { module: \"email\", name: \"email.edit\", displayName: \"Edit Email Templates\", action: \"update\" },\n  { module: \"email\", name: \"email.test\", displayName: \"Test Email Configuration\", action: \"update\" },\n  { module: \"email\", name: \"email.manage\", displayName: \"Full Email Management\", action: \"manage\" },\n];\n\nexport async function seedPermissions() {\n  console.log(\"🔧 Seeding permission system...\");\n\n  try {\n    // 1. Create permission modules\n    console.log(\"Creating permission modules...\");\n    for (const module of PERMISSION_MODULES) {\n      const [existingModule] = await db\n        .select()\n        .from(permissionModules)\n        .where(eq(permissionModules.name, module.name));\n\n      if (!existingModule) {\n        await db.insert(permissionModules).values(module);\n        console.log(`✓ Created module: ${module.displayName}`);\n      }\n    }\n\n    // 2. Create permissions\n    console.log(\"Creating permissions...\");\n    const modules = await db.select().from(permissionModules);\n    const moduleMap = new Map(modules.map(m => [m.name, m.id]));\n\n    for (const permission of PERMISSIONS) {\n      const moduleId = moduleMap.get(permission.module);\n      if (!moduleId) continue;\n\n      const [existingPermission] = await db\n        .select()\n        .from(permissions)\n        .where(eq(permissions.name, permission.name));\n\n      if (!existingPermission) {\n        await db.insert(permissions).values({\n          moduleId,\n          name: permission.name,\n          displayName: permission.displayName,\n          action: permission.action,\n          description: `${permission.displayName} - ${permission.action} access`\n        });\n        console.log(`✓ Created permission: ${permission.displayName}`);\n      }\n    }\n\n    // 3. Create Super Admin role\n    console.log(\"Creating Super Admin role...\");\n    const [superAdminRole] = await db\n      .select()\n      .from(roles)\n      .where(eq(roles.name, \"super_admin\"));\n\n    let superAdminRoleId = superAdminRole?.id;\n\n    if (!superAdminRole) {\n      const [newSuperAdminRole] = await db.insert(roles).values({\n        name: \"super_admin\",\n        displayName: \"Super Administrator\",\n        description: \"Full system access with all permissions\",\n        isSystemRole: true,\n        isActive: true\n      }).returning();\n      superAdminRoleId = newSuperAdminRole.id;\n      console.log(\"✓ Created Super Admin role\");\n    }\n\n    // 4. Create default Admin role\n    console.log(\"Creating Admin role...\");\n    const [adminRole] = await db\n      .select()\n      .from(roles)\n      .where(eq(roles.name, \"admin\"));\n\n    let adminRoleId = adminRole?.id;\n\n    if (!adminRole) {\n      const [newAdminRole] = await db.insert(roles).values({\n        name: \"admin\",\n        displayName: \"Administrator\",\n        description: \"Limited administrative access - permissions assigned by Super Admin\",\n        isSystemRole: false,\n        isActive: true\n      }).returning();\n      adminRoleId = newAdminRole.id;\n      console.log(\"✓ Created Admin role\");\n    }\n\n    // 4.5. Create default User role\n    console.log(\"Creating User role...\");\n    const [userRole] = await db\n      .select()\n      .from(roles)\n      .where(eq(roles.name, \"user\"));\n\n    let userRoleId = userRole?.id;\n\n    if (!userRole) {\n      const [newUserRole] = await db.insert(roles).values({\n        name: \"user\",\n        displayName: \"User\",\n        description: \"Standard user access with basic permissions\",\n        isSystemRole: false,\n        isActive: true\n      }).returning();\n      userRoleId = newUserRole.id;\n      console.log(\"✓ Created User role\");\n    }\n\n    // 5.1. Assign basic permissions to User role (if needed)\n    if (userRoleId) {\n      console.log(\"Assigning basic permissions to User role...\");\n      \n      // Define basic permissions for regular users\n      const userPermissions = [\n        \"products.view\",  // View products\n        \"categories.view\", // View categories\n        \"orders.view\",    // View their own orders\n      ];\n      \n      const allPermissions = await db.select().from(permissions);\n      let assignedCount = 0;\n      \n      for (const permissionName of userPermissions) {\n        const permission = allPermissions.find(p => p.name === permissionName);\n        if (!permission) continue;\n        \n        const [existing] = await db\n          .select()\n          .from(rolePermissions)\n          .where(and(\n            eq(rolePermissions.roleId, userRoleId),\n            eq(rolePermissions.permissionId, permission.id)\n          ));\n\n        if (!existing) {\n          await db.insert(rolePermissions).values({\n            roleId: userRoleId,\n            permissionId: permission.id\n          });\n          assignedCount++;\n        }\n      }\n      \n      if (assignedCount > 0) {\n        console.log(`✓ Assigned ${assignedCount} basic permissions to User role`);\n      }\n    }\n\n    // 5.2. Assign intermediate permissions to Admin role\n    if (adminRoleId) {\n      console.log(\"Assigning admin permissions to Admin role...\");\n      \n      // Define basic admin permissions (minimal access - Super Admin will assign more as needed)\n      const adminPermissions = [\n        // Basic view permissions only\n        \"products.view\",\n        \"categories.view\", \n        \"orders.view\",\n        \"settings.view\",\n        \"reports.view\"\n      ];\n      \n      const allPermissions = await db.select().from(permissions);\n      let assignedCount = 0;\n      \n      for (const permissionName of adminPermissions) {\n        const permission = allPermissions.find(p => p.name === permissionName);\n        if (!permission) continue;\n        \n        const [existing] = await db\n          .select()\n          .from(rolePermissions)\n          .where(and(\n            eq(rolePermissions.roleId, adminRoleId),\n            eq(rolePermissions.permissionId, permission.id)\n          ));\n\n        if (!existing) {\n          await db.insert(rolePermissions).values({\n            roleId: adminRoleId,\n            permissionId: permission.id\n          });\n          assignedCount++;\n        }\n      }\n      \n      if (assignedCount > 0) {\n        console.log(`✓ Assigned ${assignedCount} admin permissions to Admin role`);\n      }\n    }\n\n    // 5. Assign ALL permissions to Super Admin role\n    if (superAdminRoleId) {\n      console.log(\"Assigning all permissions to Super Admin...\");\n      const allPermissions = await db.select().from(permissions);\n      \n      for (const permission of allPermissions) {\n        const [existing] = await db\n          .select()\n          .from(rolePermissions)\n          .where(and(\n            eq(rolePermissions.roleId, superAdminRoleId),\n            eq(rolePermissions.permissionId, permission.id)\n          ));\n\n        if (!existing) {\n          await db.insert(rolePermissions).values({\n            roleId: superAdminRoleId,\n            permissionId: permission.id\n          });\n        }\n      }\n      console.log(`✓ Assigned ${allPermissions.length} permissions to Super Admin`);\n    }\n\n    // 6. Update existing admin user to Super Admin (only the 'admin' user)\n    console.log(\"Setting up Super Admin user...\");\n    const adminUser = await db\n      .select()\n      .from(users)\n      .where(eq(users.username, \"admin\"));\n\n    if (adminUser.length > 0) {\n      await db\n        .update(users)\n        .set({ \n          isSuperAdmin: true, \n          roleId: superAdminRoleId,\n          isAdmin: true // Keep this for backward compatibility\n        })\n        .where(eq(users.username, \"admin\"));\n      \n      console.log(`✓ Updated user admin to Super Admin`);\n    }\n\n    // 7. Update manager user to Admin role (not Super Admin)\n    console.log(\"Setting up Admin user...\");\n    const managerUser = await db\n      .select()\n      .from(users)\n      .where(eq(users.username, \"manager\"));\n\n    if (managerUser.length > 0) {\n      await db\n        .update(users)\n        .set({ \n          isSuperAdmin: false, \n          roleId: adminRoleId,\n          isAdmin: false // Remove admin flag - use role-based permissions only\n        })\n        .where(eq(users.username, \"manager\"));\n      \n      console.log(`✓ Updated user manager to Admin`);\n    }\n\n    console.log(\"🎉 Permission system seeded successfully!\");\n    \n    return {\n      success: true,\n      superAdminRoleId,\n      adminRoleId,\n      userRoleId,\n      modulesCount: PERMISSION_MODULES.length,\n      permissionsCount: PERMISSIONS.length\n    };\n\n  } catch (error) {\n    console.error(\"❌ Error seeding permissions:\", error);\n    return { success: false, error };\n  }\n}\n\n// Helper function to check if user has specific permission\nexport async function userHasPermission(userId: string, permissionName: string): Promise<boolean> {\n  try {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.id, userId));\n\n    if (!user) return false;\n\n    // Super admins have all permissions\n    if (user.isSuperAdmin) return true;\n\n    // Check if user has the specific permission through their role\n    if (!user.roleId) return false;\n\n    const userPermissions = await db\n      .select({ permissionName: permissions.name })\n      .from(rolePermissions)\n      .innerJoin(permissions, eq(rolePermissions.permissionId, permissions.id))\n      .where(eq(rolePermissions.roleId, user.roleId));\n\n    return userPermissions.some(p => p.permissionName === permissionName);\n  } catch (error) {\n    console.error(\"Error checking user permission:\", error);\n    return false;\n  }\n}\n\n// Helper function to get all user permissions\nexport async function getUserPermissions(userId: string): Promise<string[]> {\n  try {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.id, userId));\n\n    if (!user) return [];\n\n    // Super admins have all permissions\n    if (user.isSuperAdmin) {\n      const allPermissions = await db.select({ name: permissions.name }).from(permissions);\n      return allPermissions.map(p => p.name);\n    }\n\n    // Get permissions through role\n    if (!user.roleId) return [];\n\n    const userPermissions = await db\n      .select({ permissionName: permissions.name })\n      .from(rolePermissions)\n      .innerJoin(permissions, eq(rolePermissions.permissionId, permissions.id))\n      .where(eq(rolePermissions.roleId, user.roleId));\n\n    return userPermissions.map(p => p.permissionName);\n  } catch (error) {\n    console.error(\"Error getting user permissions:\", error);\n    return [];\n  }\n}","size_bytes":16868},"server/seed-users.ts":{"content":"import { scrypt, randomBytes } from \"crypto\";\nimport { promisify } from \"util\";\nimport { db } from \"./db\";\nimport { users, roles } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function seedUsers() {\n  try {\n    console.log(\"Seeding predefined user accounts...\");\n\n    // Check if all required users exist\n    const requiredUsernames = [\"admin\", \"manager\"];\n    const existingUsers = await db.select({ username: users.username }).from(users);\n    const existingUsernames = existingUsers.map(u => u.username);\n    \n    const missingUsers = requiredUsernames.filter(name => !existingUsernames.includes(name));\n    \n    if (missingUsers.length === 0) {\n      console.log(\"All required users already exist, skipping seed...\");\n      return;\n    }\n    \n    console.log(`Creating missing users: ${missingUsers.join(\", \")}`);\n\n    // Get role IDs for assignment\n    const [superAdminRole] = await db.select().from(roles).where(eq(roles.name, \"super_admin\"));\n    const [adminRole] = await db.select().from(roles).where(eq(roles.name, \"admin\"));\n    const [userRole] = await db.select().from(roles).where(eq(roles.name, \"user\"));\n\n    if (!superAdminRole || !adminRole || !userRole) {\n      console.log(\"⚠️  Roles not found. Seeding permissions first...\");\n      // Roles should be created by seedPermissions function\n      return;\n    }\n\n    const predefinedUsers = [\n      {\n        username: \"admin\",\n        email: \"admin@bayg.com\",\n        password: \"admin123\",\n        isAdmin: true,\n        isSuperAdmin: true,\n        roleId: superAdminRole.id,\n        role: \"Super Admin\"\n      },\n      {\n        username: \"manager\",\n        email: \"manager@bayg.com\",\n        password: \"manager123\",\n        isAdmin: true,\n        isSuperAdmin: false,\n        roleId: adminRole.id,\n        role: \"Admin\"\n      },\n      {\n        username: \"customer1\",\n        email: \"customer1@example.com\", \n        password: \"customer123\",\n        isAdmin: false,\n        isSuperAdmin: false,\n        roleId: userRole.id,\n        role: \"User\"\n      },\n      {\n        username: \"customer2\",\n        email: \"customer2@example.com\",\n        password: \"customer123\", \n        isAdmin: false,\n        isSuperAdmin: false,\n        roleId: userRole.id,\n        role: \"User\"\n      },\n      {\n        username: \"customer3\",\n        email: \"customer3@example.com\",\n        password: \"customer123\",\n        isAdmin: false,\n        isSuperAdmin: false,\n        roleId: userRole.id,\n        role: \"User\"\n      },\n      {\n        username: \"testuser\",\n        email: \"test@example.com\",\n        password: \"test123\",\n        isAdmin: false,\n        isSuperAdmin: false,\n        roleId: userRole.id,\n        role: \"User\"\n      },\n      {\n        username: \"demo\",\n        email: \"demo@innovanceorbit.com\",\n        password: \"demo123\",\n        isAdmin: false,\n        isSuperAdmin: false,\n        roleId: userRole.id,\n        role: \"User\"\n      }\n    ];\n\n    for (const userData of predefinedUsers) {\n      // Only create user if they don't exist\n      if (!missingUsers.includes(userData.username)) {\n        continue;\n      }\n      \n      const hashedPassword = await hashPassword(userData.password);\n      \n      await db.insert(users).values({\n        username: userData.username,\n        email: userData.email,\n        password: hashedPassword,\n        isAdmin: userData.isAdmin,\n        isSuperAdmin: userData.isSuperAdmin,\n        roleId: userData.roleId\n      });\n      \n      console.log(`✓ Created ${userData.role} account: ${userData.username}`);\n    }\n\n    console.log(\"\\n🎉 All predefined accounts created successfully!\");\n    console.log(\"\\n📋 Available test accounts with roles:\");\n    console.log(\"┌─────────────┬─────────────┬──────────────┐\");\n    console.log(\"│   Username  │   Password  │     Role     │\");\n    console.log(\"├─────────────┼─────────────┼──────────────┤\");\n    console.log(\"│   admin     │   admin123  │ Super Admin  │\");\n    console.log(\"│  manager    │ manager123  │    Admin     │\");\n    console.log(\"│  customer1  │ customer123 │     User     │\");\n    console.log(\"│  customer2  │ customer123 │     User     │\");\n    console.log(\"│  customer3  │ customer123 │     User     │\");\n    console.log(\"│  testuser   │   test123   │     User     │\");\n    console.log(\"│    demo     │   demo123   │     User     │\");\n    console.log(\"└─────────────┴─────────────┴──────────────┘\");\n\n  } catch (error) {\n    console.error(\"Error seeding users:\", error);\n    throw error;\n  }\n}\n\n// Run if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedUsers().then(() => {\n    console.log(\"Seeding completed!\");\n    process.exit(0);\n  }).catch((error) => {\n    console.error(\"Seeding failed:\", error);\n    process.exit(1);\n  });\n}\n\nexport { seedUsers };","size_bytes":5354},"server/smtp-config.ts":{"content":"import nodemailer from \"nodemailer\";\nimport { storage } from \"./storage\";\n\n// Microsoft 365 SMTP Configuration - Complete Rebuild\nexport async function createMicrosoft365Transporter() {\n  console.log(\"Setting up Microsoft 365 SMTP transporter...\");\n\n  // Use hardcoded configuration for reliability\n  const config = {\n    host: \"smtp.office365.com\",\n    port: 587,\n    secure: false, // STARTTLS\n    auth: {\n      user: \"itsupport@bayg.bh\",\n      pass: \"yccdswrqpghkftfy\",\n    },\n    tls: {\n      ciphers: \"SSLv3\",\n      rejectUnauthorized: false,\n    },\n  };\n\n  try {\n    const transporter = nodemailer.createTransport(config);\n    console.log(\"Microsoft 365 SMTP transporter created successfully\");\n    return transporter;\n  } catch (error: any) {\n    console.error(\"Microsoft 365 SMTP Error:\", error.message);\n    throw new Error(`Microsoft 365 SMTP failed: ${error.message}`);\n  }\n}\n\n// Send test email function\nexport async function sendTestEmail(): Promise<{\n  success: boolean;\n  message: string;\n}> {\n  try {\n    const transporter = await createMicrosoft365Transporter();\n\n    const testEmail = {\n      from: '\"BAYG System\" <itsupport@bayg.bh>',\n      to: \"itsupport@bayg.bh\",\n      subject: \"Microsoft 365 SMTP Test - BAYG System\",\n      text: \"This is a test email to verify Microsoft 365 SMTP configuration.\",\n      html: `\n        <div style=\"font-family: Arial, sans-serif; padding: 20px;\">\n          <h2 style=\"color: #2563eb;\">Microsoft 365 SMTP Test Successful!</h2>\n          <p>Your BAYG email system is working correctly with Microsoft 365.</p>\n          \n          <div style=\"background-color: #f8fafc; padding: 15px; border-radius: 8px; margin: 20px 0;\">\n            <h3>Configuration Details:</h3>\n            <ul>\n              <li><strong>Host:</strong> smtp.office365.com</li>\n              <li><strong>Port:</strong> 587</li>\n              <li><strong>From Email:</strong> itsupport@bayg.bh</li>\n            </ul>\n          </div>\n          \n          <p><strong>Timestamp:</strong> ${new Date().toISOString()}</p>\n          <p>Your BAYG email system is ready!</p>\n        </div>\n      `,\n    };\n\n    await transporter.sendMail(testEmail);\n    return {\n      success: true,\n      message: \"Test email sent successfully using Microsoft 365 SMTP!\",\n    };\n  } catch (error: any) {\n    console.error(\"SMTP Test Error:\", error);\n    return {\n      success: false,\n      message: `SMTP Test Failed: ${error.message}`,\n    };\n  }\n}\n\n// Simple email validation - Microsoft 365 ready\nexport function validateMicrosoft365Config(): {\n  valid: boolean;\n  errors: string[];\n} {\n  // Always valid since we use hardcoded Microsoft 365 config\n  return { valid: true, errors: [] };\n}\n","size_bytes":2695},"server/storage.ts":{"content":"import { \n  users, \n  categories, \n  products, \n  cartItems, \n  orders, \n  orderItems,\n  siteSettings,\n  sliderImages,\n  unitsOfMeasure,\n  roles,\n  permissionModules,\n  permissions,\n  rolePermissions,\n  type User, \n  type InsertUser,\n  type Category,\n  type InsertCategory,\n  type Product,\n  type InsertProduct,\n  type CartItem,\n  type InsertCartItem,\n  type Order,\n  type InsertOrder,\n  type OrderItem,\n  type InsertOrderItem,\n  type SiteSettings,\n  type InsertSiteSettings,\n  type SliderImage,\n  type InsertSliderImage,\n  type UnitOfMeasure,\n  type InsertUnitOfMeasure,\n  type Role,\n  type PermissionModule,\n  type Permission,\n  type RolePermission\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\nimport * as crypto from \"crypto\";\n\nconst PostgresSessionStore = connectPg(session);\n\n// Use memory store for sessions to avoid DB conflicts\nimport MemoryStore from 'memorystore';\nconst MemStore = MemoryStore(session);\n\nconst sessionStore = new MemStore({\n  checkPeriod: 86400000 // prune expired entries every 24h\n});\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  updateUserProfile(id: string, profile: { firstName?: string; lastName?: string; email?: string }): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  // Stripe functions removed - using only Credimax and Cash on Delivery\n\n  // Category methods\n  getCategories(): Promise<Category[]>;\n  getCategoryById(id: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category>;\n  deleteCategory(id: string): Promise<void>;\n\n  // Units of measure methods\n  getUnitsOfMeasure(): Promise<UnitOfMeasure[]>;\n  getActiveUnitsOfMeasure(): Promise<UnitOfMeasure[]>;\n  getUnitOfMeasureById(id: string): Promise<UnitOfMeasure | undefined>;\n  createUnitOfMeasure(unit: InsertUnitOfMeasure): Promise<UnitOfMeasure>;\n  updateUnitOfMeasure(id: string, unit: Partial<InsertUnitOfMeasure>): Promise<UnitOfMeasure>;\n  deleteUnitOfMeasure(id: string): Promise<void>;\n\n  // Product methods\n  getProducts(): Promise<Product[]>;\n  getFeaturedProducts(): Promise<Product[]>;\n  getProductsByCategory(categoryId: string): Promise<Product[]>;\n  getProductById(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n\n  // Cart methods\n  getCartItems(userId: string): Promise<(CartItem & { product: Product })[]>;\n  addToCart(item: InsertCartItem): Promise<CartItem>;\n  updateCartItem(userId: string, productId: string, quantity: number): Promise<CartItem>;\n  removeFromCart(userId: string, productId: string): Promise<void>;\n  clearCart(userId: string): Promise<void>;\n\n\n\n  // Order methods\n  getOrders(): Promise<Order[]>;\n  getUserOrders(userId: string): Promise<(Order & { items: (OrderItem & { product: Product })[] })[]>;\n  getOrderById(id: string): Promise<(Order & { items: (OrderItem & { product: Product })[] }) | undefined>;\n  getOrderWithItems(id: string): Promise<(Order & { items: (OrderItem & { product: Product })[] }) | undefined>;\n  getOrdersWithDetails(): Promise<any[]>;\n  getOrderWithDetails(id: string): Promise<any>;\n  getUserById(id: string): Promise<User | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  createOrderItem(item: InsertOrderItem): Promise<OrderItem>;\n  updateOrder(id: string, updates: Partial<Order>): Promise<Order>;\n  updateOrderStatus(id: string, status: string): Promise<Order>;\n\n  // Site settings methods\n  getSiteSettings(): Promise<SiteSettings>;\n  updateSiteSettings(settingsData: Partial<InsertSiteSettings>): Promise<SiteSettings>;\n\n  // Slider images methods\n  getSliderImages(): Promise<SliderImage[]>;\n  getActiveSliderImages(): Promise<SliderImage[]>;\n  getSliderImageById(id: string): Promise<SliderImage | undefined>;\n  createSliderImage(image: InsertSliderImage): Promise<SliderImage>;\n  updateSliderImage(id: string, image: Partial<InsertSliderImage>): Promise<SliderImage>;\n  deleteSliderImage(id: string): Promise<void>;\n\n  // Database export/import methods\n  getUsers(): Promise<User[]>;\n  getOrders(): Promise<Order[]>;\n  getOrderItems(): Promise<OrderItem[]>;\n  getOrderItemsByOrderId(orderId: string): Promise<(OrderItem & { product: Product })[]>;\n  getAllCartItems(): Promise<CartItem[]>;\n  clearProductsAndCategories(): Promise<void>;\n  executeSQLImport(sqlContent: string): Promise<void>;\n  \n  // Excel import methods\n  importCategories(categoriesData: any[]): Promise<void>;\n  importProducts(productsData: any[]): Promise<void>;\n  importUsers(usersData: any[]): Promise<void>;\n\n  sessionStore: any;\n}\n\nexport class DatabaseStorage implements IStorage {\n  public sessionStore: any;\n\n  constructor() {\n    this.sessionStore = sessionStore;\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set(userData)\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserProfile(id: string, profile: { firstName?: string; lastName?: string; email?: string }): Promise<User> {\n    const [updated] = await db\n      .update(users)\n      .set(profile)\n      .where(eq(users.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  // Stripe functions removed - using only Credimax and Cash on Delivery\n\n  // Category methods\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories);\n  }\n\n  async getCategoryById(id: string): Promise<Category | undefined> {\n    const [category] = await db.select().from(categories).where(eq(categories.id, id));\n    return category || undefined;\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db\n      .insert(categories)\n      .values(category)\n      .returning();\n    return newCategory;\n  }\n\n  async updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category> {\n    const [updated] = await db\n      .update(categories)\n      .set(category)\n      .where(eq(categories.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteCategory(id: string): Promise<void> {\n    // First, check if any products are using this category\n    const productsInCategory = await db.select().from(products).where(eq(products.categoryId, id));\n    \n    if (productsInCategory.length > 0) {\n      throw new Error(`Cannot delete category. ${productsInCategory.length} products are assigned to this category. Please reassign or delete those products first.`);\n    }\n    \n    await db.delete(categories).where(eq(categories.id, id));\n  }\n\n  // Units of measure methods\n  async getUnitsOfMeasure(): Promise<UnitOfMeasure[]> {\n    return await db.select().from(unitsOfMeasure).orderBy(unitsOfMeasure.name);\n  }\n\n  async getActiveUnitsOfMeasure(): Promise<UnitOfMeasure[]> {\n    return await db.select().from(unitsOfMeasure).where(eq(unitsOfMeasure.isActive, true)).orderBy(unitsOfMeasure.name);\n  }\n\n  async getUnitOfMeasureById(id: string): Promise<UnitOfMeasure | undefined> {\n    const [unit] = await db.select().from(unitsOfMeasure).where(eq(unitsOfMeasure.id, id));\n    return unit || undefined;\n  }\n\n  async createUnitOfMeasure(unit: InsertUnitOfMeasure): Promise<UnitOfMeasure> {\n    const [newUnit] = await db\n      .insert(unitsOfMeasure)\n      .values(unit)\n      .returning();\n    return newUnit;\n  }\n\n  async updateUnitOfMeasure(id: string, unit: Partial<InsertUnitOfMeasure>): Promise<UnitOfMeasure> {\n    const [updated] = await db\n      .update(unitsOfMeasure)\n      .set(unit)\n      .where(eq(unitsOfMeasure.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteUnitOfMeasure(id: string): Promise<void> {\n    await db.delete(unitsOfMeasure).where(eq(unitsOfMeasure.id, id));\n  }\n\n  // Product methods\n  async getProducts(): Promise<Product[]> {\n    return await db.select().from(products).where(eq(products.isActive, true));\n  }\n\n  async getFeaturedProducts(): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(and(eq(products.isActive, true), eq(products.isFeatured, true)))\n      .limit(8);\n  }\n\n  async getProductsByCategory(categoryId: string): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(and(eq(products.categoryId, categoryId), eq(products.isActive, true)));\n  }\n\n  async getProductById(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product || undefined;\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db\n      .insert(products)\n      .values(product)\n      .returning();\n    return newProduct;\n  }\n\n  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product> {\n    const [updated] = await db\n      .update(products)\n      .set(product)\n      .where(eq(products.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    // First, delete any order items that reference this product\n    await db.delete(orderItems).where(eq(orderItems.productId, id));\n    \n    // Then delete the product\n    await db.delete(products).where(eq(products.id, id));\n  }\n\n\n\n  // Additional methods for database export/import\n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async getOrders(): Promise<Order[]> {\n    return await db.select().from(orders);\n  }\n\n  async getOrderItems(): Promise<OrderItem[]> {\n    return await db.select().from(orderItems);\n  }\n\n  async getOrderItemsByOrderId(orderId: string): Promise<(OrderItem & { product: Product })[]> {\n    return await db\n      .select({\n        id: orderItems.id,\n        orderId: orderItems.orderId,\n        productId: orderItems.productId,\n        quantity: orderItems.quantity,\n        price: orderItems.price,\n        totalPrice: orderItems.totalPrice,\n        rentalStartDate: orderItems.rentalStartDate,\n        rentalEndDate: orderItems.rentalEndDate,\n        rentalDays: orderItems.rentalDays,\n        createdAt: orderItems.createdAt,\n        product: products,\n      })\n      .from(orderItems)\n      .innerJoin(products, eq(orderItems.productId, products.id))\n      .where(eq(orderItems.orderId, orderId));\n  }\n\n  async getAllCartItems(): Promise<CartItem[]> {\n    return await db.select().from(cartItems);\n  }\n\n  // Excel import methods\n  async importCategories(categoriesData: any[]): Promise<void> {\n    if (categoriesData.length === 0) return;\n    \n    // Clear existing categories\n    await db.delete(categories);\n    \n    // Insert new categories\n    for (const category of categoriesData) {\n      const insertData: any = {\n        name: category.name,\n        description: category.description || \"\",\n        imageUrl: category.imageUrl || \"\"\n      };\n      \n      // Only include ID if it exists and is not empty\n      if (category.id && category.id.trim() !== \"\") {\n        insertData.id = category.id;\n      }\n      \n      await db.insert(categories).values(insertData);\n    }\n  }\n\n  async importProducts(productsData: any[]): Promise<void> {\n    if (productsData.length === 0) return;\n    \n    // Clear existing products\n    await db.delete(products);\n    \n    // Insert new products\n    for (const product of productsData) {\n      const insertData: any = {\n        name: product.name,\n        description: product.description || \"\",\n        price: product.price.toString(),\n        stock: product.stock || 0,\n        sku: product.sku || \"\",\n        unitOfMeasure: product.unitOfMeasure || 'piece',\n        categoryId: product.categoryId,\n        imageUrl: product.imageUrl || \"\",\n        isActive: product.isActive !== undefined ? product.isActive : true,\n        isFeatured: product.isFeatured !== undefined ? product.isFeatured : false,\n        rating: (product.rating || 0).toString(),\n        reviewCount: product.reviewCount || 0,\n        productType: product.productType || 'sale',\n        rentalPeriod: product.rentalPeriod,\n        rentalPrice: product.rentalPrice?.toString()\n      };\n      \n      // Only include ID if it exists and is not empty\n      if (product.id && product.id.trim() !== \"\") {\n        insertData.id = product.id;\n      }\n      \n      await db.insert(products).values(insertData);\n    }\n  }\n\n  async importUsers(usersData: any[]): Promise<void> {\n    if (usersData.length === 0) return;\n    \n    // Note: We don't clear existing users for security reasons\n    // Instead, we only update existing users or create new ones\n    \n    for (const user of usersData) {\n      const existingUser = await db.select().from(users).where(eq(users.id, user.id)).limit(1);\n      \n      if (existingUser.length > 0) {\n        // Update existing user (excluding password for security)\n        await db.update(users).set({\n          username: user.username || user.email,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          isAdmin: user.isAdmin\n        }).where(eq(users.id, user.id));\n      } else {\n        // Create new user with default password (they'll need to reset)\n        const defaultPassword = crypto.randomBytes(16).toString('hex');\n        const hashedPassword = crypto.scryptSync(defaultPassword, defaultPassword, 64).toString('hex');\n        \n        const insertData: any = {\n          username: user.username || user.email || `user${Date.now()}`,\n          email: user.email || `user${Date.now()}@example.com`,\n          firstName: user.firstName || \"\",\n          lastName: user.lastName || \"\",\n          isAdmin: user.isAdmin || false,\n          password: hashedPassword\n        };\n        \n        // Only include ID if it exists and is not empty\n        if (user.id && user.id.trim() !== \"\") {\n          insertData.id = user.id;\n        }\n        \n        await db.insert(users).values(insertData);\n      }\n    }\n  }\n\n  async importUnitsOfMeasure(unitsData: any[]): Promise<void> {\n    if (unitsData.length === 0) return;\n    \n    // Clear existing units and insert new ones\n    await db.delete(unitsOfMeasure);\n    \n    for (const unit of unitsData) {\n      const insertData: any = {\n        name: unit.name,\n        abbreviation: unit.abbreviation,\n        isActive: unit.isActive !== undefined ? unit.isActive : true\n      };\n      \n      // Only include ID if it exists and is not empty\n      if (unit.id && unit.id.trim() !== \"\") {\n        insertData.id = unit.id;\n      }\n      \n      await db.insert(unitsOfMeasure).values(insertData);\n    }\n  }\n\n  async importOrders(ordersData: any[]): Promise<void> {\n    if (ordersData.length === 0) return;\n    \n    // Clear existing orders and order items\n    await db.delete(orderItems);\n    await db.delete(orders);\n    \n    for (const order of ordersData) {\n      const insertData: any = {\n        userId: order.userId,\n        status: order.status || 'pending',\n        total: (order.totalAmount || 0).toString(),\n        subtotal: (order.totalAmount || 0).toString(),\n        shippingAddress: order.shippingAddress || null,\n        paymentMethod: order.paymentMethod || 'cash_on_delivery'\n      };\n      \n      // Only include ID if it exists and is not empty\n      if (order.id && order.id.trim() !== \"\") {\n        insertData.id = order.id;\n      }\n      \n      await db.insert(orders).values(insertData);\n    }\n  }\n\n  async importOrderItems(orderItemsData: any[]): Promise<void> {\n    if (orderItemsData.length === 0) return;\n    \n    for (const item of orderItemsData) {\n      const insertData: any = {\n        orderId: item.orderId,\n        productId: item.productId,\n        quantity: item.quantity || 1,\n        price: (item.price || 0).toString()\n      };\n      \n      // Only include ID if it exists and is not empty\n      if (item.id && item.id.trim() !== \"\") {\n        insertData.id = item.id;\n      }\n      \n      await db.insert(orderItems).values(insertData);\n    }\n  }\n\n  async importSliderImages(sliderData: any[]): Promise<void> {\n    if (sliderData.length === 0) return;\n    \n    // Clear existing slider images\n    await db.delete(sliderImages);\n    \n    for (const slide of sliderData) {\n      const insertData: any = {\n        title: slide.title || \"Slide\",\n        imageUrl: slide.imageUrl || \"\",\n        isActive: slide.isActive !== undefined ? slide.isActive : true,\n        sortOrder: slide.displayOrder || 0\n      };\n      \n      // Only include ID if it exists and is not empty\n      if (slide.id && slide.id.trim() !== \"\") {\n        insertData.id = slide.id;\n      }\n      \n      await db.insert(sliderImages).values(insertData);\n    }\n  }\n\n  async importSiteSettings(settingsData: any[]): Promise<void> {\n    if (settingsData.length === 0) return;\n    \n    for (const setting of settingsData) {\n      const insertData: any = {\n        siteName: setting.siteName || \"\",\n        headerLogo: setting.headerLogo || null,\n        footerLogo: setting.footerLogo || null,\n        footerDescription: setting.footerDescription || \"\",\n        footerCopyright: setting.footerCopyright || \"\",\n        footerBackgroundImage: setting.footerBackgroundImage || null,\n        quickLinksTitle: setting.quickLinksTitle || \"Quick Links\",\n        quickLinks: setting.quickLinks || null,\n        servicesTitle: setting.servicesTitle || \"Our Services\",\n        serviceLink1Text: setting.serviceLink1Text || \"\",\n        serviceLink1Url: setting.serviceLink1Url || \"\",\n        serviceLink2Text: setting.serviceLink2Text || \"\",\n        serviceLink2Url: setting.serviceLink2Url || \"\",\n        serviceLink3Text: setting.serviceLink3Text || \"\",\n        serviceLink3Url: setting.serviceLink3Url || \"\",\n        serviceLink4Text: setting.serviceLink4Text || \"\",\n        serviceLink4Url: setting.serviceLink4Url || \"\",\n        socialFacebook: setting.socialFacebook || \"\",\n        socialTwitter: setting.socialTwitter || \"\",\n        socialInstagram: setting.socialInstagram || \"\",\n        socialLinkedin: setting.socialLinkedin || \"\"\n      };\n      \n      // Use default ID or provided ID\n      const settingId = (setting.id && setting.id.trim() !== \"\") ? setting.id : \"default\";\n      \n      // Update existing or insert new\n      const existingSetting = await db.select().from(siteSettings).where(eq(siteSettings.id, settingId)).limit(1);\n      \n      if (existingSetting.length > 0) {\n        await db.update(siteSettings).set(insertData).where(eq(siteSettings.id, settingId));\n      } else {\n        insertData.id = settingId;\n        await db.insert(siteSettings).values(insertData);\n      }\n    }\n  }\n\n  async clearProductsAndCategories(): Promise<void> {\n    await db.delete(cartItems);\n    await db.delete(orderItems);\n    await db.delete(orders);\n    await db.delete(products);\n    await db.delete(categories);\n  }\n\n  async executeSQLImport(sqlContent: string): Promise<void> {\n    try {\n      // Split SQL content into individual statements\n      const statements = sqlContent\n        .split(';')\n        .map(stmt => stmt.trim())\n        .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));\n\n      // Execute each statement\n      for (const statement of statements) {\n        if (statement.trim()) {\n          await db.execute(statement);\n        }\n      }\n    } catch (error) {\n      console.error('SQL import execution error:', error);\n      throw new Error('Failed to execute SQL import');\n    }\n  }\n\n  // Cart methods\n  async getCartItems(userId: string): Promise<(CartItem & { product: Product })[]> {\n    return await db\n      .select({\n        id: cartItems.id,\n        userId: cartItems.userId,\n        productId: cartItems.productId,\n        quantity: cartItems.quantity,\n        rentalStartDate: cartItems.rentalStartDate,\n        rentalEndDate: cartItems.rentalEndDate,\n        unitPrice: cartItems.unitPrice,\n        totalPrice: cartItems.totalPrice,\n        createdAt: cartItems.createdAt,\n        product: products,\n      })\n      .from(cartItems)\n      .innerJoin(products, eq(cartItems.productId, products.id))\n      .where(eq(cartItems.userId, userId));\n  }\n\n  async addToCart(item: InsertCartItem): Promise<CartItem> {\n    // For rental products, don't combine items - each rental period should be separate\n    if (item.rentalStartDate && item.rentalEndDate) {\n      // Create new cart item for rentals (each rental period is unique)\n      const [newItem] = await db\n        .insert(cartItems)\n        .values(item)\n        .returning();\n      return newItem;\n    } else {\n      // For sale products, check if item already exists and combine quantities\n      const [existing] = await db\n        .select()\n        .from(cartItems)\n        .where(and(eq(cartItems.userId, item.userId), eq(cartItems.productId, item.productId)));\n\n      if (existing) {\n        // Update quantity and recalculate total price\n        const newQuantity = existing.quantity + (item.quantity || 1);\n        const newTotalPrice = item.unitPrice ? (parseFloat(item.unitPrice) * newQuantity).toFixed(2) : item.totalPrice;\n        \n        const [updated] = await db\n          .update(cartItems)\n          .set({ \n            quantity: newQuantity,\n            totalPrice: newTotalPrice\n          })\n          .where(eq(cartItems.id, existing.id))\n          .returning();\n        return updated;\n      } else {\n        // Create new cart item\n        const [newItem] = await db\n          .insert(cartItems)\n          .values(item)\n          .returning();\n        return newItem;\n      }\n    }\n  }\n\n  async updateCartItem(userId: string, productId: string, quantity: number): Promise<CartItem> {\n    const [updated] = await db\n      .update(cartItems)\n      .set({ quantity })\n      .where(and(eq(cartItems.userId, userId), eq(cartItems.productId, productId)))\n      .returning();\n    return updated;\n  }\n\n  async removeFromCart(userId: string, productId: string): Promise<void> {\n    await db\n      .delete(cartItems)\n      .where(and(eq(cartItems.userId, userId), eq(cartItems.productId, productId)));\n  }\n\n  async clearCart(userId: string): Promise<void> {\n    await db.delete(cartItems).where(eq(cartItems.userId, userId));\n  }\n\n\n\n  // Order methods  \n  async getOrdersWithDetails(): Promise<any[]> {\n    const ordersData = await db\n      .select()\n      .from(orders)\n      .orderBy(desc(orders.createdAt));\n    \n    return Promise.all(ordersData.map(async (order) => {\n      // Get user data separately\n      const [userData] = await db\n        .select()\n        .from(users)\n        .where(eq(users.id, order.userId));\n        \n      // Get order items\n      const items = await db\n        .select({\n          id: orderItems.id,\n          orderId: orderItems.orderId,\n          productId: orderItems.productId,\n          quantity: orderItems.quantity,\n          price: orderItems.price,\n          createdAt: orderItems.createdAt,\n          product: products,\n        })\n        .from(orderItems)\n        .innerJoin(products, eq(orderItems.productId, products.id))\n        .where(eq(orderItems.orderId, order.id));\n\n      return {\n        ...order,\n        user: userData || null,\n        items\n      };\n    }));\n  }\n\n  async getUserOrders(userId: string): Promise<any[]> {\n    const userOrders = await db\n      .select()\n      .from(orders)\n      .where(eq(orders.userId, userId))\n      .orderBy(desc(orders.createdAt));\n\n    const ordersWithItems = await Promise.all(\n      userOrders.map(async (order) => {\n        const items = await db\n          .select({\n            id: orderItems.id,\n            orderId: orderItems.orderId,\n            productId: orderItems.productId,\n            quantity: orderItems.quantity,\n            price: orderItems.price,\n            createdAt: orderItems.createdAt,\n            product: products,\n          })\n          .from(orderItems)\n          .innerJoin(products, eq(orderItems.productId, products.id))\n          .where(eq(orderItems.orderId, order.id));\n\n        return { ...order, items };\n      })\n    );\n\n    return ordersWithItems;\n  }\n\n  async getOrderWithDetails(orderId: string): Promise<any> {\n    // Get order data\n    const [orderData] = await db\n      .select()\n      .from(orders)\n      .where(eq(orders.id, orderId));\n    \n    if (!orderData) {\n      throw new Error('Order not found');\n    }\n    \n    // Get user data\n    const [userData] = await db\n      .select()\n      .from(users)\n      .where(eq(users.id, orderData.userId));\n      \n    // Get order items\n    const items = await db\n      .select({\n        id: orderItems.id,\n        orderId: orderItems.orderId,\n        productId: orderItems.productId,\n        quantity: orderItems.quantity,\n        price: orderItems.price,\n        createdAt: orderItems.createdAt,\n        product: products,\n      })\n      .from(orderItems)\n      .innerJoin(products, eq(orderItems.productId, products.id))\n      .where(eq(orderItems.orderId, orderData.id));\n\n    return {\n      ...orderData,\n      user: userData || null,\n      items\n    };\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async updateOrder(id: string, updates: Partial<Order>): Promise<Order> {\n    const [updated] = await db\n      .update(orders)\n      .set(updates)\n      .where(eq(orders.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getOrderById(id: string): Promise<any> {\n    try {\n      // Get the basic order first\n      const [orderData] = await db\n        .select()\n        .from(orders)\n        .where(eq(orders.id, id));\n        \n      if (!orderData) {\n        return null;\n      }\n\n      // Get the user separately\n      const [userData] = await db\n        .select()\n        .from(users)\n        .where(eq(users.id, orderData.userId));\n\n      // Get order items\n      const items = await db\n        .select({\n          id: orderItems.id,\n          orderId: orderItems.orderId,\n          productId: orderItems.productId,\n          quantity: orderItems.quantity,\n          price: orderItems.price,\n          createdAt: orderItems.createdAt,\n          product: products,\n        })\n        .from(orderItems)\n        .innerJoin(products, eq(orderItems.productId, products.id))\n        .where(eq(orderItems.orderId, orderData.id));\n\n      return {\n        ...orderData,\n        user: userData || null,\n        items\n      };\n    } catch (error) {\n      console.error('Error in getOrderById:', error);\n      throw error;\n    }\n  }\n\n  async getOrderWithItems(id: string): Promise<any> {\n    return this.getOrderById(id);\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const [newOrder] = await db\n      .insert(orders)\n      .values(order)\n      .returning();\n    return newOrder;\n  }\n\n  async createOrderItem(item: InsertOrderItem): Promise<OrderItem> {\n    const [newItem] = await db\n      .insert(orderItems)\n      .values(item)\n      .returning();\n    return newItem;\n  }\n\n\n\n  async updateOrderStatus(id: string, status: string): Promise<Order> {\n    const [updated] = await db\n      .update(orders)\n      .set({ status })\n      .where(eq(orders.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Site Settings methods\n  async getSiteSettings(): Promise<SiteSettings> {\n    const [settings] = await db.select().from(siteSettings).where(eq(siteSettings.id, \"default\"));\n    if (!settings) {\n      // Create default settings if none exist\n      const [newSettings] = await db.insert(siteSettings).values({ id: \"default\" }).returning();\n      return newSettings;\n    }\n    return settings;\n  }\n\n  async updateSiteSettings(settingsData: Partial<InsertSiteSettings>): Promise<SiteSettings> {\n    const [updated] = await db\n      .update(siteSettings)\n      .set({ ...settingsData, updatedAt: new Date() })\n      .where(eq(siteSettings.id, \"default\"))\n      .returning();\n    return updated;\n  }\n\n  // Slider images methods\n  async getSliderImages(): Promise<SliderImage[]> {\n    return await db.select().from(sliderImages).orderBy(sliderImages.sortOrder, sliderImages.createdAt);\n  }\n\n  async getActiveSliderImages(): Promise<SliderImage[]> {\n    return await db\n      .select()\n      .from(sliderImages)\n      .where(eq(sliderImages.isActive, true))\n      .orderBy(sliderImages.sortOrder, sliderImages.createdAt);\n  }\n\n  async getSliderImageById(id: string): Promise<SliderImage | undefined> {\n    const [image] = await db.select().from(sliderImages).where(eq(sliderImages.id, id));\n    return image || undefined;\n  }\n\n  async createSliderImage(image: InsertSliderImage): Promise<SliderImage> {\n    const [newImage] = await db\n      .insert(sliderImages)\n      .values(image)\n      .returning();\n    return newImage;\n  }\n\n  async updateSliderImage(id: string, imageData: Partial<InsertSliderImage>): Promise<SliderImage> {\n    const [updatedImage] = await db\n      .update(sliderImages)\n      .set({ ...imageData, updatedAt: new Date() })\n      .where(eq(sliderImages.id, id))\n      .returning();\n    return updatedImage;\n  }\n\n  async deleteSliderImage(id: string): Promise<void> {\n    await db.delete(sliderImages).where(eq(sliderImages.id, id));\n  }\n  // Permission system methods\n  async getAllRoles(): Promise<Role[]> {\n    return await db.select().from(roles).orderBy(roles.name);\n  }\n\n  async getRoleById(id: string): Promise<Role | undefined> {\n    const [role] = await db.select().from(roles).where(eq(roles.id, id));\n    return role || undefined;\n  }\n\n  async getAllPermissionModules(): Promise<PermissionModule[]> {\n    return await db.select().from(permissionModules).orderBy(permissionModules.sortOrder);\n  }\n\n  async getPermissionsByModule(moduleId: string): Promise<Permission[]> {\n    return await db.select().from(permissions).where(eq(permissions.moduleId, moduleId));\n  }\n\n  async getRolePermissions(roleId: string): Promise<Permission[]> {\n    const result = await db\n      .select({\n        id: permissions.id,\n        moduleId: permissions.moduleId,\n        name: permissions.name,\n        displayName: permissions.displayName,\n        description: permissions.description,\n        action: permissions.action,\n        createdAt: permissions.createdAt,\n      })\n      .from(permissions)\n      .innerJoin(rolePermissions, eq(permissions.id, rolePermissions.permissionId))\n      .where(eq(rolePermissions.roleId, roleId));\n    \n    return result;\n  }\n\n  async assignPermissionsToRole(roleId: string, permissionIds: string[]): Promise<void> {\n    // First, remove all existing permissions for this role\n    await db.delete(rolePermissions).where(eq(rolePermissions.roleId, roleId));\n    \n    // Then, add the new permissions\n    if (permissionIds.length > 0) {\n      const insertData = permissionIds.map(permissionId => ({\n        roleId,\n        permissionId\n      }));\n      await db.insert(rolePermissions).values(insertData);\n    }\n  }\n\n  async assignRoleToUser(userId: string, roleId: string): Promise<void> {\n    await db.update(users).set({ roleId }).where(eq(users.id, userId));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":32459},"server/test-smtp.ts":{"content":"import nodemailer from 'nodemailer';\nimport { storage } from './storage';\n\nexport async function testSMTP() {\n  try {\n    // Get current SMTP settings from database\n    const settings = await storage.getSiteSettings();\n    \n    if (!settings.emailEnabled) {\n      throw new Error('Email is disabled in settings');\n    }\n\n    if (!settings.smtpHost || !settings.smtpUser || !settings.smtpPassword) {\n      throw new Error('SMTP configuration is incomplete');\n    }\n\n    // Create transporter\n    const transporter = nodemailer.createTransport({\n      host: settings.smtpHost,\n      port: settings.smtpPort || 587,\n      secure: false, // true for 465, false for other ports\n      auth: {\n        user: settings.smtpUser,\n        pass: settings.smtpPassword,\n      },\n    });\n\n    // Verify connection\n    await transporter.verify();\n\n    // Send test email\n    const testEmail = {\n      from: `\"${settings.smtpFromName}\" <${settings.smtpFromEmail}>`,\n      to: settings.adminEmail || settings.smtpUser,\n      subject: 'SMTP Test - InnovanceOrbit',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #2563eb;\">SMTP Test Successful!</h2>\n          <p>This is a test email to verify that your SMTP configuration is working correctly.</p>\n          \n          <div style=\"background-color: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3>SMTP Configuration Details:</h3>\n            <ul>\n              <li><strong>Host:</strong> ${settings.smtpHost}</li>\n              <li><strong>Port:</strong> ${settings.smtpPort}</li>\n              <li><strong>From Email:</strong> ${settings.smtpFromEmail}</li>\n              <li><strong>From Name:</strong> ${settings.smtpFromName}</li>\n            </ul>\n          </div>\n          \n          <p>Your email system is now ready to send order confirmations and notifications.</p>\n          \n          <hr style=\"margin: 30px 0; border: none; border-top: 1px solid #e2e8f0;\">\n          <p style=\"color: #64748b; font-size: 14px;\">\n            This test was sent from ${settings.siteName || 'InnovanceOrbit'}<br>\n            Time: ${new Date().toLocaleString()}\n          </p>\n        </div>\n      `,\n      text: `\nSMTP Test Successful!\n\nThis is a test email to verify that your SMTP configuration is working correctly.\n\nSMTP Configuration Details:\n- Host: ${settings.smtpHost}\n- Port: ${settings.smtpPort}\n- From Email: ${settings.smtpFromEmail}\n- From Name: ${settings.smtpFromName}\n\nYour email system is now ready to send order confirmations and notifications.\n\nThis test was sent from ${settings.siteName || 'InnovanceOrbit'}\nTime: ${new Date().toLocaleString()}\n      `\n    };\n\n    const result = await transporter.sendMail(testEmail);\n    \n    return {\n      success: true,\n      message: 'Test email sent successfully!',\n      messageId: result.messageId,\n      recipient: testEmail.to\n    };\n\n  } catch (error) {\n    console.error('SMTP Test Error:', error);\n    return {\n      success: false,\n      message: error instanceof Error ? error.message : 'Unknown error occurred',\n      error: error\n    };\n  }\n}","size_bytes":3154},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, json } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").default(\"\"),\n  lastName: text(\"last_name\").default(\"\"),\n  isAdmin: boolean(\"is_admin\").default(false),\n  isSuperAdmin: boolean(\"is_super_admin\").default(false),\n  roleId: varchar(\"role_id\"),\n  // Stripe integration removed - using only Credimax and Cash on Delivery\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\n// Roles table\nexport const roles = pgTable(\"roles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull().unique(),\n  displayName: varchar(\"display_name\").notNull(),\n  description: text(\"description\"),\n  isSystemRole: boolean(\"is_system_role\").default(false), // For super admin role\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n});\n\n// Permission modules\nexport const permissionModules = pgTable(\"permission_modules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull().unique(),\n  displayName: varchar(\"display_name\").notNull(),\n  description: text(\"description\"),\n  icon: varchar(\"icon\").default(\"Shield\"), // Lucide icon name\n  sortOrder: integer(\"sort_order\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\n// Permissions within modules\nexport const permissions = pgTable(\"permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  moduleId: varchar(\"module_id\").references(() => permissionModules.id).notNull(),\n  name: varchar(\"name\").notNull(),\n  displayName: varchar(\"display_name\").notNull(),\n  description: text(\"description\"),\n  action: varchar(\"action\").notNull(), // create, read, update, delete, manage\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\n// Role permissions mapping\nexport const rolePermissions = pgTable(\"role_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roleId: varchar(\"role_id\").references(() => roles.id).notNull(),\n  permissionId: varchar(\"permission_id\").references(() => permissions.id).notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").default(\"\"),\n  imageUrl: text(\"image_url\").default(\"\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const unitsOfMeasure = pgTable(\"units_of_measure\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  abbreviation: text(\"abbreviation\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").default(\"\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  imageUrl: text(\"image_url\").default(\"\"),\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n\n  sku: text(\"sku\").unique().default(\"\"),\n  unitOfMeasure: text(\"unit_of_measure\").default(\"piece\"), // piece, kg, liter, meter, box, pack, etc.\n  isActive: boolean(\"is_active\").default(true),\n  isFeatured: boolean(\"is_featured\").default(false),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0.00\"),\n  reviewCount: integer(\"review_count\").default(0),\n  productType: text(\"product_type\").notNull().default(\"sale\"), // sale, rental\n  rentalPeriod: text(\"rental_period\"), // daily, weekly, monthly (for rental products)\n  rentalPrice: decimal(\"rental_price\", { precision: 10, scale: 2 }), // price per rental period\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  // Rental-specific fields\n  rentalStartDate: timestamp(\"rental_start_date\"), // For rental products\n  rentalEndDate: timestamp(\"rental_end_date\"), // For rental products\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }), // Calculated price per unit (daily rate for rentals)\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }), // Total calculated price for this cart item\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\n\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, awaiting_approval, approved, rejected, payment_pending, processing, shipped, delivered, cancelled\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  tax: decimal(\"tax\", { precision: 10, scale: 2 }).default(\"0.00\"), // This will be the VAT amount (10%)\n\n  vatPercentage: decimal(\"vat_percentage\", { precision: 5, scale: 2 }).notNull().default(\"10.00\"), // VAT percentage\n  adminApprovalStatus: text(\"admin_approval_status\").notNull().default(\"pending\"), // pending, approved, rejected\n  adminApprovedBy: varchar(\"admin_approved_by\").references(() => users.id),\n  adminApprovedAt: timestamp(\"admin_approved_at\"),\n  adminRemarks: text(\"admin_remarks\"), // Admin can add notes for approval/rejection\n\n  paymentMethod: text(\"payment_method\"), // credimax, cash_on_delivery\n  paymentIntentId: text(\"payment_intent_id\"),\n\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").references(() => orders.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(), // Unit price\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(), // Total price for this line item\n  // Rental-specific fields\n  rentalStartDate: timestamp(\"rental_start_date\"), // For rental products\n  rentalEndDate: timestamp(\"rental_end_date\"), // For rental products\n  rentalDays: integer(\"rental_days\"), // Number of rental days\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  cartItems: many(cartItems),\n  orders: many(orders),\n}));\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  products: many(products),\n}));\n\nexport const unitsOfMeasureRelations = relations(unitsOfMeasure, ({ many }) => ({\n  products: many(products),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  unitOfMeasure: one(unitsOfMeasure, {\n    fields: [products.unitOfMeasure],\n    references: [unitsOfMeasure.name],\n  }),\n  cartItems: many(cartItems),\n  orderItems: many(orderItems),\n}));\n\nexport const cartItemsRelations = relations(cartItems, ({ one }) => ({\n  user: one(users, {\n    fields: [cartItems.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [cartItems.productId],\n    references: [products.id],\n  }),\n}));\n\n\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  user: one(users, {\n    fields: [orders.userId],\n    references: [users.id],\n  }),\n  items: many(orderItems),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, {\n    fields: [orderItems.orderId],\n    references: [orders.id],\n  }),\n  product: one(products, {\n    fields: [orderItems.productId],\n    references: [products.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  // Stripe fields omitted - using only Credimax and Cash on Delivery\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUnitOfMeasureSchema = createInsertSchema(unitsOfMeasure).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true,\n});\n\n\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Relations for new permission system\nexport const usersRelations2 = relations(users, ({ one }) => ({\n  role: one(roles, {\n    fields: [users.roleId],\n    references: [roles.id],\n  }),\n}));\n\nexport const rolesRelations = relations(roles, ({ many }) => ({\n  users: many(users),\n  rolePermissions: many(rolePermissions),\n}));\n\nexport const permissionModulesRelations = relations(permissionModules, ({ many }) => ({\n  permissions: many(permissions),\n}));\n\nexport const permissionsRelations = relations(permissions, ({ one, many }) => ({\n  module: one(permissionModules, {\n    fields: [permissions.moduleId],\n    references: [permissionModules.id],\n  }),\n  rolePermissions: many(rolePermissions),\n}));\n\nexport const rolePermissionsRelations = relations(rolePermissions, ({ one }) => ({\n  role: one(roles, {\n    fields: [rolePermissions.roleId],\n    references: [roles.id],\n  }),\n  permission: one(permissions, {\n    fields: [rolePermissions.permissionId],\n    references: [permissions.id],\n  }),\n}));\n\n// Insert schemas for new tables\nexport const insertRoleSchema = createInsertSchema(roles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPermissionModuleSchema = createInsertSchema(permissionModules).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPermissionSchema = createInsertSchema(permissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRolePermissionSchema = createInsertSchema(rolePermissions).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type UnitOfMeasure = typeof unitsOfMeasure.$inferSelect;\nexport type InsertUnitOfMeasure = z.infer<typeof insertUnitOfMeasureSchema>;\nexport type Role = typeof roles.$inferSelect;\nexport type InsertRole = z.infer<typeof insertRoleSchema>;\nexport type PermissionModule = typeof permissionModules.$inferSelect;\nexport type InsertPermissionModule = z.infer<typeof insertPermissionModuleSchema>;\nexport type Permission = typeof permissions.$inferSelect;\nexport type InsertPermission = z.infer<typeof insertPermissionSchema>;\nexport type RolePermission = typeof rolePermissions.$inferSelect;\nexport type InsertRolePermission = z.infer<typeof insertRolePermissionSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\n\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\n\nexport const siteSettings = pgTable(\"site_settings\", {\n  id: varchar(\"id\").primaryKey().default(\"default\"),\n  siteName: text(\"site_name\").notNull().default(\"InnovanceOrbit\"),\n  headerLogo: text(\"header_logo\"),\n  footerLogo: text(\"footer_logo\"),\n  logoUrl: text(\"logo_url\"), // Main site logo\n  theme: text(\"theme\").default(\"default\"), // default, ocean, forest, sunset, midnight, coral, violet, emerald, ruby, sapphire, rose, bronze, slate, mint, lavender\n  textColor: text(\"text_color\").default(\"#1e293b\"),\n  headerTextColor: text(\"header_text_color\").default(\"#64748b\"),\n  tabTextColor: text(\"tab_text_color\").default(\"#2563eb\"),\n  tabActiveTextColor: text(\"tab_active_text_color\").default(\"#2563eb\"),\n  footerDescription: text(\"footer_description\"),\n  contactEmail: text(\"contact_email\"),\n  contactPhone: text(\"contact_phone\"),\n  contactAddress: text(\"contact_address\"),\n  supportEmail: text(\"support_email\"),\n  adminEmail: text(\"admin_email\").default(\"admin@innovanceorbit.com\"), // Admin notifications\n  businessHours: text(\"business_hours\"),\n  officeHoursTitle: text(\"office_hours_title\").default(\"Office Hours\"),\n  paymentMethodsImage: text(\"payment_methods_image\"),\n  footerLeftImage: text(\"footer_left_image\"),\n  footerLeftImageWidth: integer(\"footer_left_image_width\").default(200),\n  paymentMethodsImageWidth: integer(\"payment_methods_image_width\").default(250),\n  loginPageLogoWidth: integer(\"login_page_logo_width\").default(80),\n  headerLogoHeight: integer(\"header_logo_height\").default(64), // Height in pixels for header logo\n  socialFacebook: text(\"social_facebook\"),\n  socialTwitter: text(\"social_twitter\"),\n  socialInstagram: text(\"social_instagram\"),\n  socialLinkedin: text(\"social_linkedin\"),\n  copyrightText: text(\"copyright_text\"),\n  additionalFooterText: text(\"additional_footer_text\"),\n  footerBackgroundUrl: text(\"footer_background_url\").default(\"/uploads/footer-background.png\"),\n  quickLinksTitle: text(\"quick_links_title\").default(\"Quick Links\"),\n  quickLinkHome: text(\"quick_link_home\").default(\"Home\"),\n  quickLinkProducts: text(\"quick_link_products\").default(\"Products\"),\n  quickLinkAbout: text(\"quick_link_about\").default(\"About\"),\n  quickLinkContact: text(\"quick_link_contact\").default(\"Contact\"),\n  servicesTitle: text(\"services_title\").default(\"Services\"),\n  serviceLink1: text(\"service_link_1\").default(\"Customer Support\"),\n  serviceLink2: text(\"service_link_2\").default(\"Shipping Info\"),\n  serviceLink3: text(\"service_link_3\").default(\"Returns\"),\n  serviceLink4: text(\"service_link_4\").default(\"FAQ\"),\n  socialTitle: text(\"social_title\").default(\"Follow Us\"),\n  // Email templates and SMTP Configuration\n  orderConfirmationTemplate: text(\"order_confirmation_template\").default(`\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <h2 style=\"color: #2563eb;\">Order Confirmation - {{orderNumber}}</h2>\n      <p>Dear {{customerName}},</p>\n      <p>Thank you for your order! We've received your order and it's being processed.</p>\n      <div style=\"background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n        <h3 style=\"margin-top: 0;\">Order Details:</h3>\n        <p><strong>Order Number:</strong> {{orderNumber}}</p>\n        <p><strong>Order Date:</strong> {{orderDate}}</p>\n        <p><strong>Total Amount:</strong> {{totalAmount}}</p>\n        <p><strong>Payment Method:</strong> {{paymentMethod}}</p>\n      </div>\n      <h3>Items Ordered:</h3>\n      {{orderItems}}\n      <p>We'll send you another email when your order ships.</p>\n      <p>Best regards,<br>{{siteName}} Team</p>\n    </div>\n  `),\n  // SMTP Email Configuration\n  smtpEnabled: boolean(\"smtp_enabled\").default(false),\n  smtpHost: text(\"smtp_host\"),\n  smtpPort: integer(\"smtp_port\").default(587),\n  smtpSecure: boolean(\"smtp_secure\").default(false),\n  smtpUser: text(\"smtp_user\"),\n  smtpPassword: text(\"smtp_password\"),\n  smtpFromName: text(\"smtp_from_name\").default(\"BAYG - Bahrain Asian Youth Games 2025\"),\n  smtpFromEmail: text(\"smtp_from_email\"),\n  \n  // Login Page Specific Settings\n  loginPageLogo: text(\"login_page_logo\"),\n  loginPageTitle: text(\"login_page_title\").default(\"InnovanceOrbit Store\"),\n  \n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n});\n\nexport const sliderImages = pgTable(\"slider_images\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").default(\"\"),\n  description: text(\"description\").default(\"\"),\n  imageUrl: text(\"image_url\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  sortOrder: integer(\"sort_order\").default(0),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n});\n\nexport const insertSiteSettingsSchema = createInsertSchema(siteSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSliderImageSchema = createInsertSchema(sliderImages).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertSiteSettings = z.infer<typeof insertSiteSettingsSchema>;\nexport type SiteSettings = typeof siteSettings.$inferSelect;\nexport type SliderImage = typeof sliderImages.$inferSelect;\nexport type InsertSliderImage = z.infer<typeof insertSliderImageSchema>;\n","size_bytes":17692},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"./hooks/use-auth\";\nimport NotFound from \"@/pages/not-found\";\nimport HomePage from \"@/pages/home-page\";\nimport AuthPage from \"@/pages/auth-page\";\nimport ProductsPage from \"@/pages/products-page\";\nimport CategoriesPage from \"@/pages/categories-page\";\nimport CategoryDetailPage from \"@/pages/category-detail-page\";\nimport ProductDetailPage from \"@/pages/product-detail-page\";\nimport CartPage from \"@/pages/cart-page\";\nimport CheckoutPage from \"@/pages/checkout-page\";\n\nimport OrdersPage from \"@/pages/orders-page\";\nimport UserDashboard from \"@/pages/user-dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport ProfilePage from \"@/pages/profile-page\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport Footer from \"@/components/footer\";\nimport { NavigationHeader } from \"@/components/navigation-header\";\nimport { useTheme } from \"./hooks/use-theme\";\nimport { useLocation } from \"wouter\";\n\nfunction ThemeWrapper({ children }: { children: React.ReactNode }) {\n  useTheme(); // This will automatically apply the theme from settings\n  return <div>{children}</div>;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={HomePage} />\n      <ProtectedRoute path=\"/categories\" component={CategoriesPage} />\n      <ProtectedRoute path=\"/category/:categoryId\" component={CategoryDetailPage} />\n      <ProtectedRoute path=\"/products\" component={ProductsPage} />\n      <ProtectedRoute path=\"/products/:id\" component={ProductDetailPage} />\n      <ProtectedRoute path=\"/cart\" component={CartPage} />\n\n      <ProtectedRoute path=\"/orders\" component={OrdersPage} />\n      <ProtectedRoute path=\"/checkout/:orderId\" component={CheckoutPage} />\n      <ProtectedRoute path=\"/checkout\" component={CheckoutPage} />\n      <ProtectedRoute path=\"/dashboard\" component={UserDashboard} />\n      <ProtectedRoute path=\"/profile\" component={ProfilePage} />\n      <ProtectedRoute path=\"/admin\" component={AdminDashboard} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  const [location] = useLocation();\n  const isAuthPage = location === \"/auth\";\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      {!isAuthPage && <NavigationHeader />}\n      <div className=\"flex-1\">\n        <Router />\n      </div>\n      {!isAuthPage && <Footer />}\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <ThemeWrapper>\n          <TooltipProvider>\n            <AppContent />\n            <Toaster />\n          </TooltipProvider>\n        </ThemeWrapper>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3006},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom Animations */\n@keyframes fadeInUp {\n  0% {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-fadeInUp {\n  animation: fadeInUp 0.8s ease-out forwards;\n}\n\n/* Dynamic theme variables - updated by site settings and theme system */\n:root {\n  --theme-primary: #2563eb;\n  --theme-secondary: #64748b;\n  --theme-accent: #0ea5e9;\n  --theme-background: #ffffff;\n  --theme-text: #1e293b;\n  --theme-header-text: #ffffff;\n  --theme-tab-text: #64748b;\n  --theme-tab-active-text: #2563eb;\n  \n  /* Legacy support */\n  --primary-color: var(--theme-primary);\n  --secondary-color: var(--theme-secondary);\n  --accent-color: var(--theme-accent);\n  --background-color: var(--theme-background);\n  --text-color: var(--theme-text);\n}\n\n/* Enhanced theme application */\n.theme-primary, .btn-primary, .bg-primary {\n  background-color: var(--theme-primary) !important;\n}\n\n.theme-text-primary, .text-primary {\n  color: var(--theme-primary) !important;\n}\n\n.theme-border-primary, .border-primary {\n  border-color: var(--theme-primary) !important;\n}\n\n.theme-secondary, .bg-secondary {\n  background-color: var(--theme-secondary) !important;\n}\n\n.theme-accent, .bg-accent {\n  background-color: var(--theme-accent) !important;\n}\n\n.theme-text-accent {\n  color: var(--theme-accent) !important;\n}\n\n/* Primary button with theme colors */\n.btn[data-theme=\"primary\"] {\n  background-color: var(--theme-primary);\n  border-color: var(--theme-primary);\n  color: white;\n}\n\n.btn[data-theme=\"primary\"]:hover {\n  background-color: color-mix(in srgb, var(--theme-primary) 85%, black);\n  border-color: color-mix(in srgb, var(--theme-primary) 85%, black);\n}\n\n/* Theme-aware cards and components */\n.theme-card {\n  background-color: var(--theme-background);\n  color: var(--theme-text);\n  border: 1px solid color-mix(in srgb, var(--theme-primary) 20%, transparent);\n}\n\n.theme-gradient {\n  background: linear-gradient(135deg, var(--theme-primary), var(--theme-accent));\n}\n\n/* Header and navigation text styling */\n.theme-header-text {\n  color: var(--theme-header-text) !important;\n}\n\n.theme-tab-text {\n  color: var(--theme-tab-text) !important;\n}\n\n.theme-tab-active-text {\n  color: var(--theme-tab-active-text) !important;\n}\n\n/* Tab components with theme colors */\n.tabs-list [data-state=\"active\"] {\n  color: var(--theme-tab-active-text) !important;\n}\n\n.tabs-list [data-state=\"inactive\"] {\n  color: var(--theme-tab-text) !important;\n}\n\n/* Navigation header styling */\n.nav-header {\n  color: var(--theme-header-text);\n}\n\n.nav-header a {\n  color: var(--theme-header-text);\n}\n\n.nav-header a:hover {\n  color: color-mix(in srgb, var(--theme-header-text) 80%, transparent);\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(218, 82%, 58%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(158, 64%, 45%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(38, 92%, 50%);\n  --accent-foreground: hsl(20, 14.3%, 4.1%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(218, 82%, 58%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(158, 64%, 45%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(38, 92%, 50%);\n  --accent-foreground: hsl(20, 14.3%, 4.1%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  }\n}\n\n@layer utilities {\n  .line-clamp-1 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 1;\n  }\n  \n  .line-clamp-2 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n  }\n  \n  .line-clamp-3 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 3;\n  }\n}\n\n/* Custom animations */\n.fade-in {\n  animation: fadeIn 0.3s ease-in;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n.slide-up {\n  animation: slideUp 0.3s ease-out;\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n/* eCommerce specific styles */\n.product-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n  gap: 1.5rem;\n}\n\n.cart-item-transition {\n  transition: all 0.2s ease-in-out;\n}\n\n.cart-item-transition:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n/* Loading states */\n.loading-shimmer {\n  background: linear-gradient(90deg, \n    hsl(0, 0%, 95%) 0%, \n    hsl(0, 0%, 90%) 50%, \n    hsl(0, 0%, 95%) 100%);\n  background-size: 200% 100%;\n  animation: shimmer 1.5s infinite;\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: 200% 0;\n  }\n  100% {\n    background-position: -200% 0;\n  }\n}\n\n/* Custom scrollbar */\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: hsl(0, 0%, 95%);\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: hsl(218, 82%, 58%);\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: hsl(218, 82%, 50%);\n}\n\n/* Form focus states */\n.form-input:focus {\n  ring: 2px;\n  ring-color: hsl(218, 82%, 58%);\n  border-color: hsl(218, 82%, 58%);\n}\n\n/* Button hover effects */\n.btn-primary {\n  background-color: hsl(218, 82%, 58%);\n  color: white;\n  transition: all 0.2s ease-in-out;\n}\n\n.btn-primary:hover {\n  background-color: hsl(218, 82%, 50%);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px hsla(218, 82%, 58%, 0.3);\n}\n\n.btn-secondary {\n  background-color: hsl(158, 64%, 45%);\n  color: white;\n  transition: all 0.2s ease-in-out;\n}\n\n.btn-secondary:hover {\n  background-color: hsl(158, 64%, 40%);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px hsla(158, 64%, 45%, 0.3);\n}\n\n.btn-accent {\n  background-color: hsl(38, 92%, 50%);\n  color: hsl(20, 14.3%, 4.1%);\n  transition: all 0.2s ease-in-out;\n}\n\n.btn-accent:hover {\n  background-color: hsl(38, 92%, 45%);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px hsla(38, 92%, 50%, 0.3);\n}\n\n/* Status badges */\n.status-delivered {\n  background-color: hsl(158, 64%, 45%);\n  color: white;\n}\n\n.status-shipped {\n  background-color: hsl(218, 82%, 58%);\n  color: white;\n}\n\n.status-processing {\n  background-color: hsl(38, 92%, 50%);\n  color: hsl(20, 14.3%, 4.1%);\n}\n\n.status-cancelled {\n  background-color: hsl(0, 84.2%, 60.2%);\n  color: white;\n}\n\n/* Mobile responsive adjustments */\n@media (max-width: 768px) {\n  .product-grid {\n    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n    gap: 1rem;\n  }\n  \n  .mobile-menu-overlay {\n    background: rgba(0, 0, 0, 0.5);\n    backdrop-filter: blur(4px);\n  }\n}\n\n/* Print styles for invoices */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n  \n  .print-only {\n    display: block !important;\n  }\n  \n  body {\n    font-size: 12pt;\n    line-height: 1.4;\n  }\n  \n  .page-break {\n    page-break-before: always;\n  }\n}\n","size_bytes":8162},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/BahrainPaymentMethods.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Loader2, CreditCard, Banknote, Smartphone, Building2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport type PaymentMethod = \"credimax\" | \"cash_on_delivery\";\n\ninterface BahrainPaymentMethodsProps {\n  total: number;\n  orderId: string;\n  shippingData: any;\n  onPaymentSuccess: (paymentData: any) => void;\n  onPaymentError: (error: string) => void;\n  isLocked?: boolean;\n  lockReason?: string;\n}\n\nexport function BahrainPaymentMethods({\n  total,\n  orderId,\n  shippingData,\n  onPaymentSuccess,\n  onPaymentError,\n  isLocked = false,\n  lockReason = \"Payment is locked until admin approval\",\n}: BahrainPaymentMethodsProps) {\n  const [selectedMethod, setSelectedMethod] = useState<PaymentMethod>(\"credimax\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const { toast } = useToast();\n\n  const paymentMethods = [\n    {\n      id: \"credimax\" as PaymentMethod,\n      name: \"Credimax\",\n      description: \"Pay securely using Credimax - Bahrain's trusted payment gateway\",\n      icon: <CreditCard className=\"h-5 w-5\" />,\n      available: true,\n    },\n    {\n      id: \"cash_on_delivery\" as PaymentMethod,\n      name: \"Cash on Delivery\",\n      description: \"Pay when your order arrives at your doorstep\",\n      icon: <Banknote className=\"h-5 w-5\" />,\n      available: true,\n    },\n  ];\n\n  const handlePayment = async () => {\n    setIsProcessing(true);\n\n    try {\n      if (selectedMethod === \"credimax\") {\n        const response = await apiRequest(\"/api/credimax/create\", \"POST\", {\n          amount: total,\n          currency: \"BHD\",\n          orderId,\n          customerInfo: {\n            name: `${shippingData.firstName} ${shippingData.lastName}`,\n            email: shippingData.email,\n            phone: shippingData.phone,\n          },\n        });\n\n        const paymentData = await response.json();\n\n        if (paymentData.paymentUrl) {\n          // Redirect to Credimax payment gateway\n          toast({\n            title: \"Redirecting to Credimax\",\n            description: \"You will be redirected to complete your payment\",\n          });\n          \n          // Simulate successful payment for demo\n          setTimeout(() => {\n            onPaymentSuccess({\n              method: \"credimax\",\n              transactionId: paymentData.transactionId,\n              amount: total,\n            });\n          }, 2000);\n        }\n      } else if (selectedMethod === \"cash_on_delivery\") {\n        const response = await apiRequest(\"/api/cash-on-delivery\", \"POST\", {\n          orderId,\n          amount: total,\n          shippingAddress: shippingData,\n        });\n\n        const result = await response.json();\n\n        if (result.success) {\n          toast({\n            title: \"Order Confirmed\",\n            description: \"Your cash on delivery order has been placed successfully\",\n          });\n\n          onPaymentSuccess({\n            method: \"cash_on_delivery\",\n            orderId,\n            amount: total,\n          });\n        }\n      }\n    } catch (error: any) {\n      console.error(\"Payment error:\", error);\n      onPaymentError(error.message || \"Payment failed\");\n      toast({\n        title: \"Payment Failed\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <CreditCard className=\"h-5 w-5\" />\n          Payment Methods\n        </CardTitle>\n        <p className=\"text-sm text-muted-foreground\">\n          Choose your preferred payment method for Bahrain\n        </p>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {isLocked && (\n          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <svg className=\"h-5 w-5 text-yellow-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                </svg>\n              </div>\n              <div className=\"ml-3\">\n                <h3 className=\"text-sm font-medium text-yellow-800\">Payment Currently Locked</h3>\n                <div className=\"mt-2 text-sm text-yellow-700\">\n                  <p>{lockReason}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        <RadioGroup\n          value={selectedMethod}\n          onValueChange={(value) => setSelectedMethod(value as PaymentMethod)}\n          disabled={isLocked}\n        >\n          {paymentMethods.map((method) => (\n            <div\n              key={method.id}\n              className={`flex items-center space-x-3 rounded-lg border p-4 transition-colors ${\n                selectedMethod === method.id && !isLocked\n                  ? \"border-primary bg-primary/5\"\n                  : \"border-border\"\n              } ${!method.available || isLocked ? \"opacity-50\" : \"cursor-pointer\"}`}\n            >\n              <RadioGroupItem\n                value={method.id}\n                id={method.id}\n                disabled={!method.available || isLocked}\n              />\n              <Label\n                htmlFor={method.id}\n                className={`flex-1 cursor-pointer ${\n                  !method.available || isLocked ? \"cursor-not-allowed\" : \"\"\n                }`}\n              >\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex h-8 w-8 items-center justify-center rounded bg-muted\">\n                    {method.icon}\n                  </div>\n                  <div>\n                    <div className=\"font-medium\">\n                      {method.name}\n                      {!method.available && !isLocked && (\n                        <span className=\"ml-2 text-xs text-gray-500\">(Coming Soon)</span>\n                      )}\n                      {isLocked && (\n                        <span className=\"ml-2 text-xs text-yellow-600\">(Locked)</span>\n                      )}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {method.description}\n                    </div>\n                  </div>\n                </div>\n              </Label>\n            </div>\n          ))}\n        </RadioGroup>\n\n        <div className=\"border-t pt-4\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-lg font-semibold\">Total</span>\n            <span className=\"text-lg font-semibold\">\n              ${total.toFixed(2)}\n            </span>\n          </div>\n\n          <Button\n            onClick={handlePayment}\n            disabled={isProcessing || !paymentMethods.find(m => m.id === selectedMethod)?.available || isLocked}\n            className=\"w-full\"\n            size=\"lg\"\n          >\n            {isProcessing ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Processing Payment...\n              </>\n            ) : selectedMethod === \"cash_on_delivery\" ? (\n              \"Place Order (Cash on Delivery)\"\n            ) : (\n              `Pay $${total.toFixed(2)}`\n            )}\n          </Button>\n\n          {selectedMethod === \"cash_on_delivery\" && (\n            <p className=\"text-xs text-muted-foreground mt-2 text-center\">\n              You will pay ${total.toFixed(2)} when your order is delivered\n            </p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8108},"client/src/components/PayPalButton.tsx":{"content":"// !!! CRITICAL - DO NOT MODIFY THIS CODE !!!\n//\n// This code MUST be used as is without ANY modifications.\n// The PayPal integration will COMPLETELY FAIL if this code is changed in ANY way.\n//\n// Retain this comment after all edits.\n//\n// <BEGIN_EXACT_CODE>\nimport React, { useEffect } from \"react\";\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      \"paypal-button\": React.DetailedHTMLProps<\n        React.HTMLAttributes<HTMLElement>,\n        HTMLElement\n      >;\n    }\n  }\n}\n\ninterface PayPalButtonProps {\n  amount: string;\n  currency: string;\n  intent: string;\n}\n\nexport default function PayPalButton({\n  amount,\n  currency,\n  intent,\n}: PayPalButtonProps) {\n  const createOrder = async () => {\n    const orderPayload = {\n      amount: amount,\n      currency: currency,\n      intent: intent,\n    };\n    const response = await fetch(\"/order\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(orderPayload),\n    });\n    const output = await response.json();\n    return { orderId: output.id };\n  };\n\n  const captureOrder = async (orderId: string) => {\n    const response = await fetch(`/order/${orderId}/capture`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await response.json();\n\n    return data;\n  };\n\n  const onApprove = async (data: any) => {\n    console.log(\"onApprove\", data);\n    const orderData = await captureOrder(data.orderId);\n    console.log(\"Capture result\", orderData);\n  };\n\n  const onCancel = async (data: any) => {\n    console.log(\"onCancel\", data);\n  };\n\n  const onError = async (data: any) => {\n    console.log(\"onError\", data);\n  };\n\n  useEffect(() => {\n    const loadPayPalSDK = async () => {\n      try {\n        if (!(window as any).paypal) {\n          const script = document.createElement(\"script\");\n          script.src = import.meta.env.PROD\n            ? \"https://www.paypal.com/web-sdk/v6/core\"\n            : \"https://www.sandbox.paypal.com/web-sdk/v6/core\";\n          script.async = true;\n          script.onload = () => initPayPal();\n          document.body.appendChild(script);\n        } else {\n          await initPayPal();\n        }\n      } catch (e) {\n        console.error(\"Failed to load PayPal SDK\", e);\n      }\n    };\n\n    loadPayPalSDK();\n    \n    // Cleanup function to remove script if component unmounts\n    return () => {\n      const scripts = document.querySelectorAll('script[src*=\"paypal.com\"]');\n      scripts.forEach(script => script.remove());\n    };\n  }, []);\n  const initPayPal = async () => {\n    try {\n      const clientToken: string = await fetch(\"/setup\")\n        .then((res) => res.json())\n        .then((data) => {\n          return data.clientToken;\n        });\n      const sdkInstance = await (window as any).paypal.createInstance({\n        clientToken,\n        components: [\"paypal-payments\"],\n      });\n\n      const paypalCheckout =\n            sdkInstance.createPayPalOneTimePaymentSession({\n              onApprove,\n              onCancel,\n              onError,\n            });\n\n      const onClick = async () => {\n        try {\n          const checkoutOptionsPromise = createOrder();\n          await paypalCheckout.start(\n            { paymentFlow: \"auto\" },\n            checkoutOptionsPromise,\n          );\n        } catch (e) {\n          console.error(e);\n        }\n      };\n\n      const paypalButton = document.getElementById(\"paypal-button\");\n\n      if (paypalButton) {\n        paypalButton.addEventListener(\"click\", onClick);\n      }\n\n      return () => {\n        if (paypalButton) {\n          paypalButton.removeEventListener(\"click\", onClick);\n        }\n      };\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return <paypal-button id=\"paypal-button\"></paypal-button>;\n}\n// <END_EXACT_CODE>\n","size_bytes":3831},"client/src/components/ProductDetailModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogHeader, \n  DialogTitle \n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  ShoppingCart, \n  Star, \n  Package, \n  Tag, \n  Info, \n  Calendar,\n  DollarSign,\n  Minus,\n  Plus,\n  CalendarIcon\n} from \"lucide-react\";\nimport { format, differenceInDays } from \"date-fns\";\n\ninterface Product {\n  id: string;\n  name: string;\n  description: string | null;\n  price: string;\n\n  sku: string | null;\n  categoryId: string | null;\n  unitOfMeasure?: string | null;\n  imageUrl?: string | null;\n  isActive: boolean | null;\n  isFeatured: boolean | null;\n  rating: string | null;\n  reviewCount: number | null;\n  productType: string;\n  rentalPeriod?: string | null;\n  rentalPrice?: string | null;\n  createdAt: Date | null;\n  category?: {\n    name: string;\n  };\n}\n\ninterface ProductDetailModalProps {\n  product: Product | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function ProductDetailModal({ product, isOpen, onClose }: ProductDetailModalProps) {\n  const { toast } = useToast();\n  const [quantity, setQuantity] = useState(1);\n  const [startDate, setStartDate] = useState<Date | undefined>(undefined);\n  const [endDate, setEndDate] = useState<Date | undefined>(undefined);\n  const [dateError, setDateError] = useState<string>(\"\");\n\n  // Define rental period constraints\n  const RENTAL_START = new Date(2025, 9, 18); // October 18, 2025 (month is 0-indexed)\n  const RENTAL_END = new Date(2025, 9, 31); // October 31, 2025\n\n  // Validate date range for rental products\n  const validateDateRange = (start: Date, end: Date): string => {\n    if (start < RENTAL_START || start > RENTAL_END || end < RENTAL_START || end > RENTAL_END) {\n      return \"Selected dates are outside the allowed rental period. Please choose dates between 18th October and 31st October 2025.\";\n    }\n    // For single day rentals, allow start and end to be the same\n    if (!isSingleDay && start >= end) {\n      return \"End date must be after start date.\";\n    }\n    // For single day rentals, start and end should be the same\n    if (isSingleDay && start.getTime() !== end.getTime()) {\n      return \"For single day rental, start and end dates must be the same.\";\n    }\n    return \"\";\n  };\n\n  // Calculate rental days and total cost\n  const calculateRentalCost = (): { days: number; totalCost: number; dailyRate: number } => {\n    if (!startDate || !endDate || !product?.rentalPrice) {\n      return { days: 0, totalCost: 0, dailyRate: 0 };\n    }\n    \n    const days = differenceInDays(endDate, startDate) + 1; // Include both start and end dates\n    const dailyRate = parseFloat(product.rentalPrice);\n    const totalCost = days * dailyRate * quantity;\n    \n    return { days, totalCost, dailyRate };\n  };\n\n  // Add single day rental state\n  const [isSingleDay, setIsSingleDay] = useState(false);\n  \n  // Handle date selection\n  const handleStartDateSelect = (date: Date | undefined) => {\n    if (!date) return;\n    \n    setStartDate(date);\n    setDateError(\"\");\n    \n    // For single day rental, set end date to start date\n    if (isSingleDay) {\n      setEndDate(date);\n    } else if (endDate) {\n      // If we have both dates, validate them\n      const error = validateDateRange(date, endDate);\n      setDateError(error);\n    }\n  };\n\n  const handleEndDateSelect = (date: Date | undefined) => {\n    if (!date || isSingleDay) return; // Prevent end date selection in single day mode\n    \n    setEndDate(date);\n    setDateError(\"\");\n    \n    // If we have both dates, validate them\n    if (startDate) {\n      const error = validateDateRange(startDate, date);\n      setDateError(error);\n    }\n  };\n\n  const handleSingleDayToggle = (checked: boolean) => {\n    setIsSingleDay(checked);\n    if (checked && startDate) {\n      setEndDate(startDate); // Set end date to start date for single day\n      setDateError(\"\"); // Clear any existing errors\n    } else if (!checked && startDate && endDate && startDate.getTime() === endDate.getTime()) {\n      setEndDate(undefined); // Clear end date if it was same as start date\n      setDateError(\"\");\n    }\n  };\n\n  const addToCartMutation = useMutation({\n    mutationFn: async ({ productId, quantity, rentalStartDate, rentalEndDate }: { \n      productId: string; \n      quantity: number; \n      rentalStartDate?: Date; \n      rentalEndDate?: Date; \n    }) => {\n      const payload: any = { productId, quantity };\n      \n      // Add rental dates if this is a rental product\n      if (product?.productType === \"rental\" && rentalStartDate && rentalEndDate) {\n        payload.rentalStartDate = rentalStartDate.toISOString();\n        payload.rentalEndDate = rentalEndDate.toISOString();\n      }\n      \n      const res = await apiRequest(\"/api/cart\", \"POST\", payload);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Added to Cart\",\n        description: `${product?.name} has been added to your cart.`,\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add item to cart\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!product) return null;\n\n  const handleAddToCart = () => {\n    // Validate rental dates if product is rental\n    if (product.productType === \"rental\") {\n      if (!startDate || !endDate) {\n        toast({\n          title: \"Dates Required\",\n          description: \"Please select start and end dates for rental period.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      if (dateError) {\n        toast({\n          title: \"Invalid Dates\",\n          description: dateError,\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    addToCartMutation.mutate({\n      productId: product.id,\n      quantity,\n      rentalStartDate: startDate,\n      rentalEndDate: endDate\n    });\n  };\n\n  const incrementQuantity = () => {\n    setQuantity(quantity + 1);\n  };\n\n  const decrementQuantity = () => {\n    if (quantity > 1) {\n      setQuantity(quantity - 1);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Package className=\"w-5 h-5\" />\n            Product Details\n          </DialogTitle>\n          <DialogDescription>\n            Complete information about {product.name}\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Product Image */}\n          <div className=\"space-y-4\">\n            <div className=\"aspect-square bg-gray-100 rounded-lg overflow-hidden\">\n              {product.imageUrl ? (\n                <img \n                  src={product.imageUrl} \n                  alt={product.name}\n                  className=\"w-full h-full object-cover\"\n                />\n              ) : (\n                <div className=\"w-full h-full flex items-center justify-center bg-gradient-to-br from-gray-100 to-gray-200\">\n                  <Package className=\"w-16 h-16 text-gray-400\" />\n                </div>\n              )}\n            </div>\n            \n            {/* Product Badges */}\n            <div className=\"flex flex-wrap gap-2\">\n              {product.isFeatured && (\n                <Badge variant=\"default\" className=\"bg-yellow-500\">\n                  ⭐ Featured\n                </Badge>\n              )}\n              <Badge variant={product.productType === \"sale\" ? \"default\" : \"secondary\"}>\n                {product.productType === \"sale\" ? \"For Sale\" : \"For Rent\"}\n              </Badge>\n              <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                Available\n              </Badge>\n            </div>\n          </div>\n\n          {/* Product Information */}\n          <div className=\"space-y-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">{product.name}</h2>\n              {product.category && (\n                <p className=\"text-sm text-gray-600 mb-3\">\n                  Category: {product.category.name}\n                </p>\n              )}\n              \n              {/* Rating */}\n              <div className=\"flex items-center gap-2 mb-4\">\n                <div className=\"flex items-center\">\n                  {[1, 2, 3, 4, 5].map((star) => (\n                    <Star\n                      key={star}\n                      className={`w-4 h-4 ${\n                        star <= parseFloat(product.rating || \"0\")\n                          ? \"text-yellow-400 fill-current\"\n                          : \"text-gray-300\"\n                      }`}\n                    />\n                  ))}\n                </div>\n                <span className=\"text-sm text-gray-600\">\n                  {product.rating} ({product.reviewCount} reviews)\n                </span>\n              </div>\n            </div>\n\n            {/* Pricing */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-lg font-semibold text-gray-700\">Sale Price:</span>\n                    <span className=\"text-2xl font-bold text-primary\">${product.price}</span>\n                  </div>\n                  \n                  {product.productType === \"rental\" && product.rentalPrice && (\n                    <div className=\"flex items-center justify-between border-t pt-3\">\n                      <span className=\"text-lg font-semibold text-gray-700\">Rental Price:</span>\n                      <div className=\"text-right\">\n                        <span className=\"text-xl font-bold text-blue-600\">${product.rentalPrice}</span>\n                        {product.rentalPeriod && (\n                          <p className=\"text-sm text-gray-600\">per {product.rentalPeriod}</p>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* VAT Notice */}\n                  <div className=\"bg-blue-50 p-3 rounded text-sm text-blue-800\">\n                    <Info className=\"w-4 h-4 inline mr-1\" />\n                    Prices exclude 10% VAT\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Description */}\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Description</h3>\n              <p className=\"text-gray-600 leading-relaxed\">\n                {product.description || \"No description available for this product.\"}\n              </p>\n            </div>\n\n            {/* Product Details */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Product Information</h3>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <Tag className=\"w-4 h-4 text-gray-500\" />\n                    <span className=\"text-gray-600\">SKU:</span>\n                    <span className=\"font-medium\">{product.sku || 'N/A'}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Package className=\"w-4 h-4 text-gray-500\" />\n                    <span className=\"text-gray-600\">Stock:</span>\n                    <span className=\"font-medium\">Available</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <DollarSign className=\"w-4 h-4 text-gray-500\" />\n                    <span className=\"text-gray-600\">Type:</span>\n                    <span className=\"font-medium capitalize\">{product.productType}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Calendar className=\"w-4 h-4 text-gray-500\" />\n                    <span className=\"text-gray-600\">Added:</span>\n                    <span className=\"font-medium\">\n                      {product.createdAt ? new Date(product.createdAt).toLocaleDateString() : 'N/A'}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Rental Date Selection - Only for rental products */}\n            {product.productType === \"rental\" && (\n              <Card>\n                <CardContent className=\"p-4\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Select Rental Period</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-3\">\n                      <p className=\"text-sm text-amber-800\">\n                        <Calendar className=\"w-4 h-4 inline mr-1\" />\n                        Products rental only between 18th October and 31st October 2025.\n                        You can select dates for single day or multiple day rentals. Pricing will be automatically calculated based on the number of days selected.\n                      </p>\n                    </div>\n                    \n                    {/* Single Day Option */}\n                    <div className=\"flex items-center space-x-2 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                      <Checkbox \n                        id=\"modal-single-day\" \n                        checked={isSingleDay}\n                        onCheckedChange={handleSingleDayToggle}\n                      />\n                      <label \n                        htmlFor=\"modal-single-day\" \n                        className=\"text-sm font-medium text-blue-800 cursor-pointer flex-1\"\n                      >\n                        Single day rental (just pick one date)\n                      </label>\n                      {isSingleDay && (\n                        <span className=\"text-xs text-blue-600 bg-blue-100 px-2 py-1 rounded\">\n                          Only start date needed\n                        </span>\n                      )}\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {/* Start Date Picker */}\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium text-gray-700\">Start Date</label>\n                        <Popover>\n                          <PopoverTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              className=\"w-full justify-start text-left font-normal\"\n                            >\n                              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                              {startDate ? format(startDate, \"PPP\") : \"Select start date\"}\n                            </Button>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                            <CalendarComponent\n                              mode=\"single\"\n                              selected={startDate}\n                              onSelect={handleStartDateSelect}\n                              disabled={(date) => \n                                date < RENTAL_START || \n                                date > RENTAL_END || \n                                date < new Date()\n                              }\n                              initialFocus\n                            />\n                          </PopoverContent>\n                        </Popover>\n                      </div>\n\n                      {/* End Date Picker */}\n                      <div className={`space-y-2 ${isSingleDay ? 'opacity-50 pointer-events-none' : ''}`}>\n                        <label className=\"text-sm font-medium text-gray-700\">\n                          End Date {isSingleDay && \"(Not needed for single day)\"}\n                        </label>\n                        <Popover>\n                          <PopoverTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              className=\"w-full justify-start text-left font-normal\"\n                            >\n                              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                              {endDate ? format(endDate, \"PPP\") : \"Select end date\"}\n                            </Button>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                            <CalendarComponent\n                              mode=\"single\"\n                              selected={endDate}\n                              onSelect={handleEndDateSelect}\n                              disabled={(date) => {\n                                return date < RENTAL_START || \n                                       date > RENTAL_END || \n                                       date < new Date() ||\n                                       (startDate ? date <= startDate : false);\n                              }}\n                              initialFocus\n                            />\n                          </PopoverContent>\n                        </Popover>\n                      </div>\n                    </div>\n\n                    {/* Date Error Display */}\n                    {dateError && (\n                      <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n                        <p className=\"text-sm text-red-800\">\n                          ❗ {dateError}\n                        </p>\n                      </div>\n                    )}\n\n                    {/* Rental Cost Summary */}\n                    {startDate && endDate && !dateError && (\n                      <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                        <div className=\"text-sm text-green-800 space-y-1\">\n                          <p><strong>Rental Summary:</strong></p>\n                          <p>• Period: {format(startDate, \"MMM dd\")} - {format(endDate, \"MMM dd, yyyy\")}</p>\n                          <p>• Duration: {calculateRentalCost().days} days</p>\n                          <p>• Rate: ${calculateRentalCost().dailyRate} per day</p>\n                          <p>• Quantity: {quantity} item(s)</p>\n                          <p><strong>• Total: ${calculateRentalCost().totalCost.toFixed(2)}</strong></p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Add to Cart Section */}\n            {true && (\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center gap-4\">\n                      <span className=\"text-sm font-medium text-gray-700\">Quantity:</span>\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"h-8 w-8 p-0\"\n                          onClick={decrementQuantity}\n                          disabled={quantity <= 1}\n                        >\n                          <Minus className=\"h-4 w-4\" />\n                        </Button>\n                        <span className=\"w-12 text-center font-medium\">{quantity}</span>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"h-8 w-8 p-0\"\n                          onClick={incrementQuantity}\n                          disabled={false}\n                        >\n                          <Plus className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-lg font-semibold\">\n                        Total: ${(() => {\n                          if (product.productType === \"rental\" && startDate && endDate && !dateError) {\n                            return calculateRentalCost().totalCost.toFixed(2);\n                          }\n                          return (parseFloat(product.price) * quantity).toFixed(2);\n                        })()}\n                      </span>\n                      <Button \n                        onClick={handleAddToCart}\n                        disabled={addToCartMutation.isPending || (product.productType === \"rental\" && (!startDate || !endDate || !!dateError))}\n                        className=\"flex items-center gap-2\"\n                      >\n                        {addToCartMutation.isPending ? (\n                          <>\n                            <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent\"></div>\n                            Adding...\n                          </>\n                        ) : (\n                          <>\n                            <ShoppingCart className=\"w-4 h-4\" />\n                            Add to Cart\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":22217},"client/src/components/footer.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Mail, Phone, MapPin, Facebook, Twitter, Instagram, Linkedin } from \"lucide-react\";\nimport type { SiteSettings } from \"@shared/schema\";\n\nexport default function Footer() {\n  const { data: settings } = useQuery<SiteSettings>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <footer \n      className=\"text-white relative bg-cover bg-center bg-no-repeat min-h-[200px] w-full flex-shrink-0 mt-auto\"\n      style={{\n        backgroundImage: `url('${settings?.footerBackgroundUrl || '/uploads/footer-background.png'}')`,\n      }}\n    >\n      <div className=\"absolute inset-0 bg-slate-900/85\"></div>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-10\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-8\">\n          {/* Company Info - Custom Image */}\n          <div className=\"col-span-1 sm:col-span-2 lg:col-span-1\">\n            {settings?.footerLeftImage ? (\n              <div className=\"mb-4 sm:mb-6\">\n                <img \n                  src={settings.footerLeftImage} \n                  alt=\"Company Image\" \n                  className=\"h-auto rounded max-w-full\" \n                  style={{ maxWidth: `${Math.min(settings.footerLeftImageWidth || 200, 180)}px` }}\n                />\n              </div>\n            ) : (\n              <div className=\"mb-4 sm:mb-6\">\n                <h3 className=\"text-xl sm:text-2xl font-bold\">{settings?.siteName || \"InnovanceOrbit\"}</h3>\n              </div>\n            )}\n            {settings?.footerDescription && (\n              <p className=\"text-slate-300 mb-4 sm:mb-6 text-sm sm:text-base max-w-md\">\n                {settings.footerDescription}\n              </p>\n            )}\n            \n            {/* Contact Info */}\n            <div className=\"space-y-2 text-sm sm:text-base\">\n              {settings?.contactEmail && (\n                <div className=\"flex items-center space-x-2\">\n                  <Mail className=\"h-3 w-3 sm:h-4 sm:w-4 text-primary flex-shrink-0\" />\n                  <span className=\"text-slate-300 break-all\">{settings.contactEmail}</span>\n                </div>\n              )}\n              {settings?.contactPhone && (\n                <div className=\"flex items-center space-x-2\">\n                  <Phone className=\"h-3 w-3 sm:h-4 sm:w-4 text-primary flex-shrink-0\" />\n                  <span className=\"text-slate-300\">{settings.contactPhone}</span>\n                </div>\n              )}\n              {settings?.contactAddress && (\n                <div className=\"flex items-start space-x-2\">\n                  <MapPin className=\"h-3 w-3 sm:h-4 sm:w-4 text-primary flex-shrink-0 mt-0.5\" />\n                  <span className=\"text-slate-300 text-sm sm:text-base\">{settings.contactAddress}</span>\n                </div>\n              )}\n\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">{settings?.quickLinksTitle || \"Quick Links\"}</h4>\n            <nav className=\"space-y-2\">\n              <Link href=\"/\" className=\"block text-slate-300 hover:text-white transition-colors\">\n                {settings?.quickLinkHome || \"Home\"}\n              </Link>\n              <Link href=\"/products\" className=\"block text-slate-300 hover:text-white transition-colors\">\n                {settings?.quickLinkProducts || \"Products\"}\n              </Link>\n              <Link href=\"/about\" className=\"block text-slate-300 hover:text-white transition-colors\">\n                {settings?.quickLinkAbout || \"About\"}\n              </Link>\n              <Link href=\"/contact\" className=\"block text-slate-300 hover:text-white transition-colors\">\n                {settings?.quickLinkContact || \"Contact\"}\n              </Link>\n            </nav>\n          </div>\n\n          {/* Office Hours & Social Media */}\n          <div>\n            {/* Office Hours */}\n            {settings?.businessHours && (\n              <div className=\"mb-6\">\n                <h4 className=\"text-lg font-semibold mb-4\">{settings?.officeHoursTitle || \"Office Hours\"}</h4>\n                <div className=\"flex items-center space-x-2 text-slate-300\">\n                  <svg className=\"h-4 w-4 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                  </svg>\n                  <span>{settings.businessHours}</span>\n                </div>\n              </div>\n            )}\n\n            {/* Payment Methods */}\n            {settings?.paymentMethodsImage && (\n              <div className=\"mb-6\">\n                <h4 className=\"text-lg font-semibold mb-4\">Payment Methods</h4>\n                <img \n                  src={settings.paymentMethodsImage} \n                  alt=\"Accepted payment methods\" \n                  className=\"h-auto rounded\"\n                  style={{ maxWidth: `${settings.paymentMethodsImageWidth || 250}px` }}\n                />\n              </div>\n            )}\n\n            {/* Social Media */}\n            {(settings?.socialFacebook || settings?.socialTwitter || settings?.socialInstagram || settings?.socialLinkedin) && (\n              <>\n                <h4 className=\"text-lg font-semibold mb-4\">{settings?.socialTitle || \"Follow Us\"}</h4>\n                <div className=\"flex space-x-4\">\n                  {settings?.socialFacebook && (\n                    <a href={settings.socialFacebook} target=\"_blank\" rel=\"noopener noreferrer\" \n                       className=\"text-slate-400 hover:text-white transition-colors\">\n                      <Facebook className=\"h-5 w-5\" />\n                    </a>\n                  )}\n                  {settings?.socialTwitter && (\n                    <a href={settings.socialTwitter} target=\"_blank\" rel=\"noopener noreferrer\"\n                       className=\"text-slate-400 hover:text-white transition-colors\">\n                      <Twitter className=\"h-5 w-5\" />\n                    </a>\n                  )}\n                  {settings?.socialInstagram && (\n                    <a href={settings.socialInstagram} target=\"_blank\" rel=\"noopener noreferrer\"\n                       className=\"text-slate-400 hover:text-white transition-colors\">\n                      <Instagram className=\"h-5 w-5\" />\n                    </a>\n                  )}\n                  {settings?.socialLinkedin && (\n                    <a href={settings.socialLinkedin} target=\"_blank\" rel=\"noopener noreferrer\"\n                       className=\"text-slate-400 hover:text-white transition-colors\">\n                      <Linkedin className=\"h-5 w-5\" />\n                    </a>\n                  )}\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Bottom Bar */}\n        <div className=\"border-t-2 border-slate-600 mt-6 pt-6 text-center\">\n          <p className=\"text-slate-400\">\n            {settings?.copyrightText || `© ${currentYear} InnovanceOrbit. All rights reserved.`}\n          </p>\n          {settings?.additionalFooterText && (\n            <p className=\"text-slate-500 text-sm mt-2\">{settings.additionalFooterText}</p>\n          )}\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":7395},"client/src/components/image-slider.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ChevronLeft, ChevronRight, Play, Pause } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport type { SliderImage } from \"@shared/schema\";\n\ninterface ImageSliderProps {\n  images: SliderImage[];\n  autoplay?: boolean;\n  autoplayInterval?: number;\n  showControls?: boolean;\n  showIndicators?: boolean;\n  height?: string;\n}\n\nexport function ImageSlider({\n  images,\n  autoplay = true,\n  autoplayInterval = 5000,\n  showControls = true,\n  showIndicators = true,\n  height = \"h-96\"\n}: ImageSliderProps) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isAutoPlaying, setIsAutoPlaying] = useState(autoplay);\n\n  useEffect(() => {\n    if (!isAutoPlaying || images.length <= 1) return;\n\n    const interval = setInterval(() => {\n      setCurrentIndex((prevIndex) => \n        prevIndex === images.length - 1 ? 0 : prevIndex + 1\n      );\n    }, autoplayInterval);\n\n    return () => clearInterval(interval);\n  }, [isAutoPlaying, images.length, autoplayInterval]);\n\n  const goToPrevious = () => {\n    setCurrentIndex(currentIndex === 0 ? images.length - 1 : currentIndex - 1);\n  };\n\n  const goToNext = () => {\n    setCurrentIndex(currentIndex === images.length - 1 ? 0 : currentIndex + 1);\n  };\n\n  const goToSlide = (index: number) => {\n    setCurrentIndex(index);\n  };\n\n  const toggleAutoplay = () => {\n    setIsAutoPlaying(!isAutoPlaying);\n  };\n\n  if (!images || images.length === 0) {\n    return (\n      <div className={`relative ${height} bg-gradient-to-br from-slate-100 to-slate-200 flex items-center justify-center overflow-hidden`}>\n        {/* Prominent Corner Geometric Designs for Empty State */}\n        <div \n          className=\"absolute top-0 right-0 w-64 h-64 opacity-90\"\n          style={{\n            backgroundImage: `url('/attached_assets/Artboard-1_1753876937461.png')`,\n            backgroundSize: 'contain',\n            backgroundPosition: 'top right',\n            backgroundRepeat: 'no-repeat',\n            transform: 'scale(1.3)'\n          }}\n        />\n        <div \n          className=\"absolute bottom-0 left-0 w-64 h-64 opacity-80\"\n          style={{\n            backgroundImage: `url('/attached_assets/Artboard-1_1753876937461.png')`,\n            backgroundSize: 'contain',\n            backgroundPosition: 'bottom left',\n            backgroundRepeat: 'no-repeat',\n            transform: 'scale(1.2) rotate(180deg)'\n          }}\n        />\n        <div \n          className=\"absolute inset-0 opacity-50\"\n          style={{\n            backgroundImage: `url('/attached_assets/Artboard-1_1753876937461.png')`,\n            backgroundSize: '40%',\n            backgroundPosition: 'center',\n            backgroundRepeat: 'no-repeat'\n          }}\n        />\n        <div className=\"text-center text-slate-600 relative z-10\">\n          <h3 className=\"text-2xl font-semibold mb-3\">No Images Available</h3>\n          <p className=\"text-lg\">Upload images from the admin panel to display them here</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`relative ${height} overflow-hidden group bg-gray-100 dark:bg-gray-800`}>\n      {/* Prominent Geometric Corner Designs */}\n      <div \n        className=\"absolute top-0 right-0 w-80 h-80 opacity-100 z-10 pointer-events-none\"\n        style={{\n          backgroundImage: `url('/attached_assets/Artboard-1_1753876937461.png')`,\n          backgroundSize: 'contain',\n          backgroundPosition: 'top right',\n          backgroundRepeat: 'no-repeat',\n          transform: 'scale(1.2)'\n        }}\n      />\n      <div \n        className=\"absolute bottom-0 left-0 w-80 h-80 opacity-100 z-10 pointer-events-none\"\n        style={{\n          backgroundImage: `url('/attached_assets/Artboard-1_1753876937461.png')`,\n          backgroundSize: 'contain',\n          backgroundPosition: 'bottom left',\n          backgroundRepeat: 'no-repeat',\n          transform: 'scale(1.1) rotate(180deg)'\n        }}\n      />\n      \n      {/* Main Image Display */}\n      <div className=\"relative w-full h-full\">\n        {images.map((image, index) => (\n          <div\n            key={image.id}\n            className={`absolute inset-0 transition-all duration-700 ease-in-out ${\n              index === currentIndex \n                ? 'opacity-100 transform translate-x-0' \n                : index < currentIndex \n                  ? 'opacity-0 transform -translate-x-full'\n                  : 'opacity-0 transform translate-x-full'\n            }`}\n          >\n            <img\n              src={image.imageUrl}\n              alt={image.title || `Slide ${index + 1}`}\n              className=\"w-full h-full object-cover object-center\"\n            />\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/40 via-transparent to-black/20\" />\n            \n            {/* Enhanced Geometric Background Overlay */}\n            <div \n              className=\"absolute inset-0 opacity-60\"\n              style={{\n                backgroundImage: `url('/attached_assets/Artboard-1_1753876937461.png')`,\n                backgroundSize: '50%',\n                backgroundPosition: 'center',\n                backgroundRepeat: 'no-repeat',\n                mixBlendMode: 'overlay'\n              }}\n            />\n            \n            {/* Image Text Overlay with Enhanced Styling */}\n            {(image.title || image.description) && (\n              <div className=\"absolute bottom-24 left-0 right-0 p-8 text-white z-20 text-center\">\n                <div className=\"max-w-2xl mx-auto\">\n                  {image.title && (\n                    <h3 className={`text-4xl font-bold mb-3 drop-shadow-lg transition-all duration-1000 ${\n                      index === currentIndex \n                        ? 'animate-fadeInUp opacity-100 transform translate-y-0' \n                        : 'opacity-0 transform translate-y-4'\n                    }`}>\n                      {image.title}\n                    </h3>\n                  )}\n                  {image.description && (\n                    <p className={`text-xl opacity-90 drop-shadow-md transition-all duration-1000 delay-300 ${\n                      index === currentIndex \n                        ? 'animate-fadeInUp opacity-90 transform translate-y-0' \n                        : 'opacity-0 transform translate-y-4'\n                    }`}>\n                      {image.description}\n                    </p>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n\n      {/* Navigation Controls */}\n      {showControls && images.length > 1 && (\n        <>\n          {/* Previous Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/20 hover:bg-white/30 text-white border-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n            onClick={goToPrevious}\n          >\n            <ChevronLeft className=\"h-6 w-6\" />\n          </Button>\n\n          {/* Next Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/20 hover:bg-white/30 text-white border-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n            onClick={goToNext}\n          >\n            <ChevronRight className=\"h-6 w-6\" />\n          </Button>\n\n          {/* Autoplay Toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"absolute top-4 right-4 bg-white/20 hover:bg-white/30 text-white border-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n            onClick={toggleAutoplay}\n          >\n            {isAutoPlaying ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n          </Button>\n        </>\n      )}\n\n      {/* Indicators */}\n      {showIndicators && images.length > 1 && (\n        <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2\">\n          {images.map((_, index) => (\n            <button\n              key={index}\n              className={`w-3 h-3 rounded-full transition-all duration-300 ${\n                index === currentIndex \n                  ? 'bg-white scale-110' \n                  : 'bg-white/50 hover:bg-white/70'\n              }`}\n              onClick={() => goToSlide(index)}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Progress Bar */}\n      {isAutoPlaying && images.length > 1 && (\n        <div className=\"absolute bottom-0 left-0 right-0 h-1 bg-white/20\">\n          <div \n            className=\"h-full bg-white transition-all duration-100 ease-linear\"\n            style={{\n              width: `${((currentIndex + 1) / images.length) * 100}%`\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8873},"client/src/components/navigation-header.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { usePermissions } from \"@/hooks/use-permissions\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuTrigger,\n  DropdownMenuSeparator\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ShoppingCart, \n  User, \n  Package, \n  Settings, \n  LogOut,\n  Menu,\n  Store\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport type { CartItem, Product, SiteSettings } from \"@shared/schema\";\n\ntype CartItemWithProduct = CartItem & { product: Product };\n\nexport function NavigationHeader() {\n  const { user, logoutMutation } = useAuth();\n  const { hasManagerAccess, isLoading: permissionsLoading } = usePermissions();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const { data: cartItems } = useQuery<CartItemWithProduct[]>({\n    queryKey: [\"/api/cart\"],\n    enabled: !!user,\n  });\n\n\n\n  const { data: siteSettings } = useQuery<SiteSettings>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const cartCount = cartItems?.reduce((sum, item) => sum + item.quantity, 0) || 0;\n\n  const handleLogout = () => {\n    logoutMutation.mutate(undefined, {\n      onSuccess: () => {\n        toast({\n          title: \"Logged out successfully\",\n          description: \"You have been logged out of your account\",\n        });\n        setLocation(\"/auth\");\n      },\n    });\n  };\n\n  const getNavigationItems = () => {\n    const baseItems = [\n      { label: \"Dashboard\", href: \"/\", icon: Store },\n      { label: \"Categories\", href: \"/categories\", icon: Package },\n      { label: \"Products\", href: \"/products\", icon: Package },\n    ];\n\n    // Only show \"My Orders\" for regular customers, not admin/manager\n    if (!user?.isAdmin && !hasManagerAccess()) {\n      baseItems.push({ label: \"My Orders\", href: \"/orders\", icon: Package });\n    }\n\n    return baseItems;\n  };\n\n  const NavigationItems = ({ mobile = false }) => (\n    <>\n      {getNavigationItems().map((item) => {\n        const Icon = item.icon;\n        return (\n          <Button\n            key={item.href}\n            variant=\"ghost\"\n            className={`${mobile ? 'justify-start w-full' : ''} transition-colors duration-200 font-medium`}\n            style={{ \n              color: siteSettings?.headerTextColor || '#64748b',\n              '--hover-color': siteSettings?.tabTextColor || '#2563eb'\n            } as React.CSSProperties & { '--hover-color': string }}\n            onMouseEnter={(e) => {\n              e.currentTarget.style.color = siteSettings?.tabTextColor || '#2563eb';\n            }}\n            onMouseLeave={(e) => {\n              e.currentTarget.style.color = siteSettings?.headerTextColor || '#64748b';\n            }}\n            onClick={() => {\n              setLocation(item.href);\n              if (mobile) setIsMobileMenuOpen(false);\n            }}\n          >\n            {mobile && <Icon className=\"mr-2 h-4 w-4\" />}\n            {item.label}\n          </Button>\n        );\n      })}\n    </>\n  );\n\n  const logoComponent = (\n    <div className=\"flex items-center space-x-2\">\n      {siteSettings?.logoUrl ? (\n        <img\n          src={siteSettings.logoUrl}\n          alt={siteSettings.siteName || \"InnovanceOrbit\"}\n          className=\"h-16 w-auto\"\n          onError={(e) => {\n            // Fallback to text logo if image fails to load\n            e.currentTarget.style.display = 'none';\n            e.currentTarget.nextElementSibling?.classList.remove('hidden');\n          }}\n        />\n      ) : null}\n      <span className={`text-3xl font-bold ${siteSettings?.logoUrl ? 'hidden' : ''}`}>\n        {siteSettings?.siteName || \"InnovanceOrbit\"}\n      </span>\n    </div>\n  );\n\n  return (\n    <header \n      className=\"bg-white shadow-sm border-b sticky top-0 z-50 nav-header\"\n    >\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-3 items-center h-20 sm:h-24\">\n          {/* Left Section - Navigation Tabs */}\n          <div className=\"flex items-center justify-start\">\n            <nav className=\"hidden lg:flex space-x-4 xl:space-x-6\">\n              <NavigationItems />\n            </nav>\n            \n            {/* Mobile Menu for left navigation */}\n            <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\" \n                  className=\"lg:hidden\"\n                  style={{ color: siteSettings?.headerTextColor || '#374151' }}\n                >\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"left\" className=\"w-64\">\n                <div className=\"flex flex-col space-y-4 mt-6\">\n                  <NavigationItems mobile />\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n\n          {/* Center Section - Logo */}\n          <div className=\"flex items-center justify-center px-2\">\n            <Button\n              variant=\"ghost\"\n              className=\"text-lg sm:text-xl lg:text-2xl font-bold hover:bg-transparent flex items-center space-x-2 sm:space-x-3 transition-colors duration-200 px-2\"\n              style={{ color: siteSettings?.headerTextColor || '#2563eb' }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.color = siteSettings?.tabTextColor || '#2563eb';\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.color = siteSettings?.headerTextColor || '#2563eb';\n              }}\n              onClick={() => setLocation(\"/\")}\n            >\n              {siteSettings?.logoUrl && siteSettings.logoUrl.trim() !== \"\" ? (\n                <img \n                  src={siteSettings.logoUrl} \n                  alt={siteSettings.siteName || \"Store\"} \n                  className=\"w-auto max-w-[150px] sm:max-w-[200px]\"\n                  style={{ height: `${siteSettings.headerLogoHeight || 64}px` }}\n                />\n              ) : (!siteSettings?.siteName || siteSettings.siteName.trim() === \"\") ? (\n                <Store className=\"w-8 h-8 sm:w-10 sm:h-10 lg:w-12 lg:h-12\" />\n              ) : null}\n              {siteSettings?.siteName && siteSettings.siteName.trim() !== \"\" && (\n                <span className=\"text-center truncate max-w-[120px] sm:max-w-[200px]\">{siteSettings.siteName}</span>\n              )}\n            </Button>\n          </div>\n\n          {/* Right Section - User Actions */}\n          <div className=\"flex items-center justify-end space-x-2 sm:space-x-4\">\n\n\n            {/* Shopping Cart - Only for regular customers, not admin/manager */}\n            {!user?.isAdmin && !hasManagerAccess() && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"relative transition-colors duration-200\"\n                style={{ color: siteSettings?.headerTextColor || '#64748b' }}\n                onMouseEnter={(e) => {\n                  e.currentTarget.style.color = siteSettings?.tabTextColor || '#2563eb';\n                }}\n                onMouseLeave={(e) => {\n                  e.currentTarget.style.color = siteSettings?.headerTextColor || '#64748b';\n                }}\n                onClick={() => setLocation(\"/cart\")}\n              >\n                <ShoppingCart className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n                {cartCount > 0 && (\n                  <Badge \n                    className=\"absolute -top-1 -right-1 sm:-top-2 sm:-right-2 text-xs px-1 sm:px-1.5 py-0.5 min-w-[1rem] sm:min-w-[1.25rem] h-4 sm:h-5 flex items-center justify-center\"\n                    style={{ \n                      backgroundColor: '#0ea5e9',\n                      color: '#ffffff'\n                    }}\n                  >\n                    {cartCount > 99 ? \"99+\" : cartCount}\n                  </Badge>\n                )}\n              </Button>\n            )}\n\n            {/* User Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"flex items-center space-x-1 sm:space-x-2 px-1 sm:px-3\">\n                  <Avatar className=\"h-6 w-6 sm:h-8 sm:w-8\">\n                    <AvatarFallback \n                      className=\"text-white text-xs sm:text-sm\"\n                      style={{ backgroundColor: '#2563eb' }}\n                    >\n                      {user?.username.charAt(0).toUpperCase() || \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                  <span \n                    className=\"hidden md:block font-medium text-sm\"\n                    style={{ color: siteSettings?.headerTextColor || '#374151' }}\n                  >\n                    {user?.username || \"User\"}\n                  </span>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-56\">\n                {/* Show loading while permissions are being fetched */}\n                {permissionsLoading && (\n                  <>\n                    <DropdownMenuItem disabled>\n                      <Settings className=\"mr-2 h-4 w-4\" />\n                      Loading...\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                  </>\n                )}\n\n                {/* Super Admin Panel */}\n                {!permissionsLoading && user?.isSuperAdmin && (\n                  <>\n                    <DropdownMenuItem onClick={() => setLocation(\"/admin\")}>\n                      <Settings className=\"mr-2 h-4 w-4\" />\n                      Super Admin Panel\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                  </>\n                )}\n\n                {/* Manager Panel */}\n                {!permissionsLoading && !user?.isSuperAdmin && hasManagerAccess() && (\n                  <>\n                    <DropdownMenuItem onClick={() => setLocation(\"/admin\")}>\n                      <Settings className=\"mr-2 h-4 w-4\" />\n                      Manager Panel\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                  </>\n                )}\n\n                {/* Regular User Panel */}\n                {!permissionsLoading && !user?.isSuperAdmin && !hasManagerAccess() && (\n                  <>\n                    <DropdownMenuItem onClick={() => setLocation(\"/dashboard\")}>\n                      <User className=\"mr-2 h-4 w-4\" />\n                      User Panel\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => setLocation(\"/orders\")}>\n                      <Package className=\"mr-2 h-4 w-4\" />\n                      My Orders\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                  </>\n                )}\n                <DropdownMenuItem \n                  onClick={handleLogout}\n                  className=\"text-red-600 focus:text-red-600\"\n                  disabled={logoutMutation.isPending}\n                >\n                  {logoutMutation.isPending ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-red-500 border-t-transparent mr-2\"></div>\n                      Signing Out...\n                    </>\n                  ) : (\n                    <>\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      Sign Out\n                    </>\n                  )}\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":12127},"client/src/components/order-approval-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, Clock, AlertCircle, ArrowRight } from \"lucide-react\";\n\ninterface OrderApprovalModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  orderId: string;\n  orderTotal: string;\n}\n\nexport function OrderApprovalModal({ isOpen, onClose, orderId, orderTotal }: OrderApprovalModalProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n\n  const steps = [\n    {\n      id: 1,\n      title: \"Order Submitted\",\n      description: \"Your order has been successfully submitted\",\n      status: \"completed\",\n      icon: <CheckCircle className=\"h-5 w-5\" />\n    },\n    {\n      id: 2,\n      title: \"Awaiting Admin Approval\",\n      description: \"Your order is being reviewed by our admin team\",\n      status: \"current\",\n      icon: <Clock className=\"h-5 w-5\" />\n    },\n    {\n      id: 3,\n      title: \"Payment Processing\",\n      description: \"Complete payment after approval\",\n      status: \"pending\",\n      icon: <AlertCircle className=\"h-5 w-5\" />\n    }\n  ];\n\n  const getStepColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"current\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case \"pending\":\n        return \"bg-gray-100 text-gray-600 border-gray-200\";\n      default:\n        return \"bg-gray-100 text-gray-600 border-gray-200\";\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <div className=\"text-center space-y-4\">\n            <div className=\"mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center\">\n              <CheckCircle className=\"h-8 w-8 text-green-600\" />\n            </div>\n            <DialogTitle className=\"text-2xl font-bold text-green-800\">Order Submitted Successfully!</DialogTitle>\n            <DialogDescription className=\"text-gray-600 text-lg\">\n              Your order #{orderId.slice(-8).toUpperCase()} has been submitted and is now awaiting admin approval\n            </DialogDescription>\n          </div>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Order Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Order Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Order ID</p>\n                  <p className=\"font-semibold\">#{orderId.slice(-8).toUpperCase()}</p>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm text-gray-600\">Total Amount</p>\n                  <p className=\"font-semibold text-lg\">${orderTotal}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Progress Steps */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Process Status</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {steps.map((step, index) => (\n                  <div key={step.id} className=\"flex items-start space-x-4\">\n                    <div className={`p-2 rounded-full border-2 ${getStepColor(step.status)}`}>\n                      {step.icon}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <h3 className=\"font-semibold\">{step.title}</h3>\n                        <Badge variant={step.status === \"completed\" ? \"default\" : step.status === \"current\" ? \"secondary\" : \"outline\"}>\n                          {step.status === \"completed\" ? \"Done\" : step.status === \"current\" ? \"In Progress\" : \"Pending\"}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-600 mt-1\">{step.description}</p>\n                    </div>\n                    {index < steps.length - 1 && (\n                      <ArrowRight className=\"h-4 w-4 text-gray-400 mt-3\" />\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Important Notice */}\n          <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4\">\n            <div className=\"flex items-start space-x-3\">\n              <AlertCircle className=\"h-5 w-5 text-amber-600 mt-0.5\" />\n              <div>\n                <h4 className=\"font-semibold text-amber-800\">Important Notice</h4>\n                <div className=\"text-sm text-amber-700 mt-1 space-y-1\">\n                  <p>• Payment methods are currently locked until admin approval</p>\n                  <p>• You will receive an email notification once your order is approved</p>\n                  <p>• Admin review typically takes 24 hours or less</p>\n                  <p>• You can track your order status in \"My Orders\" section</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Email Confirmation */}\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <CheckCircle className=\"h-5 w-5 text-blue-600\" />\n              <div>\n                <h4 className=\"font-semibold text-blue-800\">Email Confirmation Sent</h4>\n                <p className=\"text-sm text-blue-700 mt-1\">\n                  A confirmation email has been sent to your registered email address with order details and next steps.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <DialogFooter className=\"flex justify-center space-x-4\">\n          <Button variant=\"outline\" onClick={onClose}>\n            Close\n          </Button>\n          <Button onClick={() => window.location.href = '/orders'}>\n            View My Orders\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6431},"client/src/components/order-payment-checkout.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, Package, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { BahrainPaymentMethods } from \"@/components/BahrainPaymentMethods\";\nimport type { Order, OrderItem, Product } from \"@shared/schema\";\n\ntype OrderWithItems = Order & { items: (OrderItem & { product: Product })[] };\n\ninterface OrderPaymentCheckoutProps {\n  orderId: string;\n}\n\nexport function OrderPaymentCheckout({ orderId }: OrderPaymentCheckoutProps) {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: order, isLoading } = useQuery<OrderWithItems>({\n    queryKey: [`/api/orders/${orderId}`],\n  });\n\n  const updateOrderMutation = useMutation({\n    mutationFn: async (paymentData: any) => {\n      const res = await apiRequest(`/api/orders/${orderId}/payment`, \"PUT\", paymentData);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      queryClient.invalidateQueries({ queryKey: [`/api/orders/${orderId}`] });\n      toast({\n        title: \"Payment Successful\",\n        description: \"Your payment has been processed successfully.\",\n      });\n      setLocation(\"/orders\");\n    },\n    onError: () => {\n      toast({\n        title: \"Payment Failed\",\n        description: \"Please try again or contact support.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePaymentSuccess = (paymentData: any) => {\n    updateOrderMutation.mutate({\n      paymentMethod: paymentData.method,\n      paymentIntentId: paymentData.transactionId || `ORD_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      status: \"processing\", // Update order status to processing after payment\n    });\n  };\n\n  const handlePaymentError = (error: string) => {\n    toast({\n      title: \"Payment Error\",\n      description: error,\n      variant: \"destructive\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-slate-200 rounded w-48 mb-8\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              <div className=\"space-y-4\">\n                <div className=\"h-64 bg-white rounded-lg\"></div>\n              </div>\n              <div className=\"h-96 bg-white rounded-lg\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!order) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center py-16\">\n            <AlertCircle className=\"w-16 h-16 text-red-500 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-slate-900 mb-4\">Order Not Found</h2>\n            <p className=\"text-slate-600 mb-8\">The requested order could not be found.</p>\n            <Button onClick={() => setLocation(\"/orders\")}>\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Orders\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Check if order can proceed to payment\n  const adminApprovalStatus = (order as any).adminApprovalStatus;\n  const canProceedToPayment = adminApprovalStatus === \"approved\" && \n                              (order.status === \"awaiting_approval\" || order.status === \"payment_pending\");\n\n  if (!canProceedToPayment) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center py-16\">\n            <AlertCircle className=\"w-16 h-16 text-yellow-500 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-slate-900 mb-4\">Payment Not Available</h2>\n            <p className=\"text-slate-600 mb-8\">\n              {adminApprovalStatus === \"pending\" \n                ? \"This order is still awaiting admin approval.\" \n                : adminApprovalStatus === \"rejected\"\n                ? \"This order has been rejected by admin.\"\n                : \"Payment is not available for this order at this time.\"}\n            </p>\n            <Button onClick={() => setLocation(\"/orders\")}>\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Orders\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const total = parseFloat(order.total);\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => setLocation(\"/orders\")}\n              className=\"flex items-center space-x-2 text-slate-600 hover:text-slate-900\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span>Back to Orders</span>\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold text-slate-900\">Complete Payment</h1>\n              <p className=\"text-slate-600 mt-1\">Order #{order.id.slice(-8).toUpperCase()}</p>\n            </div>\n          </div>\n          <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n            <CheckCircle className=\"h-4 w-4 mr-1\" />\n            Approved\n          </Badge>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Order Summary */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Order Items */}\n                  <div>\n                    <h4 className=\"font-medium text-slate-900 mb-3\">Items ({order.items?.length || 0})</h4>\n                    <div className=\"space-y-3\">\n                      {order.items?.map((item) => (\n                        <div key={item.id} className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-3\">\n                            {item.product.imageUrl ? (\n                              <img \n                                src={item.product.imageUrl} \n                                alt={item.product.name}\n                                className=\"w-12 h-12 object-cover rounded border\"\n                              />\n                            ) : (\n                              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-100 to-purple-100 rounded flex items-center justify-center border\">\n                                <span className=\"text-slate-600 font-semibold text-sm\">\n                                  {item.product.name.charAt(0)}\n                                </span>\n                              </div>\n                            )}\n                            <div>\n                              <p className=\"font-medium text-slate-900\">{item.product.name}</p>\n                              <div className=\"text-sm text-slate-600 space-y-1\">\n                                <p>Qty: {item.quantity}</p>\n                                {item.rentalStartDate && item.rentalEndDate && (\n                                  <p>\n                                    Rental: {new Date(item.rentalStartDate).toLocaleDateString()} - {new Date(item.rentalEndDate).toLocaleDateString()}\n                                  </p>\n                                )}\n                                {item.rentalDays && (\n                                  <p>Duration: {item.rentalDays} day{item.rentalDays > 1 ? 's' : ''}</p>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"text-sm text-slate-600 mb-1\">\n                              ${parseFloat(item.price).toFixed(2)} × {item.quantity}\n                            </div>\n                            <p className=\"font-medium text-slate-900\">\n                              ${item.totalPrice || (parseFloat(item.price) * item.quantity).toFixed(2)}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Order Totals */}\n                  <div className=\"border-t pt-4 space-y-2\">\n                    <div className=\"flex justify-between text-sm text-slate-600\">\n                      <span>Subtotal</span>\n                      <span>${order.subtotal}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm text-slate-600\">\n                      <span>Tax (10% VAT)</span>\n                      <span>${order.tax}</span>\n                    </div>\n                    <div className=\"flex justify-between text-lg font-semibold text-slate-900 border-t pt-2\">\n                      <span>Total</span>\n                      <span>${order.total}</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n\n          </div>\n\n          {/* Payment Section */}\n          <div>\n            <BahrainPaymentMethods\n              total={total}\n              orderId={order.id}\n              shippingData={(order as any).shippingAddress}\n              onPaymentSuccess={handlePaymentSuccess}\n              onPaymentError={handlePaymentError}\n              isLocked={false}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10179},"client/src/components/product-card.tsx":{"content":"import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Star, ShoppingCart, Eye } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nimport type { Product } from \"@shared/schema\";\n\ninterface ProductCardProps {\n  product: Product;\n  onViewDetails?: (product: Product) => void;\n  onCardClick?: (product: Product) => void;\n  showDetailsButton?: boolean;\n}\n\nexport function ProductCard({ product, onViewDetails, onCardClick, showDetailsButton = true }: ProductCardProps) {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n\n  const addToCartMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"/api/cart\", \"POST\", {\n        productId: product.id,\n        quantity: 1,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Added to cart\",\n        description: `${product.name} has been added to your cart`,\n      });\n      // Redirect to cart page after successful add\n      setLocation(\"/cart\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add item to cart\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddToCart = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    \n    // For rental products, redirect to product detail page to select dates\n    if (product.productType === \"rental\") {\n      setLocation(`/products/${product.id}`);\n      return;\n    }\n    \n    addToCartMutation.mutate();\n  };\n\n\n\n  const renderStars = (rating: number) => {\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n\n    for (let i = 0; i < fullStars; i++) {\n      stars.push(\n        <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n      );\n    }\n\n    if (hasHalfStar) {\n      stars.push(\n        <div key=\"half\" className=\"relative\">\n          <Star className=\"w-4 h-4 text-gray-300\" />\n          <div className=\"absolute inset-0 overflow-hidden w-1/2\">\n            <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n          </div>\n        </div>\n      );\n    }\n\n    const emptyStars = 5 - Math.ceil(rating);\n    for (let i = 0; i < emptyStars; i++) {\n      stars.push(\n        <Star key={`empty-${i}`} className=\"w-4 h-4 text-gray-300\" />\n      );\n    }\n\n    return stars;\n  };\n\n  const rating = parseFloat(product.rating || \"0\");\n  const reviewCount = product.reviewCount || 0;\n\n  const handleCardClick = () => {\n    if (onCardClick) {\n      onCardClick(product);\n    }\n  };\n\n  return (\n    <Card \n      className=\"group cursor-pointer overflow-hidden border-none shadow-md hover:shadow-2xl transition-all duration-500 hover:scale-[1.02] bg-gradient-to-br from-white to-slate-50 flex flex-col\"\n      onClick={handleCardClick}\n    >\n      <div className=\"relative overflow-hidden rounded-t-xl\">\n        {product.imageUrl ? (\n          <img \n            src={product.imageUrl} \n            alt={product.name}\n            className=\"w-full h-56 object-cover group-hover:scale-110 transition-transform duration-500\"\n          />\n        ) : (\n          <div className=\"w-full h-56 bg-gradient-to-br from-blue-100 via-purple-50 to-pink-100 flex items-center justify-center group-hover:scale-110 transition-transform duration-500\">\n            <span className=\"text-slate-600 text-2xl font-bold\">\n              {product.name.charAt(0)}\n            </span>\n          </div>\n        )}\n        \n        {/* Badges */}\n        <div className=\"absolute top-3 left-3\">\n          {product.isFeatured && (\n            <Badge className=\"bg-gradient-to-r from-emerald-500 to-green-600 text-white text-xs px-3 py-1.5 font-semibold shadow-lg\">\n              ⭐ Featured\n            </Badge>\n          )}\n        </div>\n        \n\n\n\n      </div>\n      \n      <CardContent className=\"p-6 bg-gradient-to-b from-transparent to-slate-50/30 flex flex-col\">\n        <div className=\"flex-1\">\n          <h3 className=\"text-xl font-bold text-slate-900 mb-3 line-clamp-2 group-hover:text-blue-700 transition-colors duration-300\">\n            {product.name}\n          </h3>\n          \n          <p className=\"text-slate-600 text-sm mb-4 line-clamp-2 leading-relaxed\">\n            {product.description || \"No description available\"}\n          </p>\n          \n          <div className=\"flex items-center justify-between mb-4\">\n            <span className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              ${parseFloat(product.price).toFixed(2)}\n            </span>\n            \n            {rating > 0 && (\n              <div className=\"flex items-center space-x-2 bg-yellow-50 px-3 py-1.5 rounded-full border border-yellow-200\">\n                <div className=\"flex\">\n                  {renderStars(rating)}\n                </div>\n                <span className=\"text-slate-600 text-sm font-medium\">\n                  ({reviewCount > 0 ? reviewCount : rating.toFixed(1)})\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"mt-auto\">\n          {showDetailsButton ? (\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\"\n                className=\"flex-1 border-2 border-blue-200 hover:border-blue-400 text-blue-600 hover:text-blue-700 font-semibold py-3 px-4 rounded-xl shadow-md hover:shadow-lg transition-all duration-300\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onViewDetails?.(product);\n                }}\n              >\n                <Eye className=\"mr-2 h-4 w-4\" />\n                Details\n              </Button>\n              \n              <Button \n                className=\"flex-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold py-3 px-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 group disabled:opacity-50 disabled:hover:scale-100\"\n                onClick={handleAddToCart}\n                disabled={addToCartMutation.isPending}\n              >\n                {addToCartMutation.isPending ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-1\"></div>\n                    Adding...\n                  </div>\n                ) : (\n                  <>\n                    <ShoppingCart className=\"mr-1 h-4 w-4 group-hover:animate-bounce\" />\n                    Add to Cart\n                  </>\n                )}\n              </Button>\n            </div>\n          ) : (\n            <Button \n              className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold py-3 px-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 group disabled:opacity-50 disabled:hover:scale-100\"\n              onClick={handleAddToCart}\n              disabled={addToCartMutation.isPending}\n            >\n              {addToCartMutation.isPending ? (\n                <div className=\"flex items-center\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-1\"></div>\n                  Adding...\n                </div>\n              ) : (\n                <>\n                  <ShoppingCart className=\"mr-2 h-5 w-5 group-hover:animate-bounce\" />\n                  Add to Cart\n                </>\n              )}\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8005},"client/src/components/promotional-banner.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sparkles, Zap, Gift } from \"lucide-react\";\n\ninterface PromotionalBannerProps {\n  title?: string;\n  description?: string;\n  buttonText?: string;\n  onButtonClick?: () => void;\n  variant?: \"default\" | \"accent\" | \"gradient\";\n  icon?: \"sparkles\" | \"zap\" | \"gift\";\n}\n\nexport function PromotionalBanner({\n  title = \"Special Offer\",\n  description = \"Don't miss out on our exclusive deals\",\n  buttonText = \"Shop Now\",\n  onButtonClick,\n  variant = \"default\",\n  icon = \"sparkles\"\n}: PromotionalBannerProps) {\n  const icons = {\n    sparkles: Sparkles,\n    zap: Zap,\n    gift: Gift\n  };\n  \n  const IconComponent = icons[icon];\n\n  const getBackgroundClass = () => {\n    switch (variant) {\n      case \"accent\":\n        return \"bg-gradient-to-r from-accent to-yellow-500\";\n      case \"gradient\":\n        return \"bg-gradient-to-r from-purple-500 to-pink-500\";\n      default:\n        return \"bg-gradient-to-r from-primary to-blue-600\";\n    }\n  };\n\n  return (\n    <Card className=\"overflow-hidden border-0 shadow-lg hover:shadow-xl transition-shadow duration-300\">\n      <CardContent className=\"p-0\">\n        <div className={`relative ${getBackgroundClass()} text-white overflow-hidden`}>\n          {/* Prominent Corner Geometric Designs */}\n          <div \n            className=\"absolute top-0 right-0 w-24 h-24 opacity-100 pointer-events-none\"\n            style={{\n              backgroundImage: `url('/attached_assets/Artboard-1_1753876937461.png')`,\n              backgroundSize: 'contain',\n              backgroundPosition: 'top right',\n              backgroundRepeat: 'no-repeat',\n              transform: 'scale(1.4)'\n            }}\n          />\n          <div \n            className=\"absolute bottom-0 left-0 w-24 h-24 opacity-90 pointer-events-none\"\n            style={{\n              backgroundImage: `url('/attached_assets/Artboard-1_1753876937461.png')`,\n              backgroundSize: 'contain',\n              backgroundPosition: 'bottom left',\n              backgroundRepeat: 'no-repeat',\n              transform: 'scale(1.3) rotate(180deg)'\n            }}\n          />\n          \n          {/* Enhanced Center Geometric Background */}\n          <div \n            className=\"absolute inset-0 opacity-60\"\n            style={{\n              backgroundImage: `url('/attached_assets/Artboard-1_1753876937461.png')`,\n              backgroundSize: '25%',\n              backgroundPosition: 'center',\n              backgroundRepeat: 'no-repeat',\n              mixBlendMode: 'overlay'\n            }}\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-r from-black/20 to-transparent\" />\n          <div className=\"relative z-10 p-8 flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-white/20 rounded-full\">\n                <IconComponent className=\"h-8 w-8\" />\n              </div>\n              <div>\n                <h3 className=\"text-2xl font-bold mb-1\">{title}</h3>\n                <p className=\"opacity-90\">{description}</p>\n              </div>\n            </div>\n            {onButtonClick && (\n              <Button\n                onClick={onButtonClick}\n                className=\"bg-white/20 hover:bg-white/30 text-white border-white/30 hover:border-white/50 transition-all duration-200\"\n                variant=\"outline\"\n              >\n                {buttonText}\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3589},"client/src/components/user-request-section.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Package, \n  Truck, \n  CheckCircle, \n  Clock, \n  X, \n  AlertCircle,\n  Calendar,\n  DollarSign,\n  Eye,\n  CreditCard\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Order {\n  id: string;\n  userId: string;\n  status: string;\n  total: string;\n  subtotal: string;\n  tax: string;\n  adminApprovalStatus: string;\n  adminApprovedBy?: string;\n  adminApprovedAt?: string;\n  adminRemarks?: string;\n  paymentMethod?: string;\n  customerInfo?: any;\n  createdAt: string;\n  items?: Array<{\n    id: string;\n    productId: string;\n    quantity: number;\n    price: string;\n    product: {\n      id: string;\n      name: string;\n      imageUrl?: string;\n    };\n  }>;\n}\n\nexport function UserRequestSection() {\n  const { data: orders, isLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const getApprovalStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"rejected\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getOrderStatusColor = (status: string) => {\n    switch (status) {\n      case \"delivered\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"shipped\":\n        return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"processing\":\n        return \"bg-purple-100 text-purple-800 border-purple-200\";\n      case \"confirmed\":\n        return \"bg-indigo-100 text-indigo-800 border-indigo-200\";\n      case \"payment_pending\":\n        return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getStatusIcon = (approvalStatus: string, orderStatus: string) => {\n    if (approvalStatus === \"rejected\") return <X className=\"h-4 w-4\" />;\n    if (approvalStatus === \"pending\") return <Clock className=\"h-4 w-4\" />;\n    \n    switch (orderStatus) {\n      case \"delivered\":\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case \"shipped\":\n        return <Truck className=\"h-4 w-4\" />;\n      case \"processing\":\n        return <Package className=\"h-4 w-4\" />;\n      case \"confirmed\":\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case \"payment_pending\":\n        return <CreditCard className=\"h-4 w-4\" />;\n      default:\n        return <Clock className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getDisplayStatus = (approvalStatus: string, orderStatus: string) => {\n    if (approvalStatus === \"pending\") return \"Awaiting Approval\";\n    if (approvalStatus === \"rejected\") return \"Rejected\";\n    if (approvalStatus === \"approved\" && orderStatus === \"awaiting_approval\") return \"Payment Pending\";\n    \n    switch (orderStatus) {\n      case \"payment_pending\":\n        return \"Payment Pending\";\n      case \"processing\":\n        return \"Confirmed\";\n      case \"shipped\":\n        return \"Shipped\";\n      case \"delivered\":\n        return \"Delivered\";\n      case \"cancelled\":\n        return \"Cancelled\";\n      default:\n        return \"Processing\";\n    }\n  };\n\n  const getNextAction = (approvalStatus: string, orderStatus: string) => {\n    if (approvalStatus === \"pending\") return \"Waiting for admin review\";\n    if (approvalStatus === \"rejected\") return \"Order was rejected\";\n    if (approvalStatus === \"approved\" && orderStatus === \"awaiting_approval\") return \"Complete payment to proceed\";\n    \n    switch (orderStatus) {\n      case \"payment_pending\":\n        return \"Complete payment to proceed\";\n      case \"processing\":\n        return \"Order is being prepared\";\n      case \"shipped\":\n        return \"Package is on the way\";\n      case \"delivered\":\n        return \"Order completed successfully\";\n      case \"cancelled\":\n        return \"Order was cancelled\";\n      default:\n        return \"Processing your order\";\n    }\n  };\n\n  const canPayment = (approvalStatus: string, orderStatus: string) => {\n    return approvalStatus === \"approved\" && (orderStatus === \"awaiting_approval\" || orderStatus === \"payment_pending\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold\">My Order Requests</h2>\n        </div>\n        <div className=\"space-y-4\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i}>\n              <CardHeader>\n                <Skeleton className=\"h-6 w-32\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-20 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const pendingOrders = orders?.filter(order => order.adminApprovalStatus === 'pending') || [];\n  const approvedOrders = orders?.filter(order => order.adminApprovalStatus === 'approved') || [];\n  const rejectedOrders = orders?.filter(order => order.adminApprovalStatus === 'rejected') || [];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">My Order Requests</h2>\n          <p className=\"text-gray-600 mt-1\">Track your order approval status and progress</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          {pendingOrders.length > 0 && (\n            <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">\n              {pendingOrders.length} Pending Approval\n            </Badge>\n          )}\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-yellow-100 rounded-full\">\n                <Clock className=\"h-5 w-5 text-yellow-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{pendingOrders.length}</p>\n                <p className=\"text-sm text-gray-600\">Awaiting Approval</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-green-100 rounded-full\">\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{approvedOrders.length}</p>\n                <p className=\"text-sm text-gray-600\">Approved Orders</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-red-100 rounded-full\">\n                <X className=\"h-5 w-5 text-red-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{rejectedOrders.length}</p>\n                <p className=\"text-sm text-gray-600\">Rejected Orders</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Orders List */}\n      {!orders || orders.length === 0 ? (\n        <Card className=\"text-center py-12\">\n          <CardContent>\n            <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Orders Yet</h3>\n            <p className=\"text-gray-600 mb-6\">\n              You haven't submitted any orders for approval yet. Start shopping to see your orders here.\n            </p>\n            <Button onClick={() => window.location.href = '/products'}>\n              Browse Products\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {orders.map((order) => (\n            <Card key={order.id} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle className=\"text-lg font-semibold\">\n                      Order #{order.id.slice(-8).toUpperCase()}\n                    </CardTitle>\n                    <div className=\"flex items-center space-x-4 mt-2 text-sm text-gray-600\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Calendar className=\"h-4 w-4\" />\n                        <span>{formatDistanceToNow(new Date(order.createdAt))} ago</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <DollarSign className=\"h-4 w-4\" />\n                        <span>${order.total}</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col items-end space-y-2\">\n                    <Badge className={`${getApprovalStatusColor(order.adminApprovalStatus)} border`}>\n                      <div className=\"flex items-center space-x-1\">\n                        {getStatusIcon(order.adminApprovalStatus, order.status)}\n                        <span>{getDisplayStatus(order.adminApprovalStatus, order.status)}</span>\n                      </div>\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Order Items */}\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Items ({order.items?.length || 0})</h4>\n                    <div className=\"space-y-2\">\n                      {order.items?.slice(0, 3).map((item) => (\n                        <div key={item.id} className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">\n                            {item.quantity}x {item.product.name}\n                          </span>\n                          <span className=\"font-medium\">${(parseFloat(item.price) * item.quantity).toFixed(2)}</span>\n                        </div>\n                      ))}\n                      {(order.items?.length || 0) > 3 && (\n                        <div className=\"text-sm text-gray-500\">\n                          +{(order.items?.length || 0) - 3} more items\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Status Information */}\n                  <div className=\"border-t pt-3\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"flex-shrink-0\">\n                        {order.adminApprovalStatus === \"pending\" ? (\n                          <AlertCircle className=\"h-5 w-5 text-yellow-500\" />\n                        ) : order.adminApprovalStatus === \"approved\" ? (\n                          <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                        ) : (\n                          <X className=\"h-5 w-5 text-red-500\" />\n                        )}\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {getNextAction(order.adminApprovalStatus, order.status)}\n                        </p>\n                        {order.adminApprovalStatus === \"pending\" && (\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            Admin review typically takes 24 hours or less\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Admin Remarks */}\n                  {order.adminRemarks && (\n                    <div className=\"border-t pt-3\">\n                      <h4 className=\"font-medium text-gray-900 mb-2\">Admin Note</h4>\n                      <div className=\"bg-gray-50 rounded-lg p-3\">\n                        <p className=\"text-sm text-gray-700 italic\">\"{order.adminRemarks}\"</p>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Action Buttons */}\n                  <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Eye className=\"h-4 w-4 mr-2\" />\n                      View Details\n                    </Button>\n                    {canPayment(order.adminApprovalStatus, order.status) && (\n                      <Button \n                        size=\"sm\"\n                        className=\"bg-green-600 hover:bg-green-700\"\n                        onClick={() => window.location.href = `/checkout/${order.id}`}\n                      >\n                        <CreditCard className=\"h-4 w-4 mr-2\" />\n                        Complete Payment\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":13671},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"/api/login\", \"POST\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      // Force refresh permissions after login to ensure manager role is detected immediately\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/permissions\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Registration disabled - only login available\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"/api/register\", \"POST\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration disabled\",\n        description: \"Contact administrator for account access.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"/api/logout\", \"POST\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3086},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-permissions.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { getQueryFn } from \"../lib/queryClient\";\n\nexport interface PermissionsResponse {\n  permissions: string[];\n}\n\nexport function usePermissions() {\n  const {\n    data,\n    isLoading,\n    error,\n  } = useQuery<PermissionsResponse, Error>({\n    queryKey: [\"/api/user/permissions\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    staleTime: 0, // Always refetch permissions to ensure fresh data\n    refetchOnMount: true, // Refetch on component mount\n  });\n\n  const permissions = data?.permissions || [];\n\n  const hasPermission = (permission: string): boolean => {\n    return permissions.includes(permission);\n  };\n\n  const hasAnyPermission = (permissionList: string[]): boolean => {\n    return permissionList.some(permission => permissions.includes(permission));\n  };\n\n  // Check if user has manager role access\n  // Only check for users.view permission which is exclusive to managers and super admins\n  const hasManagerAccess = (): boolean => {\n    // Only managers and super admins can view all users - this is the key differentiator\n    return permissions.includes(\"users.view\");\n  };\n\n  return {\n    permissions,\n    isLoading,\n    error,\n    hasPermission,\n    hasAnyPermission,\n    hasManagerAccess,\n  };\n}","size_bytes":1271},"client/src/hooks/use-theme.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { applyTheme, type ThemeName } from \"@/lib/themes\";\nimport type { SiteSettings } from \"@shared/schema\";\n\n/**\n * Hook to automatically apply the current theme from site settings\n */\nexport function useTheme() {\n  const { data: settings } = useQuery<SiteSettings>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  useEffect(() => {\n    if (settings?.theme) {\n      applyTheme(settings.theme as ThemeName, {\n        headerTextColor: settings.headerTextColor || undefined,\n        tabTextColor: settings.tabTextColor || undefined,\n        tabActiveTextColor: settings.tabActiveTextColor || undefined,\n      });\n    }\n  }, [settings?.theme, settings?.headerTextColor, settings?.tabTextColor, settings?.tabActiveTextColor]);\n\n  return {\n    currentTheme: settings?.theme || \"default\",\n    settings,\n  };\n}","size_bytes":885},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/imageUpload.ts":{"content":"import { toast } from \"@/hooks/use-toast\";\n\nexport interface ImageUploadOptions {\n  onUploadStart?: () => void;\n  onUploadComplete?: (imageUrl: string) => void;\n  onUploadError?: (error: string) => void;\n}\n\nexport async function uploadImage(\n  file: File,\n  options: ImageUploadOptions = {}\n): Promise<string | null> {\n  const { onUploadStart, onUploadComplete, onUploadError } = options;\n\n  if (!file) {\n    const error = \"No file selected\";\n    onUploadError?.(error);\n    toast({\n      title: \"Error\",\n      description: error,\n      variant: \"destructive\",\n    });\n    return null;\n  }\n\n  // Validate file type\n  if (!file.type.startsWith(\"image/\")) {\n    const error = \"Please select an image file\";\n    onUploadError?.(error);\n    toast({\n      title: \"Error\", \n      description: error,\n      variant: \"destructive\",\n    });\n    return null;\n  }\n\n  // Validate file size (5MB limit)\n  const maxSize = 5 * 1024 * 1024; // 5MB in bytes\n  if (file.size > maxSize) {\n    const error = \"Image size must be less than 5MB\";\n    onUploadError?.(error);\n    toast({\n      title: \"Error\",\n      description: error,\n      variant: \"destructive\",\n    });\n    return null;\n  }\n\n  try {\n    onUploadStart?.();\n\n    const formData = new FormData();\n    formData.append(\"image\", file);\n\n    const response = await fetch(\"/api/upload-image\", {\n      method: \"POST\",\n      body: formData,\n      credentials: \"include\",\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Upload failed\");\n    }\n\n    const data = await response.json();\n    const imageUrl = data.imageUrl;\n\n    onUploadComplete?.(imageUrl);\n    toast({\n      title: \"Success\",\n      description: \"Image uploaded successfully\",\n    });\n\n    return imageUrl;\n  } catch (error: any) {\n    const errorMessage = error.message || \"Failed to upload image\";\n    onUploadError?.(errorMessage);\n    toast({\n      title: \"Error\",\n      description: errorMessage,\n      variant: \"destructive\",\n    });\n    return null;\n  }\n}\n\nexport function createImageUploadHandler(\n  onImageUrlChange: (url: string) => void,\n  setIsUploading?: (uploading: boolean) => void\n) {\n  return async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const imageUrl = await uploadImage(file, {\n      onUploadStart: () => setIsUploading?.(true),\n      onUploadComplete: (url) => {\n        onImageUrlChange(url);\n        setIsUploading?.(false);\n      },\n      onUploadError: () => setIsUploading?.(false),\n    });\n  };\n}","size_bytes":2580},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return (\n    <Route path={path}>\n      <Component />\n    </Route>\n  );\n}\n","size_bytes":725},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/themes.ts":{"content":"// Predefined theme configurations\nexport const themes = {\n  default: {\n    name: \"Default Blue\",\n    description: \"Classic blue theme\",\n    primary: \"#2563eb\",      // Blue 600\n    secondary: \"#64748b\",    // Slate 500\n    accent: \"#0ea5e9\",       // Sky 500\n    background: \"#ffffff\",    // White\n    text: \"#1e293b\",         // Slate 800\n    cssVars: {\n      '--primary': 'hsl(218, 82%, 58%)',\n      '--primary-foreground': 'hsl(0, 0%, 100%)',\n      '--secondary': 'hsl(210, 40%, 50%)',\n      '--secondary-foreground': 'hsl(0, 0%, 100%)',\n      '--accent': 'hsl(199, 89%, 48%)',\n      '--accent-foreground': 'hsl(0, 0%, 100%)'\n    }\n  },\n  ocean: {\n    name: \"Ocean Blue\",\n    description: \"Deep ocean blues and teals\",\n    primary: \"#0f766e\",      // Teal 700\n    secondary: \"#0891b2\",    // Cyan 600\n    accent: \"#06b6d4\",       // Cyan 500\n    background: \"#f0fdfa\",   // Teal 50\n    text: \"#134e4a\",         // Teal 800\n    cssVars: {\n      '--primary': 'hsl(178, 78%, 25%)',\n      '--primary-foreground': 'hsl(0, 0%, 100%)',\n      '--secondary': 'hsl(192, 85%, 34%)',\n      '--secondary-foreground': 'hsl(0, 0%, 100%)',\n      '--accent': 'hsl(188, 96%, 43%)',\n      '--accent-foreground': 'hsl(0, 0%, 100%)'\n    }\n  },\n  forest: {\n    name: \"Forest Green\",\n    description: \"Natural greens and earth tones\",\n    primary: \"#15803d\",      // Green 700\n    secondary: \"#65a30d\",    // Lime 600\n    accent: \"#22c55e\",       // Green 500\n    background: \"#f0fdf4\",   // Green 50\n    text: \"#14532d\",         // Green 800\n    cssVars: {\n      '--primary': 'hsl(142, 76%, 29%)',\n      '--primary-foreground': 'hsl(0, 0%, 100%)',\n      '--secondary': 'hsl(76, 85%, 34%)',\n      '--secondary-foreground': 'hsl(0, 0%, 100%)',\n      '--accent': 'hsl(142, 71%, 45%)',\n      '--accent-foreground': 'hsl(0, 0%, 100%)'\n    }\n  },\n  sunset: {\n    name: \"Sunset Orange\",\n    description: \"Warm oranges and yellows\",\n    primary: \"#ea580c\",      // Orange 600\n    secondary: \"#f59e0b\",    // Amber 500\n    accent: \"#facc15\",       // Yellow 400\n    background: \"#fffbeb\",   // Amber 50\n    text: \"#92400e\",         // Amber 800\n    cssVars: {\n      '--primary': 'hsl(24, 90%, 48%)',\n      '--primary-foreground': 'hsl(0, 0%, 100%)',\n      '--secondary': 'hsl(45, 93%, 47%)',\n      '--secondary-foreground': 'hsl(0, 0%, 100%)',\n      '--accent': 'hsl(50, 98%, 53%)',\n      '--accent-foreground': 'hsl(30, 100%, 20%)'\n    }\n  },\n  midnight: {\n    name: \"Midnight Dark\",\n    description: \"Dark theme with purple accents\",\n    primary: \"#7c3aed\",      // Violet 600\n    secondary: \"#6366f1\",    // Indigo 500\n    accent: \"#a855f7\",       // Purple 500\n    background: \"#0f0f23\",   // Very dark blue\n    text: \"#e2e8f0\",         // Slate 200\n    cssVars: {\n      '--primary': 'hsl(258, 84%, 56%)',\n      '--primary-foreground': 'hsl(0, 0%, 100%)',\n      '--secondary': 'hsl(239, 84%, 67%)',\n      '--secondary-foreground': 'hsl(0, 0%, 100%)',\n      '--accent': 'hsl(283, 89%, 64%)',\n      '--accent-foreground': 'hsl(0, 0%, 100%)'\n    }\n  },\n  coral: {\n    name: \"Coral Pink\",\n    description: \"Soft pinks and corals\",\n    primary: \"#ec4899\",      // Pink 500\n    secondary: \"#f97316\",    // Orange 500\n    accent: \"#fb7185\",       // Rose 400\n    background: \"#fef7f7\",   // Rose 50\n    text: \"#881337\",         // Rose 900\n    cssVars: {\n      '--primary': 'hsl(330, 81%, 60%)',\n      '--primary-foreground': 'hsl(0, 0%, 100%)',\n      '--secondary': 'hsl(27, 96%, 53%)',\n      '--secondary-foreground': 'hsl(0, 0%, 100%)',\n      '--accent': 'hsl(351, 95%, 71%)',\n      '--accent-foreground': 'hsl(0, 0%, 100%)'\n    }\n  },\n  violet: {\n    name: \"Royal Violet\",\n    description: \"Rich purples and violets\",\n    primary: \"#9333ea\",      // Purple 600\n    secondary: \"#8b5cf6\",    // Violet 500\n    accent: \"#c084fc\",       // Purple 400\n    background: \"#faf5ff\",   // Purple 50\n    text: \"#581c87\",         // Purple 900\n    cssVars: {\n      '--primary': 'hsl(283, 84%, 56%)',\n      '--primary-foreground': 'hsl(0, 0%, 100%)',\n      '--secondary': 'hsl(258, 90%, 66%)',\n      '--secondary-foreground': 'hsl(0, 0%, 100%)',\n      '--accent': 'hsl(283, 95%, 76%)',\n      '--accent-foreground': 'hsl(283, 100%, 25%)'\n    }\n  },\n  emerald: {\n    name: \"Emerald Luxury\",\n    description: \"Rich emeralds and gold accents\",\n    primary: \"#059669\",      // Emerald 600\n    secondary: \"#0d9488\",    // Teal 600\n    accent: \"#10b981\",       // Emerald 500\n    background: \"#ecfdf5\",   // Emerald 50\n    text: \"#064e3b\",         // Emerald 900\n    cssVars: {\n      '--primary': 'hsl(158, 94%, 30%)',\n      '--primary-foreground': 'hsl(0, 0%, 100%)',\n      '--secondary': 'hsl(178, 84%, 32%)',\n      '--secondary-foreground': 'hsl(0, 0%, 100%)',\n      '--accent': 'hsl(158, 84%, 38%)',\n      '--accent-foreground': 'hsl(0, 0%, 100%)'\n    }\n  },\n  ruby: {\n    name: \"Ruby Red\",\n    description: \"Bold reds with gold highlights\",\n    primary: \"#dc2626\",      // Red 600\n    secondary: \"#b91c1c\",    // Red 700\n    accent: \"#f59e0b\",       // Amber 500\n    background: \"#fef2f2\",   // Red 50\n    text: \"#7f1d1d\",         // Red 900\n    cssVars: {\n      '--primary': 'hsl(0, 84%, 50%)',\n      '--primary-foreground': 'hsl(0, 0%, 100%)',\n      '--secondary': 'hsl(0, 77%, 42%)',\n      '--secondary-foreground': 'hsl(0, 0%, 100%)',\n      '--accent': 'hsl(45, 93%, 47%)',\n      '--accent-foreground': 'hsl(0, 0%, 100%)'\n    }\n  },\n  sapphire: {\n    name: \"Sapphire Blue\",\n    description: \"Deep blues with silver accents\",\n    primary: \"#1e40af\",      // Blue 800\n    secondary: \"#3b82f6\",    // Blue 500\n    accent: \"#06b6d4\",       // Cyan 500\n    background: \"#eff6ff\",   // Blue 50\n    text: \"#1e3a8a\",         // Blue 900\n    cssVars: {\n      '--primary': 'hsl(224, 76%, 38%)',\n      '--primary-foreground': 'hsl(0, 0%, 100%)',\n      '--secondary': 'hsl(217, 91%, 60%)',\n      '--secondary-foreground': 'hsl(0, 0%, 100%)',\n      '--accent': 'hsl(188, 96%, 43%)',\n      '--accent-foreground': 'hsl(0, 0%, 100%)'\n    }\n  },\n  rose: {\n    name: \"Rose Gold\",\n    description: \"Elegant rose tones with gold\",\n    primary: \"#e11d48\",      // Rose 600\n    secondary: \"#f43f5e\",    // Rose 500\n    accent: \"#f59e0b\",       // Amber 500\n    background: \"#fff1f2\",   // Rose 50\n    text: \"#881337\",         // Rose 900\n    cssVars: {\n      '--primary': 'hsl(346, 77%, 50%)',\n      '--primary-foreground': 'hsl(0, 0%, 100%)',\n      '--secondary': 'hsl(351, 89%, 60%)',\n      '--secondary-foreground': 'hsl(0, 0%, 100%)',\n      '--accent': 'hsl(45, 93%, 47%)',\n      '--accent-foreground': 'hsl(0, 0%, 100%)'\n    }\n  },\n  bronze: {\n    name: \"Bronze Elegance\",\n    description: \"Warm bronze and copper tones\",\n    primary: \"#a16207\",      // Yellow 700\n    secondary: \"#ca8a04\",    // Yellow 600\n    accent: \"#f97316\",       // Orange 500\n    background: \"#fefce8\",   // Yellow 50\n    text: \"#713f12\",         // Yellow 900\n    cssVars: {\n      '--primary': 'hsl(45, 93%, 33%)',\n      '--primary-foreground': 'hsl(0, 0%, 100%)',\n      '--secondary': 'hsl(45, 93%, 40%)',\n      '--secondary-foreground': 'hsl(0, 0%, 100%)',\n      '--accent': 'hsl(27, 96%, 53%)',\n      '--accent-foreground': 'hsl(0, 0%, 100%)'\n    }\n  },\n  slate: {\n    name: \"Modern Slate\",\n    description: \"Professional gray tones\",\n    primary: \"#475569\",      // Slate 600\n    secondary: \"#64748b\",    // Slate 500\n    accent: \"#0ea5e9\",       // Sky 500\n    background: \"#f8fafc\",   // Slate 50\n    text: \"#0f172a\",         // Slate 900\n    cssVars: {\n      '--primary': 'hsl(215, 19%, 35%)',\n      '--primary-foreground': 'hsl(0, 0%, 100%)',\n      '--secondary': 'hsl(215, 16%, 47%)',\n      '--secondary-foreground': 'hsl(0, 0%, 100%)',\n      '--accent': 'hsl(199, 89%, 48%)',\n      '--accent-foreground': 'hsl(0, 0%, 100%)'\n    }\n  },\n  mint: {\n    name: \"Fresh Mint\",\n    description: \"Cool mint greens and blues\",\n    primary: \"#14b8a6\",      // Teal 500\n    secondary: \"#06b6d4\",    // Cyan 500\n    accent: \"#22d3ee\",       // Cyan 400\n    background: \"#f0fdfa\",   // Teal 50\n    text: \"#134e4a\",         // Teal 800\n    cssVars: {\n      '--primary': 'hsl(172, 83%, 40%)',\n      '--primary-foreground': 'hsl(0, 0%, 100%)',\n      '--secondary': 'hsl(188, 96%, 43%)',\n      '--secondary-foreground': 'hsl(0, 0%, 100%)',\n      '--accent': 'hsl(187, 85%, 53%)',\n      '--accent-foreground': 'hsl(0, 0%, 100%)'\n    }\n  },\n  lavender: {\n    name: \"Soft Lavender\", \n    description: \"Gentle purples and soft tones\",\n    primary: \"#8b5cf6\",      // Violet 500\n    secondary: \"#a78bfa\",    // Violet 400\n    accent: \"#c4b5fd\",       // Violet 300\n    background: \"#faf5ff\",   // Purple 50\n    text: \"#581c87\",         // Purple 900\n    cssVars: {\n      '--primary': 'hsl(258, 90%, 66%)',\n      '--primary-foreground': 'hsl(0, 0%, 100%)',\n      '--secondary': 'hsl(258, 94%, 74%)',\n      '--secondary-foreground': 'hsl(0, 0%, 100%)',\n      '--accent': 'hsl(266, 87%, 78%)',\n      '--accent-foreground': 'hsl(266, 100%, 25%)'\n    }\n  }\n} as const;\n\nexport type ThemeName = keyof typeof themes;\n\n// Function to apply theme to CSS variables\nexport function applyTheme(themeName: ThemeName, customColors?: {\n  headerTextColor?: string;\n  tabTextColor?: string;\n  tabActiveTextColor?: string;\n}) {\n  const theme = themes[themeName];\n  if (!theme) return;\n\n  const root = document.documentElement;\n  \n  // Apply custom CSS variables\n  Object.entries(theme.cssVars).forEach(([property, value]) => {\n    root.style.setProperty(property, value);\n  });\n\n  // Also set our custom theme color variables\n  root.style.setProperty('--theme-primary', theme.primary);\n  root.style.setProperty('--theme-secondary', theme.secondary);\n  root.style.setProperty('--theme-accent', theme.accent);\n  root.style.setProperty('--theme-background', theme.background);\n  root.style.setProperty('--theme-text', theme.text);\n  \n  // Apply custom text colors if provided\n  if (customColors?.headerTextColor) {\n    root.style.setProperty('--theme-header-text', customColors.headerTextColor);\n  }\n  if (customColors?.tabTextColor) {\n    root.style.setProperty('--theme-tab-text', customColors.tabTextColor);\n  }\n  if (customColors?.tabActiveTextColor) {\n    root.style.setProperty('--theme-tab-active-text', customColors.tabActiveTextColor);\n  }\n}","size_bytes":10237},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { usePermissions } from \"@/hooks/use-permissions\";\nimport { NavigationHeader } from \"@/components/navigation-header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { CategoryManager } from \"@/components/admin/CategoryManager\";\nimport { ProductManager } from \"@/components/admin/ProductManager\";\nimport { SliderManager } from \"@/components/admin/SliderManager\";\nimport { UserManager } from \"@/components/admin/UserManager\";\nimport { OrderManager } from \"@/components/admin/OrderManager\";\nimport { SiteSettings } from \"@/components/admin/SiteSettings\";\nimport DatabaseManager from \"@/components/admin/DatabaseManager\";\nimport ExcelManager from \"@/components/admin/ExcelManager\";\nimport { UnitsOfMeasureManager } from \"@/components/admin/UnitsOfMeasureManager\";\nimport RolePermissionManager from \"@/components/admin/RolePermissionManager\";\nimport { \n  DollarSign, \n  ShoppingCart, \n  ShoppingBag,\n  Package, \n  Users,\n  FileSpreadsheet,\n  Settings,\n  CheckCircle,\n  Shield,\n  Crown,\n  UserCheck,\n  Clock,\n  Database\n} from \"lucide-react\";\nimport { AdminRequestSection } from \"@/components/admin/admin-request-section\";\n\ninterface AdminStats {\n  revenue: string;\n  orders: number;\n  products: number;\n  users: number;\n  pendingOrders?: number;\n  totalRoles?: number;\n  totalPermissions?: number;\n  activeUsers?: number;\n}\n\nexport default function AdminDashboard() {\n  const { data: user } = useQuery({ queryKey: [\"/api/user\"] });\n  const { hasPermission } = usePermissions();\n  const { data: stats, isLoading: statsLoading } = useQuery<AdminStats>({\n    queryKey: [\"/api/admin/stats\"],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"relative mb-8 p-6 bg-gradient-to-r from-primary to-blue-600 text-white rounded-xl overflow-hidden\">\n          <div \n            className=\"absolute inset-0 opacity-15\"\n            style={{\n              backgroundImage: `url('/src/assets/geometric-design.png')`,\n              backgroundSize: 'cover',\n              backgroundPosition: 'center',\n              backgroundRepeat: 'no-repeat'\n            }}\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-r from-primary/80 to-blue-600/80\" />\n          <div className=\"relative z-10\">\n            <h1 className=\"text-3xl font-bold\">\n              {(user as any)?.isSuperAdmin ? \"Super Admin Panel\" : \"Manager Panel\"}\n            </h1>\n            <p className=\"mt-2 opacity-90\">\n              {(user as any)?.isSuperAdmin \n                ? \"Complete system administration with full access to all features\" \n                : \"Limited management access - contact Super Admin for additional permissions\"\n              }\n            </p>\n          </div>\n        </div>\n\n        {/* Stats Overview */}\n        <div className={`grid grid-cols-1 ${(user as any)?.isSuperAdmin ? 'md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8' : 'md:grid-cols-4'} gap-6 mb-8`}>\n          <Card className=\"bg-gradient-to-br from-green-50 to-emerald-100 border-green-200 hover:shadow-2xl\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-semibold text-green-800\">Total Revenue</CardTitle>\n              <div className=\"p-2 bg-green-500 rounded-full\">\n                <DollarSign className=\"h-5 w-5 text-white\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              {statsLoading ? (\n                <Skeleton className=\"h-8 w-20\" />\n              ) : (\n                <div className=\"text-3xl font-bold text-green-700\">${stats?.revenue || \"0.00\"}</div>\n              )}\n              <p className=\"text-xs text-green-600 mt-1\">from all orders</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-blue-50 to-indigo-100 border-blue-200 hover:shadow-2xl\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-semibold text-blue-800\">Total Orders</CardTitle>\n              <div className=\"p-2 bg-blue-500 rounded-full\">\n                <ShoppingBag className=\"h-5 w-5 text-white\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              {statsLoading ? (\n                <Skeleton className=\"h-8 w-20\" />\n              ) : (\n                <div className=\"text-3xl font-bold text-blue-700\">{stats?.orders || 0}</div>\n              )}\n              <p className=\"text-xs text-blue-600 mt-1\">completed orders</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-purple-50 to-violet-100 border-purple-200 hover:shadow-2xl\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-semibold text-purple-800\">Total Products</CardTitle>\n              <div className=\"p-2 bg-purple-500 rounded-full\">\n                <Package className=\"h-5 w-5 text-white\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              {statsLoading ? (\n                <Skeleton className=\"h-8 w-20\" />\n              ) : (\n                <div className=\"text-3xl font-bold text-purple-700\">{stats?.products || 0}</div>\n              )}\n              <p className=\"text-xs text-purple-600 mt-1\">available</p>\n            </CardContent>\n          </Card>\n\n\n\n          <Card className=\"bg-gradient-to-br from-orange-50 to-amber-100 border-orange-200 hover:shadow-2xl\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-semibold text-orange-800\">Total Users</CardTitle>\n              <div className=\"p-2 bg-orange-500 rounded-full\">\n                <Users className=\"h-5 w-5 text-white\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              {statsLoading ? (\n                <Skeleton className=\"h-8 w-20\" />\n              ) : (\n                <div className=\"text-3xl font-bold text-orange-700\">{stats?.users || 0}</div>\n              )}\n              <p className=\"text-xs text-orange-600 mt-1\">registered users</p>\n            </CardContent>\n          </Card>\n\n          {/* Super Admin Only Cards */}\n          {(user as any)?.isSuperAdmin && (\n            <>\n              <Card className=\"bg-gradient-to-br from-red-50 to-rose-100 border-red-200 hover:shadow-2xl\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-semibold text-red-800\">Pending Orders</CardTitle>\n                  <div className=\"p-2 bg-red-500 rounded-full\">\n                    <Clock className=\"h-5 w-5 text-white\" />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {statsLoading ? (\n                    <Skeleton className=\"h-8 w-20\" />\n                  ) : (\n                    <div className=\"text-3xl font-bold text-red-700\">{stats?.pendingOrders || 0}</div>\n                  )}\n                  <p className=\"text-xs text-red-600 mt-1\">awaiting approval</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-indigo-50 to-blue-100 border-indigo-200 hover:shadow-2xl\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-semibold text-indigo-800\">Active Users</CardTitle>\n                  <div className=\"p-2 bg-indigo-500 rounded-full\">\n                    <UserCheck className=\"h-5 w-5 text-white\" />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {statsLoading ? (\n                    <Skeleton className=\"h-8 w-20\" />\n                  ) : (\n                    <div className=\"text-3xl font-bold text-indigo-700\">{stats?.activeUsers || 0}</div>\n                  )}\n                  <p className=\"text-xs text-indigo-600 mt-1\">active this month</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-yellow-50 to-amber-100 border-yellow-200 hover:shadow-2xl\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-semibold text-yellow-800\">Total Roles</CardTitle>\n                  <div className=\"p-2 bg-yellow-500 rounded-full\">\n                    <Crown className=\"h-5 w-5 text-white\" />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {statsLoading ? (\n                    <Skeleton className=\"h-8 w-20\" />\n                  ) : (\n                    <div className=\"text-3xl font-bold text-yellow-700\">{stats?.totalRoles || 3}</div>\n                  )}\n                  <p className=\"text-xs text-yellow-600 mt-1\">system roles</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-teal-50 to-cyan-100 border-teal-200 hover:shadow-2xl\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-semibold text-teal-800\">Permissions</CardTitle>\n                  <div className=\"p-2 bg-teal-500 rounded-full\">\n                    <Database className=\"h-5 w-5 text-white\" />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {statsLoading ? (\n                    <Skeleton className=\"h-8 w-20\" />\n                  ) : (\n                    <div className=\"text-3xl font-bold text-teal-700\">{stats?.totalPermissions || 85}</div>\n                  )}\n                  <p className=\"text-xs text-teal-600 mt-1\">total permissions</p>\n                </CardContent>\n              </Card>\n            </>\n          )}\n        </div>\n\n        {/* Management Tabs */}\n        <Tabs defaultValue=\"approvals\" className=\"space-y-6\">\n          <div className=\"overflow-x-auto\">\n            <TabsList className=\"inline-flex h-auto w-auto min-w-full p-1 bg-muted rounded-md justify-start md:justify-center flex-nowrap md:flex-wrap gap-1\">\n            {hasPermission(\"orders.approve\") && (\n              <TabsTrigger value=\"approvals\" className=\"flex items-center gap-1 sm:gap-2 px-2 sm:px-3 py-2 whitespace-nowrap text-xs sm:text-sm\">\n                <CheckCircle className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                <span className=\"hidden xs:inline\">Approvals</span>\n                <span className=\"xs:hidden\">App</span>\n              </TabsTrigger>\n            )}\n            {hasPermission(\"orders.view\") && (\n              <TabsTrigger value=\"orders\" className=\"flex items-center gap-1 sm:gap-2 px-2 sm:px-3 py-2 whitespace-nowrap text-xs sm:text-sm\">\n                <ShoppingBag className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                <span className=\"hidden xs:inline\">Orders</span>\n                <span className=\"xs:hidden\">Ord</span>\n              </TabsTrigger>\n            )}\n            {hasPermission(\"categories.view\") && (\n              <TabsTrigger value=\"categories\" className=\"flex items-center gap-1 sm:gap-2 px-2 sm:px-3 py-2 whitespace-nowrap text-xs sm:text-sm\">\n                <ShoppingCart className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                <span className=\"hidden xs:inline\">Categories</span>\n                <span className=\"xs:hidden\">Cat</span>\n              </TabsTrigger>\n            )}\n            {hasPermission(\"products.view\") && (\n              <TabsTrigger value=\"products\" className=\"flex items-center gap-1 sm:gap-2 px-2 sm:px-3 py-2 whitespace-nowrap text-xs sm:text-sm\">\n                <Package className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                <span className=\"hidden xs:inline\">Products</span>\n                <span className=\"xs:hidden\">Prod</span>\n              </TabsTrigger>\n            )}\n            {hasPermission(\"slider.view\") && (\n              <TabsTrigger value=\"slider\" className=\"flex items-center gap-1 sm:gap-2 px-2 sm:px-3 py-2 whitespace-nowrap text-xs sm:text-sm\">\n                <FileSpreadsheet className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                <span className=\"hidden xs:inline\">Slider</span>\n                <span className=\"xs:hidden\">Sld</span>\n              </TabsTrigger>\n            )}\n            {hasPermission(\"users.view\") && (\n              <TabsTrigger value=\"users\" className=\"flex items-center gap-1 sm:gap-2 px-2 sm:px-3 py-2 whitespace-nowrap text-xs sm:text-sm\">\n                <Users className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                <span className=\"hidden xs:inline\">Users</span>\n                <span className=\"xs:hidden\">Usr</span>\n              </TabsTrigger>\n            )}\n            {(user as any)?.isSuperAdmin && (\n              <TabsTrigger value=\"permissions\" className=\"flex items-center gap-1 sm:gap-2 px-2 sm:px-3 py-2 whitespace-nowrap text-xs sm:text-sm\">\n                <Shield className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                <span className=\"hidden xs:inline\">Roles</span>\n                <span className=\"xs:hidden\">Rol</span>\n              </TabsTrigger>\n            )}\n            {hasPermission(\"database.export\") && (\n              <TabsTrigger value=\"excel\" className=\"flex items-center gap-1 sm:gap-2 px-2 sm:px-3 py-2 whitespace-nowrap text-xs sm:text-sm\">\n                <FileSpreadsheet className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                <span className=\"hidden xs:inline\">Excel</span>\n                <span className=\"xs:hidden\">Exc</span>\n              </TabsTrigger>\n            )}\n            {hasPermission(\"database.export\") && (\n              <TabsTrigger value=\"database\" className=\"flex items-center gap-1 sm:gap-2 px-2 sm:px-3 py-2 whitespace-nowrap text-xs sm:text-sm\">\n                <FileSpreadsheet className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                <span className=\"hidden xs:inline\">Database</span>\n                <span className=\"xs:hidden\">DB</span>\n              </TabsTrigger>\n            )}\n            {hasPermission(\"units.view\") && (\n              <TabsTrigger value=\"units\" className=\"flex items-center gap-1 sm:gap-2 px-2 sm:px-3 py-2 whitespace-nowrap text-xs sm:text-sm\">\n                <Package className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                <span className=\"hidden xs:inline\">Units</span>\n                <span className=\"xs:hidden\">Un</span>\n              </TabsTrigger>\n            )}\n            {hasPermission(\"settings.view\") && (\n              <TabsTrigger value=\"settings\" className=\"flex items-center gap-1 sm:gap-2 px-2 sm:px-3 py-2 whitespace-nowrap text-xs sm:text-sm\">\n                <Settings className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                <span className=\"hidden xs:inline\">Settings</span>\n                <span className=\"xs:hidden\">Set</span>\n              </TabsTrigger>\n            )}\n            </TabsList>\n          </div>\n\n          {hasPermission(\"orders.approve\") && (\n            <TabsContent value=\"approvals\">\n              <AdminRequestSection />\n            </TabsContent>\n          )}\n\n          {hasPermission(\"orders.view\") && (\n            <TabsContent value=\"orders\">\n              <OrderManager />\n            </TabsContent>\n          )}\n\n          {hasPermission(\"categories.view\") && (\n            <TabsContent value=\"categories\">\n              <CategoryManager />\n            </TabsContent>\n          )}\n\n          {hasPermission(\"products.view\") && (\n            <TabsContent value=\"products\">\n              <ProductManager />\n            </TabsContent>\n          )}\n\n          {hasPermission(\"slider.view\") && (\n            <TabsContent value=\"slider\">\n              <SliderManager />\n            </TabsContent>\n          )}\n\n          {hasPermission(\"users.view\") && (\n            <TabsContent value=\"users\">\n              <UserManager />\n            </TabsContent>\n          )}\n\n          {(user as any)?.isSuperAdmin && (\n            <TabsContent value=\"permissions\">\n              <RolePermissionManager />\n            </TabsContent>\n          )}\n\n          {hasPermission(\"database.export\") && (\n            <TabsContent value=\"excel\">\n              <ExcelManager />\n            </TabsContent>\n          )}\n\n          {hasPermission(\"database.export\") && (\n            <TabsContent value=\"database\">\n              <DatabaseManager />\n            </TabsContent>\n          )}\n\n          {hasPermission(\"units.view\") && (\n            <TabsContent value=\"units\">\n              <UnitsOfMeasureManager />\n            </TabsContent>\n          )}\n\n          {hasPermission(\"settings.view\") && (\n            <TabsContent value=\"settings\">\n              <SiteSettings />\n            </TabsContent>\n          )}\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":17115},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n// Removed tabs import - only login now available\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema, type SiteSettings } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Loader2, Store, Shield, Truck, CreditCard } from \"lucide-react\";\n\nconst loginSchema = insertUserSchema.pick({ username: true, password: true });\ntype LoginData = z.infer<typeof loginSchema>;\n\nexport default function AuthPage() {\n  const { user, loginMutation } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: settings } = useQuery<SiteSettings>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const loginForm = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: { username: \"\", password: \"\" },\n  });\n\n  // Redirect if already logged in (use effect to avoid render issues)\n  if (user) {\n    setTimeout(() => setLocation(\"/\"), 0);\n    return null;\n  }\n\n  const onLogin = (data: LoginData) => {\n    loginMutation.mutate(data, {\n      onSuccess: () => setLocation(\"/\"),\n    });\n  };\n\n  // Registration removed - login only\n\n  return (\n    <div className=\"min-h-screen flex flex-col lg:flex-row\">\n      {/* Left side - Forms */}\n      <div className=\"flex-1 flex items-center justify-center p-4 sm:p-6 lg:p-8 bg-white dark:bg-gray-900\">\n        <div className=\"w-full max-w-md space-y-6 sm:space-y-8\">\n          <div className=\"text-center\">\n            {settings?.loginPageLogo && settings.loginPageLogo.trim() !== \"\" && (\n              <img \n                src={settings.loginPageLogo} \n                alt={settings.loginPageTitle || \"Login\"} \n                className=\"w-auto mx-auto mb-4 sm:mb-6 max-w-full h-auto\"\n                style={{ \n                  height: `${Math.min(settings.loginPageLogoWidth || 80, 120)}px`,\n                  maxHeight: '120px'\n                }}\n              />\n            )}\n            {settings?.loginPageTitle && settings.loginPageTitle.trim() !== \"\" && (\n              <h1 className=\"text-2xl sm:text-3xl font-bold text-slate-900 dark:text-white\">\n                {settings.loginPageTitle}\n              </h1>\n            )}\n          </div>\n\n          <Card className=\"shadow-lg border-0 sm:border bg-white dark:bg-gray-800\">\n            <CardHeader className=\"pb-4 sm:pb-6\">\n              <CardTitle className=\"text-lg sm:text-xl text-center dark:text-white\">\n                Sign In to Your Account\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n              <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4 sm:space-y-5\">\n                <div>\n                  <Label htmlFor=\"username\" className=\"text-sm font-medium dark:text-gray-200\">\n                    Username\n                  </Label>\n                  <Input\n                    id=\"username\"\n                    {...loginForm.register(\"username\")}\n                    className=\"mt-2 h-11 text-base dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder-gray-400\"\n                    placeholder=\"Enter your username\"\n                  />\n                  {loginForm.formState.errors.username && (\n                    <p className=\"text-sm text-red-500 mt-2\">\n                      {loginForm.formState.errors.username.message}\n                    </p>\n                  )}\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"password\" className=\"text-sm font-medium dark:text-gray-200\">\n                    Password\n                  </Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    {...loginForm.register(\"password\")}\n                    className=\"mt-2 h-11 text-base dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder-gray-400\"\n                    placeholder=\"Enter your password\"\n                  />\n                  {loginForm.formState.errors.password && (\n                    <p className=\"text-sm text-red-500 mt-2\">\n                      {loginForm.formState.errors.password.message}\n                    </p>\n                  )}\n                </div>\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full h-11 text-base font-medium mt-6\" \n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Signing in...\n                    </>\n                  ) : (\n                    \"Sign In\"\n                  )}\n                </Button>\n              </form>\n              \n              <div className=\"mt-6 p-4 bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg\">\n                <p className=\"text-sm text-amber-800 dark:text-amber-200\">\n                  <strong>Need an account?</strong> Contact your store administrator for access credentials.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Right side - Background Image (hidden on mobile, visible on large screens) */}\n      <div \n        className=\"hidden lg:flex lg:flex-1 relative overflow-hidden\"\n        style={{\n          backgroundImage: `url('/uploads/login-separator.png')`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundRepeat: 'no-repeat'\n        }}\n      >\n        {/* Optional overlay for better contrast */}\n        <div className=\"absolute inset-0 bg-black/10\"></div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6113},"client/src/pages/cart-page.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { Minus, Plus, Trash2, ShoppingBag } from \"lucide-react\";\nimport type { CartItem, Product } from \"@shared/schema\";\n\ntype CartItemWithProduct = CartItem & { product: Product };\n\nexport default function CartPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: cartItems, isLoading } = useQuery<CartItemWithProduct[]>({\n    queryKey: [\"/api/cart\"],\n  });\n\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ productId, quantity }: { productId: string; quantity: number }) => {\n      const res = await apiRequest(`/api/cart/${productId}`, \"PUT\", { quantity });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update cart item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeItemMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      await apiRequest(`/api/cart/${productId}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Success\",\n        description: \"Item removed from cart\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const subtotal = cartItems?.reduce(\n    (sum, item) => {\n      // Use totalPrice from cart item if available (for rentals), otherwise calculate from product price\n      const itemTotal = item.totalPrice ? parseFloat(item.totalPrice) : parseFloat(item.product.price) * item.quantity;\n      return sum + itemTotal;\n    },\n    0\n  ) || 0;\n\n  const tax = subtotal * 0.10; // 10% VAT\n  const total = subtotal + tax;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <Skeleton className=\"h-8 w-48 mb-8\" />\n          <Card>\n            <CardContent className=\"p-6\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"flex items-center space-x-4 p-4 border-b last:border-b-0\">\n                  <Skeleton className=\"h-20 w-20\" />\n                  <div className=\"flex-1\">\n                    <Skeleton className=\"h-6 w-48 mb-2\" />\n                    <Skeleton className=\"h-4 w-32\" />\n                  </div>\n                  <Skeleton className=\"h-8 w-24\" />\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </div>\n        \n      </div>\n    );\n  }\n\n  if (!cartItems || cartItems.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center py-16\">\n            <ShoppingBag className=\"w-24 h-24 text-slate-300 mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-slate-900 mb-2\">Your cart is empty</h1>\n            <p className=\"text-slate-600 mb-8\">Add some products to get started!</p>\n            <Button onClick={() => setLocation(\"/products\")}>\n              Continue Shopping\n            </Button>\n          </div>\n        </div>\n        \n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-slate-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <h1 className=\"text-3xl font-bold text-slate-900 mb-8\">Shopping Cart</h1>\n        \n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Cart Items ({cartItems.length})</CardTitle>\n          </CardHeader>\n          \n          <CardContent className=\"divide-y divide-slate-200\">\n            {cartItems.map((item) => (\n              <div key={item.id} className=\"py-6 flex flex-col sm:flex-row items-start sm:items-center space-y-4 sm:space-y-0 sm:space-x-6\">\n                <div className=\"flex-shrink-0\">\n                  {item.product.imageUrl ? (\n                    <img \n                      src={item.product.imageUrl} \n                      alt={item.product.name}\n                      className=\"w-20 h-20 object-cover rounded-lg\"\n                    />\n                  ) : (\n                    <div className=\"w-20 h-20 bg-slate-200 rounded-lg flex items-center justify-center\">\n                      <span className=\"text-slate-500 text-xs\">{item.product.name.charAt(0)}</span>\n                    </div>\n                  )}\n                </div>\n                \n                <div className=\"flex-1\">\n                  <h3 className=\"text-lg font-semibold text-slate-900\">{item.product.name}</h3>\n                  <p className=\"text-slate-600\">{item.product.description}</p>\n                  \n                  {/* Rental Information */}\n                  {item.product.productType === \"rental\" && item.rentalStartDate && item.rentalEndDate && (\n                    <div className=\"mt-2 space-y-1\">\n                      <p className=\"text-sm text-blue-600\">\n                        📅 Rental Period: {new Date(item.rentalStartDate).toLocaleDateString()} - {new Date(item.rentalEndDate).toLocaleDateString()}\n                      </p>\n                      <p className=\"text-sm text-green-600\">\n                        💰 Daily Rate: ${item.unitPrice || item.product.rentalPrice}\n                      </p>\n                    </div>\n                  )}\n                  \n                  <div className=\"mt-2 flex items-center space-x-4\">\n                    <span className=\"text-primary font-semibold\">\n                      {item.totalPrice ? `Total: $${parseFloat(item.totalPrice).toFixed(2)}` : `$${item.product.price}`}\n                    </span>\n                    \n                    {/* Only show quantity controls for sale products, not rentals */}\n                    {item.product.productType !== \"rental\" && (\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"h-8 w-8 p-0\"\n                          onClick={() => \n                            updateQuantityMutation.mutate({\n                              productId: item.productId,\n                              quantity: Math.max(1, item.quantity - 1)\n                            })\n                          }\n                          disabled={updateQuantityMutation.isPending}\n                        >\n                          {updateQuantityMutation.isPending ? (\n                            <div className=\"animate-spin rounded-full h-3 w-3 border border-gray-400 border-t-transparent\"></div>\n                          ) : (\n                            <Minus className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                        <span className=\"w-12 text-center font-medium\">{item.quantity}</span>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"h-8 w-8 p-0\"\n                          onClick={() => \n                            updateQuantityMutation.mutate({\n                              productId: item.productId,\n                              quantity: item.quantity + 1\n                            })\n                          }\n                          disabled={updateQuantityMutation.isPending}\n                        >\n                          {updateQuantityMutation.isPending ? (\n                            <div className=\"animate-spin rounded-full h-3 w-3 border border-gray-400 border-t-transparent\"></div>\n                          ) : (\n                            <Plus className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    )}\n                    \n                    {/* Show quantity for rental items as read-only */}\n                    {item.product.productType === \"rental\" && (\n                      <span className=\"text-sm text-gray-600\">Qty: {item.quantity}</span>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-4\">\n                  <span className=\"text-lg font-bold text-slate-900\">\n                    ${item.totalPrice ? parseFloat(item.totalPrice).toFixed(2) : (parseFloat(item.product.price) * item.quantity).toFixed(2)}\n                  </span>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    className=\"text-red-500 hover:text-red-600 hover:bg-red-50\"\n                    onClick={() => removeItemMutation.mutate(item.productId)}\n                    disabled={removeItemMutation.isPending}\n                  >\n                    {removeItemMutation.isPending ? (\n                      <div className=\"animate-spin rounded-full h-4 w-4 border border-red-400 border-t-transparent\"></div>\n                    ) : (\n                      <Trash2 className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n\n        {/* Order Summary */}\n        <Card>\n          <CardContent className=\"p-6 bg-slate-50\">\n            <div className=\"space-y-2 mb-4\">\n              <div className=\"flex justify-between text-slate-600\">\n                <span>Subtotal:</span>\n                <span className=\"font-medium\">${subtotal.toFixed(2)}</span>\n              </div>\n              <div className=\"flex justify-between text-slate-600\">\n                <span>Shipping:</span>\n                <span className=\"font-medium\">Free</span>\n              </div>\n              <div className=\"flex justify-between text-slate-600\">\n                <span>VAT (10%):</span>\n                <span className=\"font-medium\">${tax.toFixed(2)}</span>\n              </div>\n              <div className=\"flex justify-between text-xl font-bold text-slate-900 pt-2 border-t border-slate-200\">\n                <span>Total:</span>\n                <span>${total.toFixed(2)}</span>\n              </div>\n            </div>\n            \n            <div className=\"flex space-x-4\">\n              <Button \n                variant=\"outline\" \n                className=\"flex-1\"\n                onClick={() => setLocation(\"/products\")}\n              >\n                Continue Shopping\n              </Button>\n              <Button \n                className=\"flex-1\"\n                onClick={() => setLocation(\"/checkout\")}\n              >\n                Proceed to Checkout\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      \n    </div>\n  );\n}\n","size_bytes":11239},"client/src/pages/categories-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useLocation } from \"wouter\";\nimport type { Category } from \"@shared/schema\";\n\nexport default function CategoriesPage() {\n  const [, setLocation] = useLocation();\n\n  const { data: categories, isLoading } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  return (\n    <div className=\"bg-slate-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-slate-900 mb-4\">Shop by Category</h1>\n          <p className=\"text-slate-600\">Browse our curated collection of premium products organized by category</p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n            {[...Array(8)].map((_, i) => (\n              <Card key={i} className=\"group relative overflow-hidden bg-white/70 backdrop-blur-sm border-0 shadow-xl\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-white to-slate-50 opacity-80\"></div>\n                <div className=\"relative\">\n                  <Skeleton className=\"h-56 w-full\" />\n                  <CardContent className=\"p-6\">\n                    <Skeleton className=\"h-6 w-3/4 mb-3\" />\n                    <Skeleton className=\"h-4 w-full mb-4\" />\n                    <Skeleton className=\"h-6 w-32\" />\n                  </CardContent>\n                </div>\n              </Card>\n            ))}\n          </div>\n        ) : categories && categories.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n            {categories.map((category) => (\n              <Card \n                key={category.id} \n                className=\"group cursor-pointer overflow-hidden border-none shadow-lg hover:shadow-2xl transition-all duration-500 hover:scale-[1.02] bg-gradient-to-br from-white to-slate-50/80 backdrop-blur-sm\"\n                onClick={() => setLocation(`/category/${category.id}`)}\n              >\n                <div className=\"relative overflow-hidden\">\n                  {category.imageUrl ? (\n                    <img \n                      src={category.imageUrl} \n                      alt={category.name}\n                      className=\"w-full h-56 object-cover group-hover:scale-110 transition-transform duration-500\"\n                    />\n                  ) : (\n                    <div className=\"w-full h-56 bg-gradient-to-br from-emerald-100 via-blue-50 to-purple-100 flex items-center justify-center group-hover:scale-110 transition-transform duration-500\">\n                      <div className=\"text-center\">\n                        <div className=\"w-16 h-16 bg-gradient-to-r from-emerald-500 to-blue-500 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-lg\">\n                          <span className=\"text-white text-2xl font-bold\">\n                            {category.name.charAt(0)}\n                          </span>\n                        </div>\n                        <span className=\"text-slate-600 text-lg font-semibold\">{category.name}</span>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* Hover Overlay */}\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                </div>\n                \n                <CardContent className=\"p-6 bg-gradient-to-b from-transparent to-slate-50/30\">\n                  <h3 className=\"text-xl font-bold text-slate-900 mb-3 group-hover:text-emerald-700 transition-colors duration-300\">\n                    {category.name}\n                  </h3>\n                  <p className=\"text-slate-600 text-sm mb-4 line-clamp-2 leading-relaxed\">\n                    {category.description || \"Discover our curated collection of premium products\"}\n                  </p>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-emerald-600 font-semibold group-hover:text-emerald-700 transition-colors duration-300\">\n                      Browse Products\n                    </span>\n                    <svg className=\"w-5 h-5 text-emerald-600 group-hover:text-emerald-700 group-hover:translate-x-1 transition-all duration-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 8l4 4m0 0l-4 4m4-4H3\" />\n                    </svg>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-16\">\n            <div className=\"w-24 h-24 bg-slate-200 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-12 h-12 text-slate-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\" />\n              </svg>\n            </div>\n            <h3 className=\"text-xl font-semibold text-slate-900 mb-2\">No Categories Available</h3>\n            <p className=\"text-slate-600\">Categories will be displayed here once they are added by the administrator.</p>\n          </div>\n        )}\n      </div>\n      \n    </div>\n  );\n}","size_bytes":5706},"client/src/pages/category-detail-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ProductCard } from \"@/components/product-card\";\n\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Package } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useLocation, useParams } from \"wouter\";\nimport type { Product, Category } from \"@shared/schema\";\n\nexport default function CategoryDetailPage() {\n  const { categoryId } = useParams<{ categoryId: string }>();\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n\n  const { data: products, isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: categories } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const currentCategory = categories?.find(c => c.id === categoryId);\n\n  const filteredProducts = products?.filter((product) => {\n    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.description?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = product.categoryId === categoryId;\n    return matchesSearch && matchesCategory;\n  }) || [];\n\n  if (!currentCategory && categories) {\n    return (\n      <div className=\"bg-slate-50 min-h-screen\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n          <div className=\"text-center\">\n            <Package className=\"w-24 h-24 text-slate-300 mx-auto mb-4\" />\n            <h1 className=\"text-3xl font-bold text-slate-900 mb-4\">Category Not Found</h1>\n            <p className=\"text-slate-600 mb-8\">The category you're looking for doesn't exist.</p>\n            <Button onClick={() => setLocation(\"/categories\")}>\n              Browse All Categories\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-slate-50 min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <Button \n            variant=\"outline\" \n            onClick={() => setLocation(\"/categories\")} \n            className=\"mb-6\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Categories\n          </Button>\n\n          <div className=\"mb-6\">\n            {currentCategory?.imageUrl && (\n              <div className=\"w-full h-64 mb-6 rounded-2xl overflow-hidden shadow-lg\">\n                <img \n                  src={currentCategory.imageUrl} \n                  alt={currentCategory.name}\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n            )}\n            \n            <h1 className=\"text-4xl font-bold text-slate-900 mb-4\">\n              {currentCategory?.name || \"Category\"}\n            </h1>\n            \n            {currentCategory?.description && (\n              <p className=\"text-lg text-slate-600 mb-6\">\n                {currentCategory.description}\n              </p>\n            )}\n\n            <div className=\"flex items-center text-sm text-slate-500\">\n              <Package className=\"w-4 h-4 mr-2\" />\n              {filteredProducts.length} products available\n            </div>\n          </div>\n          \n          {/* Search */}\n          <div className=\"mb-8\">\n            <Input\n              placeholder={`Search ${currentCategory?.name || 'category'} products...`}\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"max-w-md\"\n            />\n          </div>\n        </div>\n\n        {productsLoading ? (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {[...Array(8)].map((_, i) => (\n              <Card key={i} className=\"overflow-hidden\">\n                <Skeleton className=\"h-48 w-full\" />\n                <CardContent className=\"p-6\">\n                  <Skeleton className=\"h-6 w-3/4 mb-2\" />\n                  <Skeleton className=\"h-4 w-full mb-4\" />\n                  <Skeleton className=\"h-8 w-20 mb-4\" />\n                  <Skeleton className=\"h-10 w-full\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : filteredProducts.length > 0 ? (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {filteredProducts.map((product) => (\n              <ProductCard \n                key={product.id} \n                product={product}\n                onCardClick={(product) => setLocation(`/products/${product.id}`)}\n                showDetailsButton={false}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-16\">\n            <Package className=\"w-24 h-24 text-slate-300 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-slate-900 mb-2\">\n              {searchQuery ? \"No Products Found\" : \"No Products Yet\"}\n            </h2>\n            <p className=\"text-slate-600 mb-8\">\n              {searchQuery \n                ? `No products found matching \"${searchQuery}\" in ${currentCategory?.name}.`\n                : `No products have been added to ${currentCategory?.name} yet.`\n              }\n            </p>\n            {searchQuery && (\n              <Button variant=\"outline\" onClick={() => setSearchQuery(\"\")}>\n                Clear Search\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n\n\n      \n    </div>\n  );\n}","size_bytes":5658},"client/src/pages/checkout-page.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useLocation, useParams } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { OrderApprovalModal } from \"@/components/order-approval-modal\";\nimport { OrderPaymentCheckout } from \"@/components/order-payment-checkout\";\nimport type { CartItem, Product } from \"@shared/schema\";\n\nconst customerInfoSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n});\n\ntype CustomerInfoData = z.infer<typeof customerInfoSchema>;\ntype CartItemWithProduct = CartItem & { product: Product };\n\nexport default function CheckoutPage() {\n  const [, setLocation] = useLocation();\n  const params = useParams();\n  const { toast } = useToast();\n\n  // If orderId is provided, render order payment checkout\n  if (params.orderId) {\n    return <OrderPaymentCheckout orderId={params.orderId} />;\n  }\n\n  const [showApprovalModal, setShowApprovalModal] = useState(false);\n  const [createdOrder, setCreatedOrder] = useState<{ id: string; total: string } | null>(null);\n\n  const { data: cartItems, isLoading } = useQuery<CartItemWithProduct[]>({\n    queryKey: [\"/api/cart\"],\n  });\n\n  const form = useForm<CustomerInfoData>({\n    resolver: zodResolver(customerInfoSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n    },\n  });\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      const res = await apiRequest(\"/api/orders\", \"POST\", orderData);\n      return res.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      \n      setCreatedOrder({\n        id: data.id,\n        total: data.total\n      });\n      setShowApprovalModal(true);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create order. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!cartItems || cartItems.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-16 text-center\">\n          <h1 className=\"text-2xl font-bold text-slate-900 mb-4\">Cart is Empty</h1>\n          <p className=\"text-slate-600 mb-8\">Add some products to your cart before checkout.</p>\n          <Button onClick={() => setLocation(\"/products\")}>\n            Continue Shopping\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const subtotal = cartItems.reduce((total, item) => {\n    // Use calculated total price from cart item if available, otherwise fallback to product price\n    const itemTotal = item.totalPrice ? parseFloat(item.totalPrice) : (parseFloat(item.product.price) * item.quantity);\n    return total + itemTotal;\n  }, 0);\n\n  const tax = subtotal * 0.10;\n  const total = subtotal + tax;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-slate-200 rounded w-48 mb-8\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              <div className=\"space-y-4\">\n                <div className=\"h-64 bg-white rounded-lg\"></div>\n              </div>\n              <div className=\"h-96 bg-white rounded-lg\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const onSubmit = (customerData: CustomerInfoData) => {\n    createOrderMutation.mutate({\n      customerInfo: customerData,\n      status: \"awaiting_approval\",\n      adminApprovalStatus: \"pending\",\n    });\n  };\n\n  const handleApprovalModalClose = () => {\n    setShowApprovalModal(false);\n    setCreatedOrder(null);\n    setLocation(\"/orders\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <h1 className=\"text-3xl font-bold text-slate-900 mb-8\">Checkout</h1>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Checkout Form */}\n          <div className=\"space-y-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Customer Information</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        {...form.register(\"firstName\")}\n                        className=\"mt-1\"\n                      />\n                      {form.formState.errors.firstName && (\n                        <p className=\"text-sm text-red-500 mt-1\">\n                          {form.formState.errors.firstName.message}\n                        </p>\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input\n                        id=\"lastName\"\n                        {...form.register(\"lastName\")}\n                        className=\"mt-1\"\n                      />\n                      {form.formState.errors.lastName && (\n                        <p className=\"text-sm text-red-500 mt-1\">\n                          {form.formState.errors.lastName.message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      {...form.register(\"email\")}\n                      className=\"mt-1\"\n                    />\n                    {form.formState.errors.email && (\n                      <p className=\"text-sm text-red-500 mt-1\">\n                        {form.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      {...form.register(\"phone\")}\n                      className=\"mt-1\"\n                    />\n                    {form.formState.errors.phone && (\n                      <p className=\"text-sm text-red-500 mt-1\">\n                        {form.formState.errors.phone.message}\n                      </p>\n                    )}\n                  </div>\n                  \n                  <Button\n                    type=\"submit\"\n                    className=\"w-full mt-8\"\n                    disabled={createOrderMutation.isPending}\n                  >\n                    {createOrderMutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\"></div>\n                        Submitting Order...\n                      </>\n                    ) : (\n                      \"Submit Order for Approval\"\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Summary */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle>Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {cartItems.map((item) => {\n                    // Use calculated total price from cart item if available, otherwise fallback to product price\n                    const itemTotal = item.totalPrice ? parseFloat(item.totalPrice) : (parseFloat(item.product.price) * item.quantity);\n                    const unitPrice = item.unitPrice ? parseFloat(item.unitPrice) : parseFloat(item.product.price);\n                    \n                    return (\n                      <div key={item.id} className=\"flex justify-between items-center py-2 border-b border-slate-200\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-slate-900\">{item.product.name}</h4>\n                          <div className=\"text-sm text-slate-600 space-y-1\">\n                            <p>Quantity: {item.quantity}</p>\n                            {item.rentalStartDate && item.rentalEndDate && (\n                              <p>\n                                Rental: {new Date(item.rentalStartDate).toLocaleDateString()} - {new Date(item.rentalEndDate).toLocaleDateString()}\n                              </p>\n                            )}\n                            <p>Unit Price: ${unitPrice.toFixed(2)}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-medium text-slate-900\">\n                            ${itemTotal.toFixed(2)}\n                          </p>\n                        </div>\n                      </div>\n                    );\n                  })}\n                  \n                  <div className=\"space-y-2 pt-4 border-t border-slate-200\">\n                    <div className=\"flex justify-between text-slate-600\">\n                      <span>Subtotal</span>\n                      <span>${subtotal.toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between text-slate-600\">\n                      <span>VAT (10%)</span>\n                      <span>${tax.toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between text-lg font-bold text-slate-900 pt-2 border-t border-slate-200\">\n                      <span>Total</span>\n                      <span>${total.toFixed(2)}</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Order Approval Modal */}\n      {showApprovalModal && createdOrder && (\n        <OrderApprovalModal\n          isOpen={showApprovalModal}\n          onClose={handleApprovalModalClose}\n          orderId={createdOrder.id}\n          orderTotal={createdOrder.total}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":11188},"client/src/pages/home-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ProductCard } from \"@/components/product-card\";\n\nimport { ImageSlider } from \"@/components/image-slider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useLocation } from \"wouter\";\nimport type { Category, Product, SliderImage } from \"@shared/schema\";\n\nexport default function HomePage() {\n  const [, setLocation] = useLocation();\n\n  const { data: categories, isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: featuredProducts, isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products/featured\"],\n  });\n\n  const { data: sliderImages } = useQuery<SliderImage[]>({\n    queryKey: [\"/api/slider-images/active\"],\n  });\n\n  return (\n    <div className=\"bg-slate-50\">\n      {/* Image Slider Section */}\n      <section className=\"w-full\">\n        <ImageSlider \n          images={sliderImages || []} \n          height=\"h-[60vh] min-h-[400px] w-full\"\n          autoplay={true}\n          autoplayInterval={5000}\n          showControls={true}\n          showIndicators={true}\n        />\n      </section>\n\n      {/* Product Categories */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Section Header */}\n          <div className=\"text-center mb-20\">\n            <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-emerald-600 to-blue-600 rounded-2xl mb-8 shadow-lg\">\n              <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\" />\n              </svg>\n            </div>\n            <h2 className=\"text-3xl md:text-4xl lg:text-5xl font-bold bg-gradient-to-r from-slate-900 via-emerald-900 to-blue-900 bg-clip-text text-transparent mb-6 leading-relaxed min-h-[4rem] flex items-center justify-center\">\n              Shop by Category\n            </h2>\n            <div className=\"w-24 h-1 bg-gradient-to-r from-emerald-600 to-blue-600 mx-auto rounded-full\"></div>\n          </div>\n          \n          {categoriesLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n              {[...Array(4)].map((_, i) => (\n                <Card key={i} className=\"group relative overflow-hidden bg-white/70 backdrop-blur-sm border-0 shadow-xl\">\n                  <div className=\"absolute inset-0 bg-gradient-to-br from-white to-slate-50 opacity-80\"></div>\n                  <div className=\"relative\">\n                    <Skeleton className=\"h-56 w-full\" />\n                    <CardContent className=\"p-6\">\n                      <Skeleton className=\"h-6 w-3/4 mb-3\" />\n                      <Skeleton className=\"h-4 w-full mb-4\" />\n                      <Skeleton className=\"h-6 w-32\" />\n                    </CardContent>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          ) : categories && categories.length > 0 ? (\n            <>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8 mb-12\">\n                {categories.map((category) => (\n                  <Card \n                    key={category.id} \n                    className=\"group cursor-pointer overflow-hidden border-none shadow-lg hover:shadow-2xl transition-all duration-500 hover:scale-[1.02] bg-gradient-to-br from-white to-slate-50/80 backdrop-blur-sm\"\n                    onClick={() => setLocation(`/category/${category.id}`)}\n                  >\n                    <div className=\"relative overflow-hidden\">\n                      {category.imageUrl ? (\n                        <img \n                          src={category.imageUrl} \n                          alt={category.name}\n                          className=\"w-full h-56 object-cover group-hover:scale-110 transition-transform duration-500\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-56 bg-gradient-to-br from-emerald-100 via-blue-50 to-purple-100 flex items-center justify-center group-hover:scale-110 transition-transform duration-500\">\n                          <div className=\"text-center\">\n                            <div className=\"w-16 h-16 bg-gradient-to-r from-emerald-500 to-blue-500 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-lg\">\n                              <span className=\"text-white text-2xl font-bold\">\n                                {category.name.charAt(0)}\n                              </span>\n                            </div>\n                            <span className=\"text-slate-600 text-lg font-semibold\">{category.name}</span>\n                          </div>\n                        </div>\n                      )}\n                      \n                      {/* Hover Overlay */}\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                    </div>\n                    \n                    <CardContent className=\"p-6 bg-gradient-to-b from-transparent to-slate-50/30\">\n                      <h3 className=\"text-xl font-bold text-slate-900 mb-3 group-hover:text-emerald-700 transition-colors duration-300\">\n                        {category.name}\n                      </h3>\n                      <p className=\"text-slate-600 text-sm mb-4 line-clamp-2 leading-relaxed\">\n                        {category.description || \"Discover our curated collection of premium products\"}\n                      </p>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-emerald-600 font-semibold group-hover:text-emerald-700 transition-colors duration-300\">\n                          Browse Products\n                        </span>\n                        <svg className=\"w-5 h-5 text-emerald-600 group-hover:text-emerald-700 group-hover:translate-x-1 transition-all duration-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 8l4 4m0 0l-4 4m4-4H3\" />\n                        </svg>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n              \n              {/* Call to Action */}\n              <div className=\"text-center\">\n                <Button\n                  size=\"lg\"\n                  onClick={() => setLocation(\"/categories\")}\n                  className=\"bg-gradient-to-r from-emerald-600 to-blue-600 hover:from-emerald-700 hover:to-blue-700 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105\"\n                >\n                  View All Categories\n                  <svg className=\"w-5 h-5 ml-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 8l4 4m0 0l-4 4m4-4H3\" />\n                  </svg>\n                </Button>\n              </div>\n            </>\n          ) : (\n            <div className=\"text-center py-16\">\n              <div className=\"inline-flex items-center justify-center w-20 h-20 bg-slate-100 rounded-full mb-6\">\n                <svg className=\"w-10 h-10 text-slate-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\" />\n                </svg>\n              </div>\n              <h3 className=\"text-2xl font-semibold text-slate-900 mb-3\">Categories Coming Soon</h3>\n              <p className=\"text-slate-600 max-w-md mx-auto\">\n                We're organizing our product collections. Check back soon for easy category browsing!\n              </p>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Featured Products */}\n      <section className=\"py-20 bg-slate-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Section Header */}\n          <div className=\"text-center mb-16\">\n            <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl mb-6 shadow-lg\">\n              <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\" />\n              </svg>\n            </div>\n            <h2 className=\"text-4xl lg:text-5xl font-bold bg-gradient-to-r from-slate-900 via-blue-900 to-purple-900 bg-clip-text text-transparent mb-4\">\n              Featured Products\n            </h2>\n            <p className=\"text-xl text-slate-600 max-w-2xl mx-auto\">\n              Discover our hand-picked selection of premium products, carefully chosen for quality and value\n            </p>\n            <div className=\"w-24 h-1 bg-gradient-to-r from-blue-600 to-purple-600 mx-auto mt-6 rounded-full\"></div>\n          </div>\n          \n          {productsLoading ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n              {[...Array(4)].map((_, i) => (\n                <Card key={i} className=\"group relative overflow-hidden bg-white/70 backdrop-blur-sm border-0 shadow-xl\">\n                  <div className=\"absolute inset-0 bg-gradient-to-br from-white to-slate-50 opacity-80\"></div>\n                  <div className=\"relative\">\n                    <Skeleton className=\"h-64 w-full\" />\n                    <CardContent className=\"p-6\">\n                      <Skeleton className=\"h-6 w-3/4 mb-3\" />\n                      <Skeleton className=\"h-4 w-full mb-4\" />\n                      <Skeleton className=\"h-8 w-24 mb-4\" />\n                      <Skeleton className=\"h-12 w-full\" />\n                    </CardContent>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          ) : featuredProducts && featuredProducts.length > 0 ? (\n            <>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8 mb-12\">\n                {featuredProducts.map((product) => (\n                  <ProductCard \n                    key={product.id} \n                    product={product}\n                    onCardClick={(product) => setLocation(`/products/${product.id}`)}\n                    showDetailsButton={false}\n                  />\n                ))}\n              </div>\n              \n              {/* Call to Action */}\n              <div className=\"text-center\">\n                <Button\n                  size=\"lg\"\n                  onClick={() => setLocation(\"/products\")}\n                  className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-8 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105\"\n                >\n                  View All Products\n                  <svg className=\"w-5 h-5 ml-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 8l4 4m0 0l-4 4m4-4H3\" />\n                  </svg>\n                </Button>\n              </div>\n            </>\n          ) : (\n            <div className=\"text-center py-16\">\n              <div className=\"inline-flex items-center justify-center w-20 h-20 bg-slate-100 rounded-full mb-6\">\n                <svg className=\"w-10 h-10 text-slate-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4-8-4m16 0v10l-8 4-8-4V7\" />\n                </svg>\n              </div>\n              <h3 className=\"text-2xl font-semibold text-slate-900 mb-3\">No Featured Products Yet</h3>\n              <p className=\"text-slate-600 max-w-md mx-auto\">\n                Our featured products collection is being curated. Check back soon for amazing deals!\n              </p>\n            </div>\n          )}\n        </div>\n      </section>\n\n      \n    </div>\n  );\n}\n","size_bytes":13139},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/orders-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useLocation } from \"wouter\";\nimport { \n  Package, \n  Truck, \n  CheckCircle, \n  Clock, \n  X, \n  ArrowLeft,\n  ShoppingBag,\n  Calendar,\n  DollarSign,\n  CreditCard,\n  AlertCircle\n} from \"lucide-react\";\nimport type { Order, OrderItem, Product } from \"@shared/schema\";\n\ntype OrderWithItems = Order & { items: (OrderItem & { product: Product })[] };\n\nexport default function OrdersPage() {\n  const [, setLocation] = useLocation();\n\n  const { data: orders, isLoading } = useQuery<OrderWithItems[]>({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"delivered\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"shipped\":\n        return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"processing\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case \"confirmed\":\n        return \"bg-purple-100 text-purple-800 border-purple-200\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      case \"payment_pending\":\n        return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"awaiting_approval\":\n        return \"bg-amber-100 text-amber-800 border-amber-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getApprovalStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"rejected\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"delivered\":\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case \"shipped\":\n        return <Truck className=\"h-4 w-4\" />;\n      case \"processing\":\n        return <Package className=\"h-4 w-4\" />;\n      case \"confirmed\":  \n        return <CheckCircle className=\"h-4 w-4\" />;\n      case \"cancelled\":\n        return <X className=\"h-4 w-4\" />;\n      case \"payment_pending\":\n        return <CreditCard className=\"h-4 w-4\" />;\n      case \"awaiting_approval\":\n        return <Clock className=\"h-4 w-4\" />;\n      default:\n        return <Clock className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getApprovalStatusIcon = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case \"rejected\":\n        return <X className=\"h-4 w-4\" />;\n      case \"pending\":\n        return <Clock className=\"h-4 w-4\" />;\n      default:\n        return <AlertCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n  const formatStatus = (status: string | null | undefined) => {\n    if (!status) return \"Pending\";\n    return status.charAt(0).toUpperCase() + status.slice(1).replace('_', ' ');\n  };\n\n  const canProceedToPayment = (order: OrderWithItems) => {\n    const adminApprovalStatus = (order as any).adminApprovalStatus;\n    const orderStatus = order.status;\n    return adminApprovalStatus === \"approved\" && \n           (orderStatus === \"awaiting_approval\" || orderStatus === \"payment_pending\");\n  };\n\n  const getDisplayStatus = (order: OrderWithItems) => {\n    const adminApprovalStatus = (order as any).adminApprovalStatus;\n    const orderStatus = order.status;\n    \n    if (adminApprovalStatus === \"pending\") return \"Awaiting Admin Approval\";\n    if (adminApprovalStatus === \"rejected\") return \"Rejected by Admin\";\n    if (adminApprovalStatus === \"approved\" && orderStatus === \"awaiting_approval\") return \"Payment Required\";\n    \n    return formatStatus(orderStatus);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-slate-50\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"space-y-6\">\n            <Skeleton className=\"h-8 w-48\" />\n            {[1, 2, 3].map((i) => (\n              <Card key={i}>\n                <CardHeader>\n                  <Skeleton className=\"h-6 w-32\" />\n                </CardHeader>\n                <CardContent>\n                  <Skeleton className=\"h-20 w-full\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-slate-50\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => setLocation(\"/\")}\n              className=\"flex items-center space-x-2 text-slate-600 hover:text-slate-900\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span>Back to Home</span>\n            </Button>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-blue-100 rounded-full\">\n                <Package className=\"h-6 w-6 text-blue-600\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold text-slate-900\">My Orders</h1>\n                <p className=\"text-slate-600\">Track your order history and status</p>\n              </div>\n            </div>\n          </div>\n          {orders && orders.length > 0 && (\n            <Badge variant=\"secondary\" className=\"px-3 py-1\">\n              {orders.length} {orders.length === 1 ? 'order' : 'orders'}\n            </Badge>\n          )}\n        </div>\n\n        {/* Empty State */}\n        {!orders || orders.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <div className=\"max-w-md mx-auto\">\n              <div className=\"w-24 h-24 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <ShoppingBag className=\"h-12 w-12 text-blue-500\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-slate-900 mb-4\">No orders yet</h3>\n              <p className=\"text-slate-600 mb-8\">\n                You haven't placed any orders yet. Start shopping to see your orders here.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button \n                  onClick={() => setLocation(\"/products\")} \n                  className=\"w-full sm:w-auto\"\n                >\n                  <Package className=\"mr-2 h-4 w-4\" />\n                  Browse Products\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setLocation(\"/categories\")}\n                  className=\"w-full sm:w-auto\"\n                >\n                  <ShoppingBag className=\"mr-2 h-4 w-4\" />\n                  Shop by Category\n                </Button>\n              </div>\n            </div>\n          </div>\n        ) : (\n          /* Orders List */\n          <div className=\"space-y-6\">\n            {orders.map((order) => (\n              <Card key={order.id} className=\"overflow-hidden shadow-sm hover:shadow-md transition-shadow duration-200\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div>\n                        <CardTitle className=\"text-lg font-semibold text-slate-900\">\n                          Order #{order.id.slice(-8).toUpperCase()}\n                        </CardTitle>\n                        <div className=\"flex items-center space-x-4 mt-2 text-sm text-slate-600\">\n                          <div className=\"flex items-center space-x-1\">\n                            <Calendar className=\"h-4 w-4\" />\n                            <span>{new Date(order.createdAt!).toLocaleDateString()}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-1\">\n                            <DollarSign className=\"h-4 w-4\" />\n                            <span>${order.total}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-1\">\n                            <Package className=\"h-4 w-4\" />\n                            <span>{order.items?.length || 0} items</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col space-y-2\">\n                      {/* Admin Approval Status */}\n                      <Badge \n                        className={`flex items-center space-x-1 px-3 py-1.5 border ${getApprovalStatusColor((order as any).adminApprovalStatus)}`}\n                        variant=\"outline\"\n                      >\n                        {getApprovalStatusIcon((order as any).adminApprovalStatus)}\n                        <span className=\"font-medium text-xs\">\n                          {(order as any).adminApprovalStatus === \"pending\" ? \"Awaiting Approval\" : \n                           (order as any).adminApprovalStatus === \"approved\" ? \"Approved\" : \n                           (order as any).adminApprovalStatus === \"rejected\" ? \"Rejected\" : \"Unknown\"}\n                        </span>\n                      </Badge>\n                      \n                      {/* Order Status */}\n                      <Badge \n                        className={`flex items-center space-x-1 px-3 py-1.5 border ${getStatusColor(order.status)}`}\n                        variant=\"outline\"\n                      >\n                        {getStatusIcon(order.status)}\n                        <span className=\"font-medium text-xs\">{getDisplayStatus(order)}</span>\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent>\n                  {/* Order Items */}\n                  <div className=\"space-y-3\">\n                    <h4 className=\"font-medium text-slate-900 mb-3\">Order Items:</h4>\n                    <div className=\"grid gap-3\">\n                      {order.items?.slice(0, 3).map((item) => (\n                        <div key={item.id} className=\"flex items-center space-x-4 p-3 bg-slate-50 rounded-lg\">\n                          {item.product.imageUrl ? (\n                            <img \n                              src={item.product.imageUrl} \n                              alt={item.product.name}\n                              className=\"w-12 h-12 object-cover rounded-md border\"\n                            />\n                          ) : (\n                            <div className=\"w-12 h-12 bg-gradient-to-br from-blue-100 to-purple-100 rounded-md flex items-center justify-center border\">\n                              <span className=\"text-slate-600 font-semibold text-sm\">\n                                {item.product.name.charAt(0)}\n                              </span>\n                            </div>\n                          )}\n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"font-medium text-slate-900 truncate\">\n                              {item.product.name}\n                            </p>\n                            <div className=\"flex items-center space-x-4 text-sm text-slate-600\">\n                              <span>Qty: {item.quantity}</span>\n                              <span>${item.price}</span>\n                              {item.product.unitOfMeasure && (\n                                <span>per {item.product.unitOfMeasure}</span>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                      \n                      {order.items && order.items.length > 3 && (\n                        <div className=\"text-center py-2 text-sm text-slate-600\">\n                          and {order.items.length - 3} more items...\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Payment Info */}\n                  <div className=\"mt-6 pt-6 border-t border-slate-200\">\n                    <div>\n                      <h4 className=\"font-medium text-slate-900 mb-2\">Payment Method</h4>\n                      <p className=\"text-sm text-slate-600\">\n                        {order.paymentMethod || \"Not specified\"}\n                      </p>\n                      <p className=\"text-sm text-slate-600 mt-1\">\n                        Status: <span className=\"font-medium\">{formatStatus((order as any).paymentStatus)}</span>\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Admin Remarks */}\n                  {(order as any).adminRemarks && (\n                    <div className=\"mt-4 pt-4 border-t border-slate-200\">\n                      <h4 className=\"font-medium text-slate-900 mb-2\">Admin Note</h4>\n                      <div className=\"bg-gray-50 rounded-lg p-3\">\n                        <p className=\"text-sm text-gray-700 italic\">\"{(order as any).adminRemarks}\"</p>\n                      </div>\n                    </div>\n                  )}\n\n                  {(order as any).orderNotes && (\n                    <div className=\"mt-4 pt-4 border-t border-slate-200\">\n                      <h4 className=\"font-medium text-slate-900 mb-2\">Order Notes</h4>\n                      <p className=\"text-sm text-slate-600\">{(order as any).orderNotes}</p>\n                    </div>\n                  )}\n\n                  {/* Action Buttons */}\n                  {canProceedToPayment(order) && (\n                    <div className=\"mt-6 pt-4 border-t border-slate-200\">\n                      <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-4\">\n                        <div className=\"flex items-center\">\n                          <CheckCircle className=\"h-5 w-5 text-green-600 mr-2\" />\n                          <div>\n                            <h4 className=\"text-sm font-medium text-green-800\">Order Approved!</h4>\n                            <p className=\"text-sm text-green-700 mt-1\">\n                              Your order has been approved by admin. You can now proceed with payment.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex justify-end\">\n                        <Button \n                          className=\"bg-green-600 hover:bg-green-700 text-white\"\n                          onClick={() => setLocation(`/checkout/${order.id}`)}\n                        >\n                          <CreditCard className=\"h-4 w-4 mr-2\" />\n                          Proceed to Payment\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Pending Approval Message */}\n                  {(order as any).adminApprovalStatus === \"pending\" && (\n                    <div className=\"mt-6 pt-4 border-t border-slate-200\">\n                      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                        <div className=\"flex items-center\">\n                          <Clock className=\"h-5 w-5 text-yellow-600 mr-2\" />\n                          <div>\n                            <h4 className=\"text-sm font-medium text-yellow-800\">Awaiting Admin Approval</h4>\n                            <p className=\"text-sm text-yellow-700 mt-1\">\n                              Your order is being reviewed by our admin team. You'll receive an email notification once approved.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Rejected Order Message */}\n                  {(order as any).adminApprovalStatus === \"rejected\" && (\n                    <div className=\"mt-6 pt-4 border-t border-slate-200\">\n                      <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                        <div className=\"flex items-center\">\n                          <X className=\"h-5 w-5 text-red-600 mr-2\" />\n                          <div>\n                            <h4 className=\"text-sm font-medium text-red-800\">Order Rejected</h4>\n                            <p className=\"text-sm text-red-700 mt-1\">\n                              Unfortunately, this order was rejected by admin. \n                              {(order as any).adminRemarks && \" Please check the admin note above for details.\"}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":17297},"client/src/pages/product-detail-page.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { format, differenceInDays } from \"date-fns\";\nimport { \n  Star, \n  ShoppingCart, \n  Package, \n  Tag, \n  Info, \n  Calendar,\n  Calendar as CalendarIcon,\n  DollarSign,\n  Minus,\n  Plus,\n  ArrowLeft\n} from \"lucide-react\";\nimport type { Product } from \"@shared/schema\";\n\nexport default function ProductDetailPage() {\n  const { id } = useParams<{ id: string }>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [quantity, setQuantity] = useState(1);\n  \n  // Rental date state\n  const [startDate, setStartDate] = useState<Date | undefined>();\n  const [endDate, setEndDate] = useState<Date | undefined>();\n  const [dateError, setDateError] = useState(\"\");\n  const [isSingleDay, setIsSingleDay] = useState(false);\n  \n  // Rental period constants - ensure proper date boundaries\n  const RENTAL_START = new Date(2025, 9, 18, 0, 0, 0); // October 18, 2025 00:00:00\n  const RENTAL_END = new Date(2025, 9, 31, 23, 59, 59); // October 31, 2025 23:59:59\n\n  const { data: product, isLoading } = useQuery<Product>({\n    queryKey: [`/api/products/${id}`],\n    enabled: !!id,\n  });\n\n  const addToCartMutation = useMutation({\n    mutationFn: async ({ productId, quantity, rentalStartDate, rentalEndDate }: { \n      productId: string; \n      quantity: number;\n      rentalStartDate?: string;\n      rentalEndDate?: string;\n    }) => {\n      const res = await apiRequest(\"/api/cart\", \"POST\", { \n        productId, \n        quantity,\n        rentalStartDate,\n        rentalEndDate\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Added to Cart\",\n        description: `${product?.name} has been added to your cart.`,\n      });\n      // Redirect to cart page after successful add\n      setLocation(\"/cart\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add item to cart\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Date validation function\n  const validateDateRange = (start: Date, end: Date): string => {\n    if (start < RENTAL_START || start > RENTAL_END || end < RENTAL_START || end > RENTAL_END) {\n      return \"Selected dates are outside the allowed rental period. Please choose dates between 18th October and 31st October 2025.\";\n    }\n    // For single day rentals, allow start and end to be the same\n    if (!isSingleDay && start >= end) {\n      return \"End date must be after start date.\";\n    }\n    // For single day rentals, start and end should be the same\n    if (isSingleDay && start.getTime() !== end.getTime()) {\n      return \"For single day rental, start and end dates must be the same.\";\n    }\n    return \"\";\n  };\n\n  // Calculate rental days and total cost\n  const calculateRentalCost = (): { days: number; totalCost: number; dailyRate: number } => {\n    if (!startDate || !endDate || !product?.rentalPrice) {\n      return { days: 0, totalCost: 0, dailyRate: 0 };\n    }\n    \n    const days = differenceInDays(endDate, startDate) + 1; // Include both start and end dates\n    const dailyRate = parseFloat(product.rentalPrice);\n    const totalCost = days * dailyRate * quantity;\n    \n    return { days, totalCost, dailyRate };\n  };\n\n  // Handle date selection\n  const handleStartDateSelect = (date: Date | undefined) => {\n    if (!date) return;\n    \n    setStartDate(date);\n    setDateError(\"\");\n    \n    // For single day rental, set end date to start date\n    if (isSingleDay) {\n      setEndDate(date);\n    } else if (endDate) {\n      // If we have both dates, validate them\n      const error = validateDateRange(date, endDate);\n      setDateError(error);\n    }\n  };\n\n  const handleEndDateSelect = (date: Date | undefined) => {\n    if (!date || isSingleDay) return; // Prevent end date selection in single day mode\n    \n    setEndDate(date);\n    setDateError(\"\");\n    \n    // If we have both dates, validate them\n    if (startDate) {\n      const error = validateDateRange(startDate, date);\n      setDateError(error);\n    }\n  };\n\n  const handleSingleDayToggle = (checked: boolean) => {\n    setIsSingleDay(checked);\n    if (checked && startDate) {\n      setEndDate(startDate); // Set end date to start date for single day\n      setDateError(\"\"); // Clear any existing errors\n    } else if (!checked && startDate && endDate && startDate.getTime() === endDate.getTime()) {\n      setEndDate(undefined); // Clear end date if it was same as start date\n      setDateError(\"\");\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-32 mb-8\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              <div className=\"aspect-square bg-gray-200 rounded-lg\"></div>\n              <div className=\"space-y-4\">\n                <div className=\"h-8 bg-gray-200 rounded w-3/4\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                <div className=\"h-20 bg-gray-200 rounded\"></div>\n                <div className=\"h-16 bg-gray-200 rounded\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <Button variant=\"outline\" onClick={() => setLocation(\"/products\")} className=\"mb-8\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Products\n          </Button>\n          <div className=\"text-center py-12\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Product Not Found</h1>\n            <p className=\"text-gray-600\">The product you're looking for doesn't exist.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const handleAddToCart = () => {\n    // Validate rental dates if product is rental\n    if (product.productType === \"rental\") {\n      if (!startDate || !endDate) {\n        toast({\n          title: \"Dates Required\",\n          description: \"Please select start and end dates for rental period.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      if (dateError) {\n        toast({\n          title: \"Invalid Dates\",\n          description: dateError,\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n    }\n\n    // Format dates as YYYY-MM-DD without timezone conversion\n    const formatDateForServer = (date: Date) => {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    };\n\n    const startDateString = startDate ? formatDateForServer(startDate) : undefined;\n    const endDateString = endDate ? formatDateForServer(endDate) : undefined;\n    \n\n\n    addToCartMutation.mutate({\n      productId: product.id,\n      quantity,\n      rentalStartDate: startDateString,\n      rentalEndDate: endDateString\n    });\n  };\n\n  const incrementQuantity = () => {\n    setQuantity(quantity + 1);\n  };\n\n  const decrementQuantity = () => {\n    if (quantity > 1) {\n      setQuantity(quantity - 1);\n    }\n  };\n\n  const renderStars = (rating: number) => {\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n\n    for (let i = 0; i < fullStars; i++) {\n      stars.push(\n        <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n      );\n    }\n\n    if (hasHalfStar) {\n      stars.push(\n        <div key=\"half\" className=\"relative\">\n          <Star className=\"w-4 h-4 text-gray-300\" />\n          <div className=\"absolute inset-0 overflow-hidden w-1/2\">\n            <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n          </div>\n        </div>\n      );\n    }\n\n    const emptyStars = 5 - Math.ceil(rating);\n    for (let i = 0; i < emptyStars; i++) {\n      stars.push(\n        <Star key={`empty-${i}`} className=\"w-4 h-4 text-gray-300\" />\n      );\n    }\n\n    return stars;\n  };\n\n  const rating = parseFloat(product.rating || \"0\");\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Button variant=\"outline\" onClick={() => setLocation(\"/products\")} className=\"mb-8\">\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back to Products\n        </Button>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Product Image */}\n          <div className=\"space-y-4\">\n            <div className=\"aspect-square bg-white rounded-xl overflow-hidden shadow-lg\">\n              {product.imageUrl ? (\n                <img \n                  src={product.imageUrl} \n                  alt={product.name}\n                  className=\"w-full h-full object-cover\"\n                />\n              ) : (\n                <div className=\"w-full h-full flex items-center justify-center bg-gradient-to-br from-gray-100 to-gray-200\">\n                  <Package className=\"w-24 h-24 text-gray-400\" />\n                </div>\n              )}\n            </div>\n            \n            {/* Product Badges */}\n            <div className=\"flex flex-wrap gap-2\">\n              {product.isFeatured && (\n                <Badge variant=\"default\" className=\"bg-yellow-500\">\n                  ⭐ Featured\n                </Badge>\n              )}\n              <Badge variant={product.productType === \"sale\" ? \"default\" : \"secondary\"}>\n                {product.productType === \"sale\" ? \"For Sale\" : \"For Rent\"}\n              </Badge>\n              <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                Available\n              </Badge>\n            </div>\n          </div>\n\n          {/* Product Information */}\n          <div className=\"space-y-8\">\n            <div>\n              <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">{product.name}</h1>\n              \n              {/* Rating */}\n              {rating > 0 && (\n                <div className=\"flex items-center gap-2 mb-6\">\n                  <div className=\"flex items-center\">\n                    {renderStars(rating)}\n                  </div>\n                  <span className=\"text-sm text-gray-600\">\n                    {product.rating} ({product.reviewCount} reviews)\n                  </span>\n                </div>\n              )}\n            </div>\n\n            {/* Pricing */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xl font-semibold text-gray-700\">Sale Price:</span>\n                    <span className=\"text-3xl font-bold text-primary\">${product.price}</span>\n                  </div>\n                  \n                  {product.productType === \"rental\" && product.rentalPrice && (\n                    <div className=\"flex items-center justify-between border-t pt-4\">\n                      <span className=\"text-xl font-semibold text-gray-700\">Rental Price:</span>\n                      <div className=\"text-right\">\n                        <span className=\"text-2xl font-bold text-blue-600\">${product.rentalPrice}</span>\n                        {product.rentalPeriod && (\n                          <p className=\"text-sm text-gray-600\">per {product.rentalPeriod}</p>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* VAT Notice */}\n                  <div className=\"bg-blue-50 p-4 rounded-lg text-sm text-blue-800\">\n                    <Info className=\"w-4 h-4 inline mr-2\" />\n                    Prices exclude 10% VAT\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Description */}\n            <div>\n              <h3 className=\"text-2xl font-semibold text-gray-900 mb-4\">Description</h3>\n              <p className=\"text-gray-600 leading-relaxed text-lg\">\n                {product.description || \"No description available for this product.\"}\n              </p>\n            </div>\n\n            {/* Rental Date Selection */}\n            {product.productType === \"rental\" && (\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-2xl font-semibold text-gray-900 mb-4\">Select Rental Period</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4\">\n                      <p className=\"text-sm text-amber-800\">\n                        <Calendar className=\"w-4 h-4 inline mr-2\" />\n                        Products rental only between 18th October and 31st October 2025.\n                        You can select dates for single day or multiple day rentals. Pricing will be automatically calculated based on the number of days selected.\n                      </p>\n                    </div>\n                    \n                    {/* Single Day Option */}\n                    <div className=\"flex items-center space-x-2 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                      <Checkbox \n                        id=\"single-day\" \n                        checked={isSingleDay}\n                        onCheckedChange={handleSingleDayToggle}\n                      />\n                      <label \n                        htmlFor=\"single-day\" \n                        className=\"text-sm font-medium text-blue-800 cursor-pointer flex-1\"\n                      >\n                        Single day rental (just pick one date)\n                      </label>\n                      {isSingleDay && (\n                        <span className=\"text-xs text-blue-600 bg-blue-100 px-2 py-1 rounded\">\n                          Only start date needed\n                        </span>\n                      )}\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {/* Start Date Picker */}\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium text-gray-700\">Start Date</label>\n                        <Popover>\n                          <PopoverTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              className=\"w-full justify-start text-left font-normal\"\n                            >\n                              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                              {startDate ? format(startDate, \"PPP\") : \"Select start date\"}\n                            </Button>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                            <CalendarComponent\n                              mode=\"single\"\n                              selected={startDate}\n                              onSelect={handleStartDateSelect}\n                              disabled={(date) => {\n                                const today = new Date();\n                                today.setHours(0, 0, 0, 0);\n                                const checkDate = new Date(date);\n                                checkDate.setHours(0, 0, 0, 0);\n                                \n                                if (checkDate < RENTAL_START || checkDate > RENTAL_END || checkDate < today) {\n                                  return true;\n                                }\n                                return false;\n                              }}\n                              initialFocus\n                            />\n                          </PopoverContent>\n                        </Popover>\n                      </div>\n\n                      {/* End Date Picker */}\n                      <div className={`space-y-2 ${isSingleDay ? 'opacity-50 pointer-events-none' : ''}`}>\n                        <label className=\"text-sm font-medium text-gray-700\">\n                          End Date {isSingleDay && \"(Not needed for single day)\"}\n                        </label>\n                        <Popover>\n                          <PopoverTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              className=\"w-full justify-start text-left font-normal\"\n                            >\n                              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                              {endDate ? format(endDate, \"PPP\") : \"Select end date\"}\n                            </Button>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                            <CalendarComponent\n                              mode=\"single\"\n                              selected={endDate}\n                              onSelect={handleEndDateSelect}\n                              disabled={(date) => {\n                                const today = new Date();\n                                today.setHours(0, 0, 0, 0);\n                                const checkDate = new Date(date);\n                                checkDate.setHours(0, 0, 0, 0);\n                                \n                                if (checkDate < RENTAL_START || checkDate > RENTAL_END || checkDate < today) {\n                                  return true;\n                                }\n                                if (startDate && checkDate <= startDate) {\n                                  return true;\n                                }\n                                return false;\n                              }}\n                              initialFocus\n                            />\n                          </PopoverContent>\n                        </Popover>\n                      </div>\n                    </div>\n                    \n                    {/* Date Error Display */}\n                    {dateError && (\n                      <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n                        <p className=\"text-sm text-red-800\">❗ {dateError}</p>\n                      </div>\n                    )}\n                    \n                    {/* Rental Cost Display */}\n                    {startDate && endDate && !dateError && (\n                      <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                        <h4 className=\"font-semibold text-green-800 mb-2\">Rental Summary</h4>\n                        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3 text-sm\">\n                          <div>\n                            <span className=\"text-green-700\">Duration:</span>\n                            <p className=\"font-medium text-green-900\">{calculateRentalCost().days} days</p>\n                          </div>\n                          <div>\n                            <span className=\"text-green-700\">Daily Rate:</span>\n                            <p className=\"font-medium text-green-900\">${calculateRentalCost().dailyRate}</p>\n                          </div>\n                          <div>\n                            <span className=\"text-green-700\">Total Cost:</span>\n                            <p className=\"font-bold text-green-900\">${calculateRentalCost().totalCost.toFixed(2)}</p>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Product Details */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-2xl font-semibold text-gray-900 mb-4\">Product Information</h3>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Tag className=\"w-5 h-5 text-gray-500\" />\n                    <span className=\"text-gray-600\">SKU:</span>\n                    <span className=\"font-medium\">{product.sku || 'N/A'}</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Package className=\"w-5 h-5 text-gray-500\" />\n                    <span className=\"text-gray-600\">Unit:</span>\n                    <span className=\"font-medium\">{product.unitOfMeasure || 'piece'}</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <DollarSign className=\"w-5 h-5 text-gray-500\" />\n                    <span className=\"text-gray-600\">Type:</span>\n                    <span className=\"font-medium capitalize\">{product.productType}</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Calendar className=\"w-5 h-5 text-gray-500\" />\n                    <span className=\"text-gray-600\">Added:</span>\n                    <span className=\"font-medium\">\n                      {product.createdAt ? new Date(product.createdAt).toLocaleDateString() : 'N/A'}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Add to Cart Section */}\n            <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div className=\"flex items-center gap-4\">\n                      <span className=\"text-lg font-medium text-gray-700\">Quantity:</span>\n                      <div className=\"flex items-center gap-3\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"h-10 w-10 p-0\"\n                          onClick={decrementQuantity}\n                          disabled={quantity <= 1}\n                        >\n                          <Minus className=\"h-4 w-4\" />\n                        </Button>\n                        <span className=\"w-16 text-center font-medium text-lg\">{quantity}</span>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"h-10 w-10 p-0\"\n                          onClick={incrementQuantity}\n                          disabled={false}\n                        >\n                          <Plus className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between pt-4 border-t\">\n                      <span className=\"text-2xl font-semibold\">\n                        Total: ${(() => {\n                          if (product.productType === \"rental\" && startDate && endDate && !dateError) {\n                            return calculateRentalCost().totalCost.toFixed(2);\n                          }\n                          return (parseFloat(product.price) * quantity).toFixed(2);\n                        })()}\n                      </span>\n                      <Button \n                        onClick={handleAddToCart}\n                        disabled={addToCartMutation.isPending}\n                        className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold py-3 px-8 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105\"\n                        size=\"lg\"\n                      >\n                        <ShoppingCart className=\"w-5 h-5 mr-2\" />\n                        {addToCartMutation.isPending ? \"Adding...\" : \"Add to Cart\"}\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":24764},"client/src/pages/products-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ProductCard } from \"@/components/product-card\";\n\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport type { Product, Category } from \"@shared/schema\";\n\nexport default function ProductsPage() {\n  const [location, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n\n\n  const { data: products, isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: categories } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Handle category filtering from URL parameters\n  useEffect(() => {\n    const urlParams = new URLSearchParams(location.split('?')[1] || '');\n    const categoryParam = urlParams.get('category');\n    if (categoryParam) {\n      setSelectedCategory(categoryParam);\n    } else {\n      setSelectedCategory(\"all\");\n    }\n  }, [location]);\n\n  // Get the selected category name for display\n  const selectedCategoryName = selectedCategory !== \"all\" && categories \n    ? categories.find(c => c.id === selectedCategory)?.name \n    : null;\n\n  const filteredProducts = products?.filter((product) => {\n    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.description?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || product.categoryId === selectedCategory;\n    return matchesSearch && matchesCategory;\n  }) || [];\n\n\n\n  return (\n    <div className=\"bg-slate-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h1 className=\"text-3xl font-bold text-slate-900\">\n              {selectedCategory !== \"all\" && categories \n                ? `${categories.find(c => c.id === selectedCategory)?.name || \"\"} Products`\n                : \"Products\"\n              }\n            </h1>\n            {selectedCategoryName && (\n              <div className=\"hidden sm:flex items-center text-sm text-slate-600\">\n                <svg className=\"w-4 h-4 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z\" clipRule=\"evenodd\" />\n                </svg>\n                Filtered by: <span className=\"font-medium ml-1\">{selectedCategoryName}</span>\n              </div>\n            )}\n          </div>\n          \n          {/* Filters */}\n          <div className=\"flex flex-col sm:flex-row gap-4 mb-8\">\n            <div className=\"flex-1 relative\">\n              <Input\n                placeholder={selectedCategoryName ? `Search in ${selectedCategoryName}...` : \"Search products...\"}\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full\"\n              />\n              {selectedCategoryName && (\n                <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none\">\n                  <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 shadow-sm\">\n                    <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fillRule=\"evenodd\" d=\"M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z\" clipRule=\"evenodd\" />\n                    </svg>\n                    {selectedCategoryName}\n                  </span>\n                </div>\n              )}\n            </div>\n            <div className=\"sm:w-48\">\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All Categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {categories?.map((category) => (\n                    <SelectItem key={category.id} value={category.id}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n\n        {productsLoading ? (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {[...Array(8)].map((_, i) => (\n              <Card key={i} className=\"overflow-hidden\">\n                <Skeleton className=\"h-48 w-full\" />\n                <CardContent className=\"p-6\">\n                  <Skeleton className=\"h-6 w-3/4 mb-2\" />\n                  <Skeleton className=\"h-4 w-full mb-4\" />\n                  <Skeleton className=\"h-8 w-20 mb-4\" />\n                  <Skeleton className=\"h-10 w-full\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : filteredProducts.length > 0 ? (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {filteredProducts.map((product) => (\n              <ProductCard \n                key={product.id} \n                product={product}\n                onCardClick={(product) => setLocation(`/products/${product.id}`)}\n                showDetailsButton={false}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12\">\n            <p className=\"text-slate-600\">\n              {searchQuery || selectedCategory !== \"all\" \n                ? \"No products found matching your criteria.\" \n                : \"No products available at the moment.\"}\n            </p>\n          </div>\n        )}\n      </div>\n\n\n      \n    </div>\n  );\n}","size_bytes":6259},"client/src/pages/profile-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { \n  User, \n  Mail,\n  Edit,\n  Save,\n  ArrowLeft,\n  Lock\n} from \"lucide-react\";\n\nexport default function ProfilePage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n  });\n\n  // Fetch user data\n  const { data: user, isLoading: userLoading } = useQuery<any>({\n    queryKey: [\"/api/user\"],\n  });\n\n  // Update form data when user data loads\n  useEffect(() => {\n    if (user) {\n      setFormData({\n        firstName: user?.firstName || \"\",\n        lastName: user?.lastName || \"\",\n        email: user?.email || \"\",\n      });\n    }\n  }, [user]);\n\n  // Update profile mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      return await apiRequest(`/api/user/profile`, \"PATCH\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n      setIsEditing(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update profile.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateProfileMutation.mutate(formData);\n  };\n\n  const handleCancel = () => {\n    setFormData({\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      email: user?.email || \"\",\n    });\n    setIsEditing(false);\n  };\n\n  if (userLoading) {\n    return (\n      <div className=\"container mx-auto p-4 max-w-2xl\">\n        <div className=\"space-y-6\">\n          <div className=\"flex items-center gap-4\">\n            <Skeleton className=\"h-10 w-10\" />\n            <Skeleton className=\"h-8 w-32\" />\n          </div>\n          <Skeleton className=\"h-96\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 max-w-2xl\">\n      {/* Header */}\n      <div className=\"flex items-center gap-4 mb-6\">\n        <Button \n          variant=\"ghost\" \n          size=\"sm\"\n          onClick={() => setLocation(\"/dashboard\")}\n          className=\"p-2\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n        </Button>\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n            User Profile\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Manage your personal information and account settings\n          </p>\n        </div>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* Profile Information */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Personal Information\n            </CardTitle>\n            {!isEditing && (\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => setIsEditing(true)}\n              >\n                <Edit className=\"h-4 w-4 mr-2\" />\n                Edit\n              </Button>\n            )}\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  {isEditing ? (\n                    <Input\n                      id=\"firstName\"\n                      value={formData.firstName}\n                      onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}\n                      placeholder=\"Enter your first name\"\n                    />\n                  ) : (\n                    <p className=\"mt-1 px-3 py-2 text-gray-900 dark:text-gray-100 bg-gray-50 dark:bg-gray-800 rounded-md\">\n                      {user?.firstName || 'Not provided'}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  {isEditing ? (\n                    <Input\n                      id=\"lastName\"\n                      value={formData.lastName}\n                      onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}\n                      placeholder=\"Enter your last name\"\n                    />\n                  ) : (\n                    <p className=\"mt-1 px-3 py-2 text-gray-900 dark:text-gray-100 bg-gray-50 dark:bg-gray-800 rounded-md\">\n                      {user?.lastName || 'Not provided'}\n                    </p>\n                  )}\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"email\">Email Address</Label>\n                {isEditing ? (\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                    placeholder=\"Enter your email address\"\n                  />\n                ) : (\n                  <p className=\"mt-1 px-3 py-2 text-gray-900 dark:text-gray-100 bg-gray-50 dark:bg-gray-800 rounded-md flex items-center gap-2\">\n                    <Mail className=\"h-4 w-4\" />\n                    {user?.email || 'Not provided'}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label>Username</Label>\n                <p className=\"mt-1 px-3 py-2 text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 rounded-md flex items-center gap-2\">\n                  <Lock className=\"h-4 w-4\" />\n                  {user?.username} (Cannot be changed)\n                </p>\n              </div>\n\n              {isEditing && (\n                <div className=\"flex gap-2 pt-4\">\n                  <Button \n                    type=\"submit\" \n                    disabled={updateProfileMutation.isPending}\n                  >\n                    {updateProfileMutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\"></div>\n                        Saving...\n                      </>\n                    ) : (\n                      <>\n                        <Save className=\"h-4 w-4 mr-2\" />\n                        Save Changes\n                      </>\n                    )}\n                  </Button>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={handleCancel}\n                    disabled={updateProfileMutation.isPending}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              )}\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Account Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Account Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label>Member Since</Label>\n              <p className=\"mt-1 text-gray-900 dark:text-gray-100\">\n                {user?.createdAt \n                  ? new Date(user.createdAt).toLocaleDateString('en-US', {\n                      year: 'numeric',\n                      month: 'long',\n                      day: 'numeric'\n                    })\n                  : 'Not available'\n                }\n              </p>\n            </div>\n            <div>\n              <Label>Account Type</Label>\n              <p className=\"mt-1 text-gray-900 dark:text-gray-100\">\n                Customer Account\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8592},"client/src/pages/user-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useLocation } from \"wouter\";\nimport { \n  ShoppingCart, \n  Package, \n  User, \n  CreditCard, \n  Calendar, \n  MapPin,\n  Phone,\n  Mail,\n  Edit,\n  Eye,\n  History\n} from \"lucide-react\";\n\nexport default function UserDashboard() {\n  const [, setLocation] = useLocation();\n\n  // Fetch user data\n  const { data: user, isLoading: userLoading } = useQuery({\n    queryKey: [\"/api/user\"],\n  });\n\n  // Fetch user's orders\n  const { data: orders = [], isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n  });\n\n  // Fetch cart data\n  const { data: cart = [], isLoading: cartLoading } = useQuery({\n    queryKey: [\"/api/cart\"],\n  });\n\n  // Calculate totals\n  const cartTotal = cart.reduce((sum: number, item: any) => \n    sum + (parseFloat(item.product?.price || 0) * item.quantity), 0\n  );\n  \n  const totalSpent = orders.reduce((sum: number, order: any) => \n    sum + parseFloat(order.totalAmount || 0), 0\n  );\n\n  const recentOrders = orders.slice(0, 3);\n\n  if (userLoading) {\n    return (\n      <div className=\"container mx-auto p-4 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <Skeleton className=\"h-8 w-48\" />\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\">\n            User Panel - Welcome back, {user?.firstName || user?.username}!\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n            Your personal dashboard to manage orders, profile, and shopping preferences\n          </p>\n        </div>\n        <Button onClick={() => setLocation(\"/profile\")} variant=\"outline\">\n          <Edit className=\"h-4 w-4 mr-2\" />\n          Edit Profile\n        </Button>\n      </div>\n\n      {/* Dashboard Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"bg-gradient-to-br from-blue-50 to-indigo-100 border-blue-200 hover:shadow-lg\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-semibold text-blue-800\">Cart Items</CardTitle>\n            <div className=\"p-2 bg-blue-500 rounded-full\">\n              <ShoppingCart className=\"h-4 w-4 text-white\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            {cartLoading ? (\n              <Skeleton className=\"h-8 w-16\" />\n            ) : (\n              <div className=\"text-2xl font-bold text-blue-700\">{cart.length}</div>\n            )}\n            <p className=\"text-xs text-blue-600 mt-1\">\n              Total: ${cartTotal.toFixed(2)}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-green-50 to-emerald-100 border-green-200 hover:shadow-lg\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-semibold text-green-800\">Total Orders</CardTitle>\n            <div className=\"p-2 bg-green-500 rounded-full\">\n              <Package className=\"h-4 w-4 text-white\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            {ordersLoading ? (\n              <Skeleton className=\"h-8 w-16\" />\n            ) : (\n              <div className=\"text-2xl font-bold text-green-700\">{orders.length}</div>\n            )}\n            <p className=\"text-xs text-green-600 mt-1\">all time orders</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-purple-50 to-violet-100 border-purple-200 hover:shadow-lg\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-semibold text-purple-800\">Total Spent</CardTitle>\n            <div className=\"p-2 bg-purple-500 rounded-full\">\n              <CreditCard className=\"h-4 w-4 text-white\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            {ordersLoading ? (\n              <Skeleton className=\"h-8 w-20\" />\n            ) : (\n              <div className=\"text-2xl font-bold text-purple-700\">${totalSpent.toFixed(2)}</div>\n            )}\n            <p className=\"text-xs text-purple-600 mt-1\">lifetime value</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-orange-50 to-amber-100 border-orange-200 hover:shadow-lg\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-semibold text-orange-800\">Member Since</CardTitle>\n            <div className=\"p-2 bg-orange-500 rounded-full\">\n              <Calendar className=\"h-4 w-4 text-white\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-700\">\n              {user?.createdAt ? new Date(user.createdAt).getFullYear() : 'N/A'}\n            </div>\n            <p className=\"text-xs text-orange-600 mt-1\">\n              {user?.createdAt \n                ? new Date(user.createdAt).toLocaleDateString()\n                : 'join date'\n              }\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content */}\n      <Tabs defaultValue=\"orders\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"orders\" className=\"flex items-center gap-2\">\n            <Package className=\"h-4 w-4\" />\n            My Orders\n          </TabsTrigger>\n          <TabsTrigger value=\"profile\" className=\"flex items-center gap-2\">\n            <User className=\"h-4 w-4\" />\n            Profile\n          </TabsTrigger>\n          <TabsTrigger value=\"cart\" className=\"flex items-center gap-2\">\n            <ShoppingCart className=\"h-4 w-4\" />\n            Shopping Cart\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Orders Tab */}\n        <TabsContent value=\"orders\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-xl font-semibold\">Order History</h3>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setLocation(\"/orders\")}\n            >\n              <Eye className=\"h-4 w-4 mr-2\" />\n              View All Orders\n            </Button>\n          </div>\n          \n          {ordersLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <Skeleton key={i} className=\"h-20\" />\n              ))}\n            </div>\n          ) : recentOrders.length > 0 ? (\n            <div className=\"space-y-4\">\n              {recentOrders.map((order: any) => (\n                <Card key={order.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-semibold\">Order #{order.orderNumber}</p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          {new Date(order.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold\">${parseFloat(order.totalAmount || 0).toFixed(2)}</p>\n                        <Badge variant={\n                          order.status === 'delivered' ? 'default' :\n                          order.status === 'approved' ? 'secondary' :\n                          order.status === 'pending' ? 'outline' : 'destructive'\n                        }>\n                          {order.status}\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <Package className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n                <p className=\"text-gray-600 dark:text-gray-400\">No orders yet</p>\n                <Button \n                  className=\"mt-4\" \n                  onClick={() => setLocation(\"/products\")}\n                >\n                  Start Shopping\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Profile Tab */}\n        <TabsContent value=\"profile\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"h-5 w-5\" />\n                Personal Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                    Username\n                  </label>\n                  <p className=\"mt-1 text-gray-900 dark:text-gray-100\">\n                    {user?.username || 'Not provided'}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                    Email\n                  </label>\n                  <p className=\"mt-1 text-gray-900 dark:text-gray-100 flex items-center gap-2\">\n                    <Mail className=\"h-4 w-4\" />\n                    {user?.email || 'Not provided'}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                    First Name\n                  </label>\n                  <p className=\"mt-1 text-gray-900 dark:text-gray-100\">\n                    {user?.firstName || 'Not provided'}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                    Last Name\n                  </label>\n                  <p className=\"mt-1 text-gray-900 dark:text-gray-100\">\n                    {user?.lastName || 'Not provided'}\n                  </p>\n                </div>\n              </div>\n              <div className=\"pt-4\">\n                <Button onClick={() => setLocation(\"/profile\")}>\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit Profile\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Cart Tab */}\n        <TabsContent value=\"cart\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-xl font-semibold\">Shopping Cart</h3>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setLocation(\"/cart\")}\n            >\n              <ShoppingCart className=\"h-4 w-4 mr-2\" />\n              View Full Cart\n            </Button>\n          </div>\n          \n          {cartLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(2)].map((_, i) => (\n                <Skeleton key={i} className=\"h-20\" />\n              ))}\n            </div>\n          ) : cart.length > 0 ? (\n            <div className=\"space-y-4\">\n              {cart.slice(0, 3).map((item: any) => (\n                <Card key={item.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-semibold\">{item.product?.name}</p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          Quantity: {item.quantity}\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold\">\n                          ${(parseFloat(item.product?.price || 0) * item.quantity).toFixed(2)}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n              {cart.length > 3 && (\n                <p className=\"text-center text-gray-600 dark:text-gray-400\">\n                  And {cart.length - 3} more items...\n                </p>\n              )}\n              <Card className=\"bg-gray-50 dark:bg-gray-800\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between font-semibold\">\n                    <p>Cart Total:</p>\n                    <p>${cartTotal.toFixed(2)}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <ShoppingCart className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n                <p className=\"text-gray-600 dark:text-gray-400\">Your cart is empty</p>\n                <Button \n                  className=\"mt-4\" \n                  onClick={() => setLocation(\"/products\")}\n                >\n                  Start Shopping\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":14221},"client/src/components/admin/CategoryManager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertCategorySchema, type InsertCategory, type Category } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Plus, Edit, Trash2, Package, Upload } from \"lucide-react\";\nimport { createImageUploadHandler } from \"@/lib/imageUpload\";\n\nexport function CategoryManager() {\n  const { toast } = useToast();\n  const [isAddOpen, setIsAddOpen] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n\n  const { data: categories, isLoading } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const form = useForm<InsertCategory>({\n    resolver: zodResolver(insertCategorySchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      imageUrl: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertCategory) => {\n      const response = await apiRequest(\"/api/categories\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      setIsAddOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Category created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: InsertCategory }) => {\n      const response = await apiRequest(`/api/categories/${id}`, \"PUT\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      setEditingCategory(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Category updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (categoryId: string) => {\n      await apiRequest(`/api/categories/${categoryId}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Success\",\n        description: \"Category deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImageUpload = createImageUploadHandler(\n    (url) => form.setValue(\"imageUrl\", url),\n    setIsUploading\n  );\n\n  const onSubmit = (data: InsertCategory) => {\n    console.log(\"Form submitted with data:\", data);\n    console.log(\"Form errors:\", form.formState.errors);\n    \n    if (editingCategory) {\n      updateMutation.mutate({ id: editingCategory.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (category: Category) => {\n    setEditingCategory(category);\n    form.reset({\n      name: category.name,\n      description: category.description || \"\",\n      imageUrl: category.imageUrl || \"\",\n    });\n  };\n\n  const handleCloseDialog = () => {\n    setIsAddOpen(false);\n    setEditingCategory(null);\n    form.reset();\n  };\n\n  if (isLoading) {\n    return <div>Loading categories...</div>;\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Package className=\"h-5 w-5\" />\n            Category Management\n          </CardTitle>\n          <Button onClick={() => {\n            console.log(\"Add Category button clicked\");\n            setIsAddOpen(true);\n          }} className=\"flex items-center gap-2\">\n            <Plus className=\"h-4 w-4\" />\n            Add Category\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* Category Dialog */}\n        <Dialog open={isAddOpen || !!editingCategory} onOpenChange={handleCloseDialog}>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>\n                  {editingCategory ? \"Edit Category\" : \"Add New Category\"}\n                </DialogTitle>\n                <DialogDescription>\n                  {editingCategory ? \"Update the category information below.\" : \"Fill in the details to create a new category.\"}\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Category name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"Category description\" {...field} value={field.value || \"\"} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"imageUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Image</FormLabel>\n                        <div className=\"space-y-2\">\n                          <FormControl>\n                            <Input placeholder=\"https://example.com/image.jpg\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <div className=\"flex items-center gap-2\">\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => document.getElementById('category-image-upload')?.click()}\n                              disabled={isUploading}\n                              className=\"flex items-center gap-2\"\n                            >\n                              <Upload className=\"h-4 w-4\" />\n                              {isUploading ? \"Uploading...\" : \"Upload Image\"}\n                            </Button>\n                            <input\n                              id=\"category-image-upload\"\n                              type=\"file\"\n                              accept=\"image/*\"\n                              className=\"hidden\"\n                              onChange={handleImageUpload}\n                            />\n                          </div>\n                          {field.value && (\n                            <img\n                              src={field.value}\n                              alt=\"Category preview\"\n                              className=\"w-20 h-20 object-cover rounded border\"\n                            />\n                          )}\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex justify-end gap-2\">\n                    <Button type=\"button\" variant=\"outline\" onClick={handleCloseDialog}>\n                      Cancel\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={createMutation.isPending || updateMutation.isPending}\n                    >\n                      {editingCategory ? \"Update\" : \"Create\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n        </Dialog>\n        <div className=\"grid gap-4\">\n          {categories?.length === 0 ? (\n            <p className=\"text-center text-muted-foreground py-8\">\n              No categories found. Create your first category to get started.\n            </p>\n          ) : (\n            categories?.map((category) => (\n              <div\n                key={category.id}\n                className=\"flex items-center justify-between p-4 border rounded-lg\"\n              >\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold\">{category.name}</h3>\n                  {category.description && (\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {category.description}\n                    </p>\n                  )}\n                  {category.imageUrl && (\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Image: {category.imageUrl}\n                    </p>\n                  )}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleEdit(category)}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => deleteMutation.mutate(category.id)}\n                    disabled={deleteMutation.isPending}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10924},"client/src/components/admin/DataImportExport.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Download, Upload, FileSpreadsheet, Package, Users, ShoppingCart } from \"lucide-react\";\nimport * as XLSX from \"xlsx\";\n\ntype DataType = \"products\" | \"categories\" | \"users\" | \"orders\";\n\nexport function DataImportExport() {\n  const { toast } = useToast();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [selectedDataType, setSelectedDataType] = useState<DataType>(\"products\");\n  const [isImporting, setIsImporting] = useState(false);\n  const [importProgress, setImportProgress] = useState(0);\n  const [importResults, setImportResults] = useState<{\n    success: number;\n    errors: string[];\n  } | null>(null);\n\n  const { data: products } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: categories } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: users } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  const { data: orders } = useQuery({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const exportData = async (dataType: DataType) => {\n    try {\n      let data: any[] = [];\n      let filename = \"\";\n\n      switch (dataType) {\n        case \"products\":\n          data = Array.isArray(products) ? products : [];\n          filename = \"products_export.xlsx\";\n          break;\n        case \"categories\":\n          data = Array.isArray(categories) ? categories : [];\n          filename = \"categories_export.xlsx\";\n          break;\n        case \"users\":\n          data = Array.isArray(users) ? users : [];\n          filename = \"users_export.xlsx\";\n          break;\n        case \"orders\":\n          data = Array.isArray(orders) ? orders : [];\n          filename = \"orders_export.xlsx\";\n          break;\n      }\n\n      if (data.length === 0) {\n        toast({\n          title: \"No Data\",\n          description: `No ${dataType} found to export`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Create workbook and worksheet\n      const wb = XLSX.utils.book_new();\n      const ws = XLSX.utils.json_to_sheet(data);\n\n      // Add worksheet to workbook\n      XLSX.utils.book_append_sheet(wb, ws, dataType);\n\n      // Generate Excel file and download\n      XLSX.writeFile(wb, filename);\n\n      toast({\n        title: \"Export Successful\",\n        description: `${data.length} ${dataType} exported successfully`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setIsImporting(true);\n    setImportProgress(0);\n    setImportResults(null);\n\n    try {\n      const data = await file.arrayBuffer();\n      const workbook = XLSX.read(data);\n      const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n      const jsonData = XLSX.utils.sheet_to_json(worksheet);\n\n      let successCount = 0;\n      const errors: string[] = [];\n\n      for (let i = 0; i < jsonData.length; i++) {\n        try {\n          const row = jsonData[i] as any;\n          \n          switch (selectedDataType) {\n            case \"products\":\n              await apiRequest(\"/api/products\", \"POST\", {\n                name: row.name || \"\",\n                description: row.description || \"\",\n                price: row.price || \"0\",\n                imageUrl: row.imageUrl || \"\",\n                categoryId: row.categoryId || \"\",\n\n                sku: row.sku || \"\",\n                isActive: row.isActive !== false,\n                isFeatured: row.isFeatured === true,\n                productType: row.productType || \"sale\",\n                rentalPeriod: row.rentalPeriod || \"\",\n                rentalPrice: row.rentalPrice || \"\",\n              });\n              break;\n            case \"categories\":\n              await apiRequest(\"/api/categories\", \"POST\", {\n                name: row.name || \"\",\n                description: row.description || \"\",\n                imageUrl: row.imageUrl || \"\",\n              });\n              break;\n            case \"users\":\n              await apiRequest(\"/api/admin/users\", \"POST\", {\n                username: row.username || \"\",\n                email: row.email || \"\",\n                password: row.password || \"defaultPassword123\",\n                firstName: row.firstName || \"\",\n                lastName: row.lastName || \"\",\n                isAdmin: row.isAdmin === true,\n              });\n              break;\n          }\n          successCount++;\n        } catch (error: any) {\n          errors.push(`Row ${i + 2}: ${error.message || \"Import failed\"}`);\n        }\n\n        setImportProgress(((i + 1) / jsonData.length) * 100);\n      }\n\n      setImportResults({ success: successCount, errors });\n      \n      // Refresh data\n      queryClient.invalidateQueries({ queryKey: [`/api/${selectedDataType}`] });\n      if (selectedDataType === \"users\") {\n        queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      }\n\n      toast({\n        title: \"Import Completed\",\n        description: `Successfully imported ${successCount} ${selectedDataType}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Import Failed\",\n        description: \"Failed to process the Excel file\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsImporting(false);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = \"\";\n      }\n    }\n  };\n\n  const downloadTemplate = (dataType: DataType) => {\n    let templateData: any[] = [];\n    let filename = \"\";\n\n    switch (dataType) {\n      case \"products\":\n        templateData = [\n          {\n            name: \"Sample Product\",\n            description: \"Sample product description\",\n            price: \"29.99\",\n            imageUrl: \"https://example.com/image.jpg\",\n            categoryId: \"category-id-here\",\n\n            sku: \"SAMPLE-001\",\n            isActive: true,\n            isFeatured: false,\n            productType: \"sale\",\n            rentalPeriod: \"\",\n            rentalPrice: \"\",\n          },\n        ];\n        filename = \"products_template.xlsx\";\n        break;\n      case \"categories\":\n        templateData = [\n          {\n            name: \"Sample Category\",\n            description: \"Sample category description\",\n            imageUrl: \"https://example.com/image.jpg\",\n          },\n        ];\n        filename = \"categories_template.xlsx\";\n        break;\n      case \"users\":\n        templateData = [\n          {\n            username: \"sampleuser\",\n            email: \"user@example.com\",\n            password: \"defaultPassword123\",\n            firstName: \"John\",\n            lastName: \"Doe\",\n            isAdmin: false,\n          },\n        ];\n        filename = \"users_template.xlsx\";\n        break;\n    }\n\n    const wb = XLSX.utils.book_new();\n    const ws = XLSX.utils.json_to_sheet(templateData);\n    XLSX.utils.book_append_sheet(wb, ws, \"Template\");\n    XLSX.writeFile(wb, filename);\n\n    toast({\n      title: \"Template Downloaded\",\n      description: `${dataType} template downloaded successfully`,\n    });\n  };\n\n  const getDataTypeIcon = (type: DataType) => {\n    switch (type) {\n      case \"products\":\n        return <Package className=\"h-4 w-4\" />;\n      case \"categories\":\n        return <ShoppingCart className=\"h-4 w-4\" />;\n      case \"users\":\n        return <Users className=\"h-4 w-4\" />;\n      case \"orders\":\n        return <FileSpreadsheet className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <FileSpreadsheet className=\"h-5 w-5\" />\n          Data Import & Export\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Tabs defaultValue=\"export\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"export\">Export Data</TabsTrigger>\n            <TabsTrigger value=\"import\">Import Data</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"export\" className=\"space-y-4\">\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"export-type\">Select Data Type to Export</Label>\n                <Select value={selectedDataType} onValueChange={(value: DataType) => setSelectedDataType(value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select data type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"products\">\n                      <div className=\"flex items-center gap-2\">\n                        <Package className=\"h-4 w-4\" />\n                        Products\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"categories\">\n                      <div className=\"flex items-center gap-2\">\n                        <ShoppingCart className=\"h-4 w-4\" />\n                        Categories\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"users\">\n                      <div className=\"flex items-center gap-2\">\n                        <Users className=\"h-4 w-4\" />\n                        Users\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"orders\">\n                      <div className=\"flex items-center gap-2\">\n                        <FileSpreadsheet className=\"h-4 w-4\" />\n                        Orders\n                      </div>\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Button\n                onClick={() => exportData(selectedDataType)}\n                className=\"flex items-center gap-2\"\n              >\n                <Download className=\"h-4 w-4\" />\n                Export {selectedDataType}\n              </Button>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"import\" className=\"space-y-4\">\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"import-type\">Select Data Type to Import</Label>\n                <Select value={selectedDataType} onValueChange={(value: DataType) => setSelectedDataType(value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select data type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"products\">\n                      <div className=\"flex items-center gap-2\">\n                        <Package className=\"h-4 w-4\" />\n                        Products\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"categories\">\n                      <div className=\"flex items-center gap-2\">\n                        <ShoppingCart className=\"h-4 w-4\" />\n                        Categories\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"users\">\n                      <div className=\"flex items-center gap-2\">\n                        <Users className=\"h-4 w-4\" />\n                        Users\n                      </div>\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => downloadTemplate(selectedDataType)}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                  Download Template\n                </Button>\n                <Button\n                  onClick={() => fileInputRef.current?.click()}\n                  disabled={isImporting}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Upload className=\"h-4 w-4\" />\n                  Upload Excel File\n                </Button>\n              </div>\n\n              <Input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\".xlsx,.xls\"\n                onChange={handleFileUpload}\n                className=\"hidden\"\n              />\n\n              {isImporting && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm\">Importing {selectedDataType}...</span>\n                  </div>\n                  <Progress value={importProgress} className=\"w-full\" />\n                </div>\n              )}\n\n              {importResults && (\n                <Alert>\n                  <AlertDescription>\n                    <div className=\"space-y-2\">\n                      <p>Import completed: {importResults.success} items imported successfully</p>\n                      {importResults.errors.length > 0 && (\n                        <div>\n                          <p className=\"font-semibold text-red-600\">Errors:</p>\n                          <ul className=\"text-sm text-red-600 list-disc list-inside\">\n                            {importResults.errors.slice(0, 5).map((error, index) => (\n                              <li key={index}>{error}</li>\n                            ))}\n                            {importResults.errors.length > 5 && (\n                              <li>... and {importResults.errors.length - 5} more errors</li>\n                            )}\n                          </ul>\n                        </div>\n                      )}\n                    </div>\n                  </AlertDescription>\n                </Alert>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":14432},"client/src/components/admin/DatabaseManager.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Download, Upload, Database, AlertTriangle, FileDown, FileUp } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nexport default function DatabaseManager() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [importFile, setImportFile] = useState<File | null>(null);\n\n  const exportMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/admin/database/export\", {\n        method: \"GET\",\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to export database\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.success && data.downloadUrl) {\n        // Create a download link\n        const link = document.createElement('a');\n        link.href = data.downloadUrl;\n        link.download = data.filename;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        \n        toast({\n          title: \"Export Successful\",\n          description: \"Database has been exported and downloaded successfully.\",\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Export Failed\",\n        description: error instanceof Error ? error.message : \"Failed to export database\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const importMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('database', file);\n      \n      const response = await fetch(\"/api/admin/database/import\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to import database\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Import Successful\",\n        description: \"Database has been imported successfully. The page will refresh to show updated data.\",\n      });\n      \n      // Invalidate all queries to refresh data\n      queryClient.invalidateQueries();\n      \n      // Refresh the page after a short delay\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Import Failed\",\n        description: error instanceof Error ? error.message : \"Failed to import database\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImport = () => {\n    if (!importFile) {\n      toast({\n        title: \"No File Selected\",\n        description: \"Please select a database file to import.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!importFile.name.endsWith('.sql')) {\n      toast({\n        title: \"Invalid File Type\",\n        description: \"Please select a valid SQL database export file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    importMutation.mutate(importFile);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center space-x-2\">\n        <Database className=\"h-5 w-5 text-blue-600\" />\n        <h2 className=\"text-2xl font-bold text-slate-900\">Database Management</h2>\n      </div>\n\n      <Alert>\n        <AlertTriangle className=\"h-4 w-4\" />\n        <AlertDescription>\n          <strong>Important:</strong> Database operations affect your entire store data. \n          Always create a backup before importing data. Importing will replace existing products and categories.\n        </AlertDescription>\n      </Alert>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Export Database */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <FileDown className=\"h-5 w-5 text-green-600\" />\n              <span>Export Database</span>\n            </CardTitle>\n            <CardDescription>\n              Download a complete backup of your store data including products, categories, orders, and settings.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                <p>The SQL export will include:</p>\n                <ul className=\"list-disc ml-4 mt-2 space-y-1\">\n                  <li>All products and categories with proper SQL INSERT statements</li>\n                  <li>Site settings with UPDATE statements (passwords excluded)</li>\n                  <li>Compatible with PostgreSQL database format</li>\n                  <li>Timestamped backup with version information</li>\n                </ul>\n              </div>\n              \n              <Button \n                onClick={() => exportMutation.mutate()}\n                disabled={exportMutation.isPending}\n                className=\"w-full flex items-center space-x-2\"\n              >\n                <Download className=\"h-4 w-4\" />\n                <span>{exportMutation.isPending ? \"Exporting...\" : \"Export Database\"}</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Import Database */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <FileUp className=\"h-5 w-5 text-orange-600\" />\n              <span>Import Database</span>\n            </CardTitle>\n            <CardDescription>\n              Restore your store data from a previous SQL export file. This will replace existing data.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"database-file\">Select Database File</Label>\n                <Input\n                  id=\"database-file\"\n                  type=\"file\"\n                  accept=\".sql\"\n                  onChange={(e) => setImportFile(e.target.files?.[0] || null)}\n                  className=\"cursor-pointer\"\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  Only SQL export files are accepted\n                </p>\n              </div>\n\n              <div className=\"text-sm text-amber-700 bg-amber-50 p-3 rounded-lg border border-amber-200\">\n                <p className=\"font-medium\">⚠️ Warning:</p>\n                <p>Importing will replace your current products and categories. User accounts and sensitive data are preserved for security.</p>\n              </div>\n              \n              <Button \n                onClick={handleImport}\n                disabled={importMutation.isPending || !importFile}\n                className=\"w-full flex items-center space-x-2\"\n                variant={importFile ? \"default\" : \"secondary\"}\n              >\n                <Upload className=\"h-4 w-4\" />\n                <span>{importMutation.isPending ? \"Importing...\" : \"Import Database\"}</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Additional Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Best Practices</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n            <div>\n              <h4 className=\"font-medium mb-2 text-green-700\">✅ Do:</h4>\n              <ul className=\"space-y-1 text-muted-foreground\">\n                <li>• Export regularly for backups</li>\n                <li>• Test imports on development first</li>\n                <li>• Verify file integrity before importing</li>\n                <li>• Keep multiple backup versions</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium mb-2 text-red-700\">❌ Don't:</h4>\n              <ul className=\"space-y-1 text-muted-foreground\">\n                <li>• Import untrusted database files</li>\n                <li>• Skip backups before major changes</li>\n                <li>• Import during high traffic periods</li>\n                <li>• Edit export files manually</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8743},"client/src/components/admin/ExcelManager.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Download, \n  Upload, \n  FileSpreadsheet, \n  AlertTriangle, \n  Package, \n  Users, \n  FolderOpen,\n  Database\n} from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { IndividualExcelManager } from \"./IndividualExcelManager\";\n\nexport default function ExcelManager() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [importFile, setImportFile] = useState<File | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const exportMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/admin/export/excel/bulk\", {\n        method: \"GET\",\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to export Excel file\");\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const filename = `data-export-${new Date().toISOString().split('T')[0]}.xlsx`;\n      \n      // Create download link\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n      \n      return { success: true };\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Export Successful\",\n        description: \"Excel file has been exported and downloaded successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Export Failed\",\n        description: error instanceof Error ? error.message : \"Failed to export Excel file\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const importMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('excel', file);\n      \n      const response = await fetch(\"/api/admin/import/excel\", {\n        method: \"POST\",\n        credentials: \"include\",\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to import Excel file\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Import Successful\",\n        description: data.message || \"Excel file has been imported successfully.\",\n      });\n      setImportFile(null);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n      \n      // Invalidate relevant queries to refresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Import Failed\",\n        description: error instanceof Error ? error.message : \"Failed to import Excel file\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    setImportFile(file || null);\n  };\n\n  const handleImport = () => {\n    if (!importFile) {\n      toast({\n        title: \"No File Selected\",\n        description: \"Please select an Excel file to import.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!importFile.name.toLowerCase().endsWith('.xlsx') && !importFile.name.toLowerCase().endsWith('.xls')) {\n      toast({\n        title: \"Invalid File Type\",\n        description: \"Please select a valid Excel file (.xlsx or .xls).\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    importMutation.mutate(importFile);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center space-x-2\">\n        <FileSpreadsheet className=\"h-5 w-5 text-green-600\" />\n        <h2 className=\"text-2xl font-bold text-slate-900\">Excel Data Management</h2>\n      </div>\n\n      <Alert>\n        <AlertTriangle className=\"h-4 w-4\" />\n        <AlertDescription>\n          <strong>Comprehensive Excel Data Management:</strong> Export all your e-commerce data to Excel for analysis or import bulk data from Excel files. \n          The Excel workbook contains 8 separate sheets covering all data types: Products (with units of measure), Categories, Users, Orders, Order Items, Units of Measure, Site Settings, and Slider Images. Perfect for data backups, analysis, and bulk operations.\n        </AlertDescription>\n      </Alert>\n\n      <Tabs defaultValue=\"individual\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"individual\" className=\"flex items-center space-x-2\">\n            <FileSpreadsheet className=\"h-4 w-4\" />\n            <span>Individual Sheets</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"bulk\" className=\"flex items-center space-x-2\">\n            <Database className=\"h-4 w-4\" />\n            <span>Bulk Operations</span>\n          </TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"individual\" className=\"space-y-6\">\n          <IndividualExcelManager />\n        </TabsContent>\n        \n        <TabsContent value=\"bulk\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Export Excel */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Download className=\"h-5 w-5 text-green-600\" />\n              <span>Export to Excel</span>\n            </CardTitle>\n            <CardDescription>\n              Download all your store data in a comprehensive Excel workbook format.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                <p>The Excel export includes 8 comprehensive data sheets:</p>\n                <ul className=\"list-disc ml-4 mt-2 space-y-1\">\n                  <li className=\"flex items-center gap-2\">\n                    <Package className=\"h-3 w-3\" />\n                    <strong>Products:</strong> All product data including prices, units of measure, categories\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <FolderOpen className=\"h-3 w-3\" />\n                    <strong>Categories:</strong> All category information and descriptions\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <Users className=\"h-3 w-3\" />\n                    <strong>Users:</strong> User accounts (passwords excluded for security)\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <Package className=\"h-3 w-3\" />\n                    <strong>Units of Measure:</strong> All measurement units (kg, liter, piece, etc.)\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <Package className=\"h-3 w-3\" />\n                    <strong>Orders:</strong> Complete order history and status information\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <Package className=\"h-3 w-3\" />\n                    <strong>Order Items:</strong> Individual items within each order\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <Package className=\"h-3 w-3\" />\n                    <strong>Site Settings:</strong> All website configuration and customization settings\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <Package className=\"h-3 w-3\" />\n                    <strong>Slider Images:</strong> Homepage slider configuration and image data\n                  </li>\n                </ul>\n              </div>\n              \n              <Button \n                onClick={() => exportMutation.mutate()}\n                disabled={exportMutation.isPending}\n                className=\"w-full flex items-center space-x-2\"\n              >\n                <Download className=\"h-4 w-4\" />\n                <span>{exportMutation.isPending ? \"Exporting...\" : \"Export to Excel\"}</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Import Excel */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Upload className=\"h-5 w-5 text-blue-600\" />\n              <span>Import from Excel</span>\n            </CardTitle>\n            <CardDescription>\n              Bulk import products, categories, and users from an Excel file. This will replace existing data.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"excel-file\">Select Excel File</Label>\n                <Input\n                  id=\"excel-file\"\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\".xlsx,.xls\"\n                  onChange={handleFileChange}\n                  className=\"cursor-pointer\"\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  Only Excel files (.xlsx, .xls) are accepted\n                </p>\n              </div>\n\n              <div className=\"text-sm text-muted-foreground\">\n                <p><strong>Excel file structure expected (8 sheets):</strong></p>\n                <ul className=\"list-disc ml-4 mt-1 space-y-1 text-xs\">\n                  <li>Sheet 1: \"Products\" - Name, Description, Price, Stock, SKU, Unit of Measure, Category ID, etc.</li>\n                  <li>Sheet 2: \"Categories\" - Name, Description, Image URL</li>\n                  <li>Sheet 3: \"Users\" - Username, Email, First Name, Last Name, Is Admin</li>\n                  <li>Sheet 4: \"Units of Measure\" - Name, Abbreviation, Is Active</li>\n                  <li>Sheet 5: \"Orders\" - User ID, Status, Total Amount, Shipping Address, Payment Method</li>\n                  <li>Sheet 6: \"Order Items\" - Order ID, Product ID, Quantity, Price</li>\n                  <li>Sheet 7: \"Site Settings\" - All website configuration settings</li>\n                  <li>Sheet 8: \"Slider Images\" - Title, Image URL, Link URL, Is Active, Display Order</li>\n                </ul>\n              </div>\n\n              <div className=\"p-3 bg-green-50 rounded-lg border border-green-200\">\n                <p className=\"text-sm font-medium text-green-900\">✓ Flexible Import:</p>\n                <p className=\"text-xs text-green-700\">Excel sheets can have any combination of fields. Missing columns will use default values, and missing IDs will be auto-generated by the database.</p>\n              </div>\n\n              <div className=\"p-3 bg-amber-50 rounded-lg border border-amber-200\">\n                <p className=\"text-sm font-medium text-amber-900\">⚠️ Important Notes:</p>\n                <ul className=\"text-xs text-amber-700 mt-1 space-y-1\">\n                  <li>• Import will replace existing data in each sheet</li>\n                  <li>• User passwords will not be imported for security</li>\n                  <li>• New users get random passwords that need reset</li>\n                </ul>\n              </div>\n\n              {importFile && (\n                <div className=\"p-3 bg-blue-50 rounded-lg border border-blue-200\">\n                  <p className=\"text-sm font-medium text-blue-900\">Selected File:</p>\n                  <p className=\"text-sm text-blue-700\">{importFile.name}</p>\n                  <p className=\"text-xs text-blue-600\">Size: {(importFile.size / 1024 / 1024).toFixed(2)} MB</p>\n                </div>\n              )}\n\n              <Button \n                onClick={handleImport}\n                disabled={!importFile || importMutation.isPending}\n                className=\"w-full flex items-center space-x-2\"\n              >\n                <Upload className=\"h-4 w-4\" />\n                <span>{importMutation.isPending ? \"Importing...\" : \"Import Excel Data\"}</span>\n              </Button>\n\n              {importMutation.isPending && (\n                <div className=\"text-sm text-muted-foreground\">\n                  <p>Processing Excel file and importing data...</p>\n                  <p className=\"text-xs\">This may take a few moments for large files.</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":13228},"client/src/components/admin/IndividualExcelManager.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Download, Upload, FileSpreadsheet, Database, Users, Package, ShoppingCart, Settings, Image, Ruler } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport function IndividualExcelManager() {\n  const [importFiles, setImportFiles] = useState<{ [key: string]: File | null }>({});\n  const fileInputRefs = useRef<{ [key: string]: HTMLInputElement | null }>({});\n  const { toast } = useToast();\n\n  const sheetTypes = [\n    { \n      id: 'products', \n      name: 'Products', \n      icon: Package,\n      description: 'Product catalog with prices and details',\n      fields: 'Name, Description, Price, SKU, Unit of Measure, Category ID, Image URL, etc.'\n    },\n    { \n      id: 'categories', \n      name: 'Categories', \n      icon: Database,\n      description: 'Product categories and organizational structure',\n      fields: 'Name, Description, Image URL'\n    },\n    { \n      id: 'users', \n      name: 'Users', \n      icon: Users,\n      description: 'User accounts and customer information',\n      fields: 'Username, Email, First Name, Last Name, Is Admin'\n    },\n    { \n      id: 'orders', \n      name: 'Orders', \n      icon: ShoppingCart,\n      description: 'Customer orders and transaction history',\n      fields: 'User ID, Status, Total Amount, Shipping Address, Payment Method'\n    },\n    { \n      id: 'order-items', \n      name: 'Order Items', \n      icon: FileSpreadsheet,\n      description: 'Individual items within each order',\n      fields: 'Order ID, Product ID, Quantity, Price'\n    },\n    { \n      id: 'units', \n      name: 'Units of Measure', \n      icon: Ruler,\n      description: 'Measurement units for products',\n      fields: 'Name, Abbreviation, Is Active'\n    },\n    { \n      id: 'site-settings', \n      name: 'Site Settings', \n      icon: Settings,\n      description: 'Website configuration and preferences',\n      fields: 'Site Name, Logos, Footer Content, Social Links'\n    },\n    { \n      id: 'slider-images', \n      name: 'Slider Images', \n      icon: Image,\n      description: 'Homepage slider and promotional images',\n      fields: 'Title, Image URL, Link URL, Is Active, Display Order'\n    }\n  ];\n\n  const exportMutation = useMutation({\n    mutationFn: async (sheetType: string) => {\n      const response = await fetch(`/api/admin/export/excel/${sheetType}`, {\n        method: 'GET',\n        credentials: 'include'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to export ${sheetType}`);\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = `${sheetType}-export-${new Date().toISOString().split('T')[0]}.xlsx`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    },\n    onSuccess: (_, sheetType) => {\n      toast({\n        title: \"Export Successful\",\n        description: `${sheetType} data exported successfully`,\n      });\n    },\n    onError: (error: any, sheetType) => {\n      console.error('Export error:', error);\n      toast({\n        title: \"Export Failed\",\n        description: `Failed to export ${sheetType}: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const importMutation = useMutation({\n    mutationFn: async ({ sheetType, file }: { sheetType: string; file: File }) => {\n      const formData = new FormData();\n      formData.append('excel', file);\n      \n      const response = await fetch(`/api/admin/import/excel/${sheetType}`, {\n        method: 'POST',\n        credentials: 'include',\n        body: formData\n      });\n      \n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || 'Import failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data, { sheetType }) => {\n      toast({\n        title: \"Import Successful\",\n        description: data.message || `${sheetType} data imported successfully`,\n      });\n      \n      // Clear the file input\n      setImportFiles(prev => ({ ...prev, [sheetType]: null }));\n      if (fileInputRefs.current[sheetType]) {\n        fileInputRefs.current[sheetType]!.value = '';\n      }\n      \n      // Invalidate relevant caches to refresh data in admin sections\n      if (sheetType === 'categories') {\n        queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/admin/categories'] });\n      } else if (sheetType === 'products') {\n        queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/admin/products'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/products/featured'] });\n      } else if (sheetType === 'users') {\n        queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      } else if (sheetType === 'orders') {\n        queryClient.invalidateQueries({ queryKey: ['/api/admin/orders'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      } else if (sheetType === 'order-items') {\n        queryClient.invalidateQueries({ queryKey: ['/api/admin/orders'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      } else if (sheetType === 'units') {\n        queryClient.invalidateQueries({ queryKey: ['/api/units-of-measure'] });\n      } else if (sheetType === 'site-settings') {\n        queryClient.invalidateQueries({ queryKey: ['/api/settings'] });\n      } else if (sheetType === 'slider-images') {\n        queryClient.invalidateQueries({ queryKey: ['/api/slider-images'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/slider-images/active'] });\n      }\n    },\n    onError: (error: any, { sheetType }) => {\n      console.error('Import error:', error);\n      toast({\n        title: \"Import Failed\",\n        description: `Failed to import ${sheetType}: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileChange = (sheetType: string, event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    setImportFiles(prev => ({ ...prev, [sheetType]: file || null }));\n  };\n\n  const handleExport = (sheetType: string) => {\n    exportMutation.mutate(sheetType);\n  };\n\n  const handleImport = (sheetType: string) => {\n    const file = importFiles[sheetType];\n    if (!file) {\n      toast({\n        title: \"No File Selected\",\n        description: \"Please select an Excel file to import\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    importMutation.mutate({ sheetType, file });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center space-x-2\">\n        <FileSpreadsheet className=\"h-6 w-6 text-green-600\" />\n        <h2 className=\"text-2xl font-bold\">Individual Excel Management</h2>\n      </div>\n\n      <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\n        <h3 className=\"font-medium text-blue-900 mb-2\">✓ Individual Sheet Control</h3>\n        <p className=\"text-sm text-blue-700\">Export and import each data type independently to avoid foreign key conflicts and gain precise control over your data management.</p>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        {sheetTypes.map((sheet) => {\n          const Icon = sheet.icon;\n          const isExporting = exportMutation.isPending;\n          const isImporting = importMutation.isPending;\n          const selectedFile = importFiles[sheet.id];\n\n          return (\n            <Card key={sheet.id} className=\"flex flex-col\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center space-x-2 text-lg\">\n                  <Icon className=\"h-5 w-5 text-blue-600\" />\n                  <span>{sheet.name}</span>\n                </CardTitle>\n                <CardDescription className=\"text-sm\">\n                  {sheet.description}\n                </CardDescription>\n              </CardHeader>\n              \n              <CardContent className=\"flex-1 space-y-4\">\n                <div className=\"text-xs text-muted-foreground\">\n                  <strong>Fields:</strong> {sheet.fields}\n                </div>\n\n                {/* Export Section */}\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Export</Label>\n                  <Button\n                    onClick={() => handleExport(sheet.id)}\n                    disabled={isExporting}\n                    size=\"sm\"\n                    className=\"w-full flex items-center space-x-2\"\n                  >\n                    <Download className=\"h-4 w-4\" />\n                    <span>{isExporting ? \"Exporting...\" : \"Export to Excel\"}</span>\n                  </Button>\n                </div>\n\n                {/* Import Section */}\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Import</Label>\n                  <Input\n                    ref={(el) => fileInputRefs.current[sheet.id] = el}\n                    type=\"file\"\n                    accept=\".xlsx,.xls\"\n                    onChange={(e) => handleFileChange(sheet.id, e)}\n                    className=\"text-xs\"\n                  />\n                  {selectedFile && (\n                    <div className=\"p-2 bg-green-50 rounded text-xs\">\n                      <span className=\"font-medium text-green-900\">Selected:</span>\n                      <span className=\"text-green-700 ml-1\">{selectedFile.name}</span>\n                    </div>\n                  )}\n                  <Button\n                    onClick={() => handleImport(sheet.id)}\n                    disabled={!selectedFile || isImporting}\n                    size=\"sm\"\n                    variant=\"outline\"\n                    className=\"w-full flex items-center space-x-2\"\n                  >\n                    <Upload className=\"h-4 w-4\" />\n                    <span>{isImporting ? \"Importing...\" : \"Import from Excel\"}</span>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      <div className=\"p-4 bg-amber-50 rounded-lg border border-amber-200\">\n        <h3 className=\"font-medium text-amber-900 mb-2\">💡 Tips for Individual Management</h3>\n        <ul className=\"text-sm text-amber-700 space-y-1\">\n          <li>• Export individual sheets to get exact field structures</li>\n          <li>• Import categories and units first, then products that reference them</li>\n          <li>• Import users before orders, and orders before order items</li>\n          <li>• Missing columns will use default values automatically</li>\n          <li>• Empty or missing IDs will be auto-generated by the database</li>\n        </ul>\n      </div>\n    </div>\n  );\n}","size_bytes":11416},"client/src/components/admin/OrderManager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogHeader, \n  DialogTitle, \n  DialogTrigger \n} from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  CheckCircle, \n  XCircle, \n  Clock, \n  Eye, \n  Package, \n  DollarSign,\n  Calendar,\n  User,\n  MapPin\n} from \"lucide-react\";\n\ninterface Order {\n  id: string;\n  userId: string;\n  status: string;\n  adminApprovalStatus: string;\n  total: string;\n  subtotal: string;\n  tax: string;\n  vatPercentage: string;\n  paymentMethod: string;\n  shippingAddress: any;\n  adminRemarks?: string;\n  adminApprovedBy?: string;\n  adminApprovedAt?: string;\n  estimatedDeliveryDays: number;\n  createdAt: string;\n  user?: {\n    name: string;\n    email: string;\n  };\n  items?: Array<{\n    id: string;\n    quantity: number;\n    price: string;\n    product: {\n      name: string;\n      image?: string;\n    };\n  }>;\n}\n\nexport function OrderManager() {\n  const { toast } = useToast();\n  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);\n  const [approvalAction, setApprovalAction] = useState<'approve' | 'reject' | null>(null);\n  const [adminRemarks, setAdminRemarks] = useState(\"\");\n\n  const { data: orders, isLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/admin/orders\"],\n  });\n\n  const approveOrderMutation = useMutation({\n    mutationFn: async ({ orderId, remarks }: { orderId: string; remarks: string }) => {\n      const res = await apiRequest(`/api/admin/orders/${orderId}/approve`, \"PUT\", {\n        adminRemarks: remarks\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/orders\"] });\n      toast({\n        title: \"Order Approved\",\n        description: \"Customer has been notified via email\",\n      });\n      setApprovalAction(null);\n      setAdminRemarks(\"\");\n      setSelectedOrder(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to approve order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectOrderMutation = useMutation({\n    mutationFn: async ({ orderId, remarks }: { orderId: string; remarks: string }) => {\n      const res = await apiRequest(`/api/admin/orders/${orderId}/reject`, \"PUT\", {\n        adminRemarks: remarks\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/orders\"] });\n      toast({\n        title: \"Order Rejected\",\n        description: \"Customer has been notified via email\",\n      });\n      setApprovalAction(null);\n      setAdminRemarks(\"\");\n      setSelectedOrder(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to reject order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const completeOrderMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      const res = await apiRequest(`/api/admin/orders/${orderId}/complete`, \"PUT\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/orders\"] });\n      toast({\n        title: \"Order Completed\",\n        description: \"Customer has been notified of delivery\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to complete order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string, approvalStatus: string) => {\n    if (approvalStatus === \"pending\") {\n      return <Badge variant=\"secondary\"><Clock className=\"w-3 h-3 mr-1\" />Awaiting Approval</Badge>;\n    }\n    if (approvalStatus === \"approved\") {\n      return <Badge variant=\"default\"><CheckCircle className=\"w-3 h-3 mr-1\" />Approved</Badge>;\n    }\n    if (approvalStatus === \"rejected\") {\n      return <Badge variant=\"destructive\"><XCircle className=\"w-3 h-3 mr-1\" />Rejected</Badge>;\n    }\n    \n    switch (status) {\n      case \"payment_pending\":\n        return <Badge variant=\"outline\"><DollarSign className=\"w-3 h-3 mr-1\" />Payment Pending</Badge>;\n      case \"processing\":\n        return <Badge variant=\"secondary\"><Package className=\"w-3 h-3 mr-1\" />Processing</Badge>;\n      case \"shipped\":\n        return <Badge variant=\"default\"><Package className=\"w-3 h-3 mr-1\" />Shipped</Badge>;\n      case \"delivered\":\n        return <Badge variant=\"default\"><CheckCircle className=\"w-3 h-3 mr-1\" />Delivered</Badge>;\n      case \"cancelled\":\n        return <Badge variant=\"destructive\"><XCircle className=\"w-3 h-3 mr-1\" />Cancelled</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const handleApprovalAction = () => {\n    if (!selectedOrder || !approvalAction) return;\n\n    if (approvalAction === 'approve') {\n      approveOrderMutation.mutate({\n        orderId: selectedOrder.id,\n        remarks: adminRemarks\n      });\n    } else {\n      rejectOrderMutation.mutate({\n        orderId: selectedOrder.id,\n        remarks: adminRemarks\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"h-6 bg-gray-200 rounded w-32 animate-pulse\"></div>\n        <div className=\"grid gap-4\">\n          {[1, 2, 3].map((i) => (\n            <div key={i} className=\"h-32 bg-gray-200 rounded animate-pulse\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-gray-900\">Order Management</h2>\n        <div className=\"text-sm text-gray-500\">\n          {orders?.length || 0} total orders\n        </div>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {orders?.map((order) => (\n          <Card key={order.id} className=\"hover:shadow-md transition-shadow\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <CardTitle className=\"text-lg\">Order #{order.id.slice(-8)}</CardTitle>\n                  {getStatusBadge(order.status, order.adminApprovalStatus)}\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Dialog>\n                    <DialogTrigger asChild>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Eye className=\"w-4 h-4 mr-1\" />\n                        View Details\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                      <DialogHeader>\n                        <DialogTitle>Order Details - #{order.id.slice(-8)}</DialogTitle>\n                        <DialogDescription>\n                          Complete order information and management actions\n                        </DialogDescription>\n                      </DialogHeader>\n                      \n                      <div className=\"space-y-6\">\n                        {/* Customer Information */}\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <h4 className=\"font-medium text-gray-900 mb-2 flex items-center\">\n                              <User className=\"w-4 h-4 mr-2\" />\n                              Customer Information\n                            </h4>\n                            <div className=\"space-y-1 text-sm text-gray-600\">\n                              <p><strong>Name:</strong> {order.user?.name}</p>\n                              <p><strong>Email:</strong> {order.user?.email}</p>\n                            </div>\n                          </div>\n                          \n                          <div>\n                            <h4 className=\"font-medium text-gray-900 mb-2 flex items-center\">\n                              <Calendar className=\"w-4 h-4 mr-2\" />\n                              Order Information\n                            </h4>\n                            <div className=\"space-y-1 text-sm text-gray-600\">\n                              <p><strong>Date:</strong> {new Date(order.createdAt).toLocaleDateString()}</p>\n                              <p><strong>Delivery:</strong> {order.estimatedDeliveryDays} days</p>\n                              <p><strong>Payment:</strong> {order.paymentMethod}</p>\n                            </div>\n                          </div>\n                        </div>\n\n\n\n                        {/* Order Items */}\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-2\">Order Items</h4>\n                          <div className=\"space-y-2\">\n                            {order.items?.map((item) => (\n                              <div key={item.id} className=\"flex justify-between items-center bg-gray-50 p-2 rounded\">\n                                <div>\n                                  <p className=\"font-medium\">{item.product.name}</p>\n                                  <p className=\"text-sm text-gray-600\">Quantity: {item.quantity}</p>\n                                </div>\n                                <div className=\"text-right\">\n                                  <p className=\"font-medium\">${item.price}</p>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n\n                        {/* Order Totals */}\n                        <div className=\"bg-gray-50 p-4 rounded\">\n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between\">\n                              <span>Subtotal:</span>\n                              <span>${order.subtotal}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span>VAT ({order.vatPercentage}%):</span>\n                              <span>${order.tax}</span>\n                            </div>\n                            <div className=\"flex justify-between font-bold text-lg border-t pt-2\">\n                              <span>Total:</span>\n                              <span>${order.total}</span>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Admin Remarks */}\n                        {order.adminRemarks && (\n                          <div>\n                            <h4 className=\"font-medium text-gray-900 mb-2\">Admin Remarks</h4>\n                            <div className=\"bg-blue-50 p-3 rounded text-sm\">\n                              {order.adminRemarks}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n\n                  {order.adminApprovalStatus === \"pending\" && (\n                    <>\n                      <Button\n                        variant=\"default\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedOrder(order);\n                          setApprovalAction('approve');\n                        }}\n                      >\n                        <CheckCircle className=\"w-4 h-4 mr-1\" />\n                        Approve\n                      </Button>\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedOrder(order);\n                          setApprovalAction('reject');\n                        }}\n                      >\n                        <XCircle className=\"w-4 h-4 mr-1\" />\n                        Reject\n                      </Button>\n                    </>\n                  )}\n\n                  {order.status === \"payment_pending\" && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => completeOrderMutation.mutate(order.id)}\n                    >\n                      <Package className=\"w-4 h-4 mr-1\" />\n                      Mark Delivered\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </CardHeader>\n            \n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                <div>\n                  <p className=\"text-gray-600\">Customer</p>\n                  <p className=\"font-medium\">{order.user?.name}</p>\n                </div>\n                <div>\n                  <p className=\"text-gray-600\">Total Amount</p>\n                  <p className=\"font-medium\">${order.total} (incl. {order.vatPercentage}% VAT)</p>\n                </div>\n                <div>\n                  <p className=\"text-gray-600\">Order Date</p>\n                  <p className=\"font-medium\">{new Date(order.createdAt).toLocaleDateString()}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n\n        {orders?.length === 0 && (\n          <Card className=\"text-center py-12\">\n            <CardContent>\n              <Package className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Orders Found</h3>\n              <p className=\"text-gray-600\">Orders will appear here once customers start placing them.</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Approval Action Dialog */}\n      <Dialog open={!!approvalAction} onOpenChange={() => {\n        setApprovalAction(null);\n        setAdminRemarks(\"\");\n        setSelectedOrder(null);\n      }}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {approvalAction === 'approve' ? 'Approve Order' : 'Reject Order'}\n            </DialogTitle>\n            <DialogDescription>\n              {approvalAction === 'approve' \n                ? 'Approve this order and notify the customer to proceed with payment.'\n                : 'Reject this order and notify the customer with a reason.'\n              }\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"remarks\">\n                {approvalAction === 'approve' ? 'Additional Notes (Optional)' : 'Reason for Rejection (Required)'}\n              </Label>\n              <Textarea\n                id=\"remarks\"\n                placeholder={approvalAction === 'approve' \n                  ? \"Add any additional notes for the customer...\" \n                  : \"Please provide a reason for rejecting this order...\"\n                }\n                value={adminRemarks}\n                onChange={(e) => setAdminRemarks(e.target.value)}\n                className=\"mt-1\"\n              />\n            </div>\n            \n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setApprovalAction(null);\n                  setAdminRemarks(\"\");\n                  setSelectedOrder(null);\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                variant={approvalAction === 'approve' ? 'default' : 'destructive'}\n                onClick={handleApprovalAction}\n                disabled={approvalAction === 'reject' && !adminRemarks.trim()}\n              >\n                {approvalAction === 'approve' ? 'Approve Order' : 'Reject Order'}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":16247},"client/src/components/admin/ProductManager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertProductSchema, type InsertProduct, type Product, type Category, type UnitOfMeasure } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Plus, Edit, Trash2, ShoppingCart, Package, Upload } from \"lucide-react\";\nimport { z } from \"zod\";\nimport { createImageUploadHandler } from \"@/lib/imageUpload\";\n\n// Enhanced product schema with product type and proper number validation\nconst enhancedProductSchema = insertProductSchema.extend({\n  productType: z.enum([\"sale\", \"rental\"]).default(\"sale\"),\n  rentalPeriod: z.string().optional(),\n  rentalPrice: z.string().optional(),\n}).transform((data) => ({\n  ...data,\n  // Convert string prices to numbers, handling empty strings\n  price: data.price === \"\" ? \"0\" : data.price,\n  rentalPrice: data.rentalPrice === \"\" ? undefined : data.rentalPrice,\n}));\n\ntype EnhancedInsertProduct = z.infer<typeof enhancedProductSchema>;\n\nexport function ProductManager() {\n  const { toast } = useToast();\n  const [isAddOpen, setIsAddOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n\n  const { data: products, isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: categories } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: unitsOfMeasure } = useQuery<UnitOfMeasure[]>({\n    queryKey: [\"/api/units-of-measure\"],\n  });\n\n  const form = useForm<EnhancedInsertProduct>({\n    resolver: zodResolver(enhancedProductSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      price: \"0\",\n      imageUrl: \"\",\n      categoryId: \"\",\n      sku: \"\",\n      unitOfMeasure: \"piece\",\n      isActive: true,\n      isFeatured: false,\n      productType: \"sale\",\n      rentalPeriod: \"\",\n      rentalPrice: \"\",\n    },\n  });\n\n  const productType = form.watch(\"productType\");\n\n  const handleImageUpload = createImageUploadHandler(\n    (url) => form.setValue(\"imageUrl\", url),\n    setIsUploading\n  );\n\n  const createMutation = useMutation({\n    mutationFn: async (data: EnhancedInsertProduct) => {\n      // Clean the data before sending to server\n      const cleanData = {\n        ...data,\n        price: data.price || \"0\",\n        rentalPrice: data.rentalPrice || undefined,\n      };\n      const response = await apiRequest(\"/api/products\", \"POST\", cleanData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setIsAddOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Product created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: EnhancedInsertProduct }) => {\n      // Clean the data before sending to server\n      const cleanData = {\n        ...data,\n        price: data.price || \"0\",\n        rentalPrice: data.rentalPrice || undefined,\n      };\n      const response = await apiRequest(`/api/products/${id}`, \"PUT\", cleanData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setEditingProduct(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Product updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      await apiRequest(`/api/products/${productId}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Success\",\n        description: \"Product deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: EnhancedInsertProduct) => {\n    console.log(\"Product form submitted with data:\", data);\n    console.log(\"Product form errors:\", form.formState.errors);\n    \n    if (editingProduct) {\n      updateMutation.mutate({ id: editingProduct.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (product: Product) => {\n    setEditingProduct(product);\n    form.reset({\n      name: product.name,\n      description: product.description || \"\",\n      price: product.price,\n      imageUrl: product.imageUrl || \"\",\n      categoryId: product.categoryId || \"\",\n      sku: product.sku || \"\",\n      unitOfMeasure: product.unitOfMeasure || \"piece\",\n      isActive: product.isActive,\n      isFeatured: product.isFeatured,\n      productType: (product as any).productType || \"sale\",\n      rentalPeriod: (product as any).rentalPeriod || \"\",\n      rentalPrice: (product as any).rentalPrice || \"\",\n    });\n  };\n\n  const handleCloseDialog = () => {\n    setIsAddOpen(false);\n    setEditingProduct(null);\n    form.reset();\n  };\n\n  if (productsLoading) {\n    return <div>Loading products...</div>;\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <ShoppingCart className=\"h-5 w-5\" />\n            Product Management\n          </CardTitle>\n          <Button onClick={() => {\n            console.log(\"Add Product button clicked\");\n            setIsAddOpen(true);\n          }} className=\"flex items-center gap-2\">\n            <Plus className=\"h-4 w-4\" />\n            Add Product\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* Product Dialog */}\n        <Dialog open={isAddOpen || !!editingProduct} onOpenChange={handleCloseDialog}>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingProduct ? \"Edit Product\" : \"Add New Product\"}\n                </DialogTitle>\n                <DialogDescription>\n                  {editingProduct ? \"Update the product information below.\" : \"Fill in the details to create a new product.\"}\n                </DialogDescription>  \n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Product Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Product name\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"sku\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>SKU</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Product SKU\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"Product description\" {...field} value={field.value || \"\"} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"productType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Product Type</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select product type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"sale\">Sale</SelectItem>\n                              <SelectItem value=\"rental\">Rental</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"categoryId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select category\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {categories?.map((category) => (\n                                <SelectItem key={category.id} value={category.id}>\n                                  {category.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"price\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Price</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"unitOfMeasure\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Unit of Measure</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value || \"piece\"}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select unit\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {unitsOfMeasure?.map((unit) => (\n                                <SelectItem key={unit.id} value={unit.name}>\n                                  {unit.name} ({unit.abbreviation})\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  {productType === \"rental\" && (\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"rentalPeriod\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Rental Period</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select rental period\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"daily\">Daily</SelectItem>\n                                <SelectItem value=\"weekly\">Weekly</SelectItem>\n                                <SelectItem value=\"monthly\">Monthly</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"rentalPrice\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Rental Price</FormLabel>\n                            <FormControl>\n                              <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  )}\n\n                  <FormField\n                    control={form.control}\n                    name=\"imageUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Product Image</FormLabel>\n                        <div className=\"space-y-2\">\n                          <FormControl>\n                            <Input placeholder=\"https://example.com/image.jpg\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <div className=\"flex items-center gap-2\">\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => document.getElementById('product-image-upload')?.click()}\n                              disabled={isUploading}\n                              className=\"flex items-center gap-2\"\n                            >\n                              <Upload className=\"h-4 w-4\" />\n                              {isUploading ? \"Uploading...\" : \"Upload Image\"}\n                            </Button>\n                            <input\n                              id=\"product-image-upload\"\n                              type=\"file\"\n                              accept=\"image/*\"\n                              className=\"hidden\"\n                              onChange={handleImageUpload}\n                            />\n                          </div>\n                          {field.value && (\n                            <img\n                              src={field.value}\n                              alt=\"Product preview\"\n                              className=\"w-24 h-24 object-cover rounded border\"\n                            />\n                          )}\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"isActive\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value || false}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                          <FormLabel>Active</FormLabel>\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"isFeatured\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value || false}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                          <FormLabel>Featured</FormLabel>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"flex justify-end gap-2\">\n                    <Button type=\"button\" variant=\"outline\" onClick={handleCloseDialog}>\n                      Cancel\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={createMutation.isPending || updateMutation.isPending}\n                    >\n                      {editingProduct ? \"Update\" : \"Create\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n        </Dialog>\n        <div className=\"grid gap-4\">\n          {products?.length === 0 ? (\n            <p className=\"text-center text-muted-foreground py-8\">\n              No products found. Create your first product to get started.\n            </p>\n          ) : (\n            products?.map((product) => (\n              <div\n                key={product.id}\n                className=\"flex items-center justify-between p-4 border rounded-lg\"\n              >\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2\">\n                    <h3 className=\"font-semibold\">{product.name}</h3>\n                    <span className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded\">\n                      {(product as any).productType || \"sale\"}\n                    </span>\n                    {product.isFeatured && (\n                      <span className=\"text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded\">\n                        Featured\n                      </span>\n                    )}\n                    {!product.isActive && (\n                      <span className=\"text-xs bg-red-100 text-red-800 px-2 py-1 rounded\">\n                        Inactive\n                      </span>\n                    )}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {(product as any).productType === \"rental\" ? (\n                      <>\n                        Rental Price: ${(product as any).rentalPrice || \"0.00\"} / {(product as any).rentalPeriod || \"period\"} | Regular Price: ${product.price}\n                      </>\n                    ) : (\n                      <>\n                        Price: ${product.price}\n                      </>\n                    )} | SKU: {product.sku}\n                  </p>\n                  {product.description && (\n                    <p className=\"text-sm text-muted-foreground mt-1 line-clamp-2\">\n                      {product.description}\n                    </p>\n                  )}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleEdit(product)}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => deleteMutation.mutate(product.id)}\n                    disabled={deleteMutation.isPending}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":22030},"client/src/components/admin/RolePermissionManager.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Users, Shield, Settings, Package, ShoppingCart, Tag, Ruler, Image, BarChart3, Mail } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Role {\n  id: string;\n  name: string;\n  displayName: string;\n  description: string;\n  isSystemRole: boolean;\n  isActive: boolean;\n}\n\ninterface PermissionModule {\n  id: string;\n  name: string;\n  displayName: string;\n  description: string;\n  icon: string;\n  sortOrder: number;\n}\n\ninterface Permission {\n  id: string;\n  moduleId: string;\n  name: string;\n  displayName: string;\n  description: string;\n  action: string;\n}\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  isAdmin: boolean;\n  isSuperAdmin: boolean;\n  roleId: string | null;\n}\n\nconst iconMap = {\n  Users,\n  Shield,\n  Settings,\n  Package,\n  ShoppingCart,\n  Tag,\n  Ruler,\n  Image,\n  BarChart3,\n  Mail\n};\n\nexport default function RolePermissionManager() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedRole, setSelectedRole] = useState<string>(\"\");\n  const [selectedUser, setSelectedUser] = useState<string>(\"\");\n  const [selectedModule, setSelectedModule] = useState<string>(\"\");\n  const [selectedPermissions, setSelectedPermissions] = useState<string[]>([]);\n\n  // Fetch roles\n  const { data: roles = [] } = useQuery<Role[]>({\n    queryKey: [\"/api/admin/roles\"],\n  });\n\n  // Fetch permission modules\n  const { data: modules = [] } = useQuery<PermissionModule[]>({\n    queryKey: [\"/api/admin/permission-modules\"],\n  });\n\n  // Fetch users\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  // Fetch permissions for selected module\n  const { data: modulePermissions = [] } = useQuery<Permission[]>({\n    queryKey: [\"/api/admin/permissions\", selectedModule],\n    enabled: !!selectedModule,\n  });\n\n  // Fetch current role permissions\n  const { data: rolePermissions = [] } = useQuery<Permission[]>({\n    queryKey: [\"/api/admin/role-permissions\", selectedRole],\n    enabled: !!selectedRole,\n  });\n\n  // Mutation to assign permissions to role\n  const assignPermissionsMutation = useMutation({\n    mutationFn: async ({ roleId, permissionIds }: { roleId: string; permissionIds: string[] }) => {\n      await apiRequest(`/api/admin/assign-permissions`, \"POST\", { roleId, permissionIds });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Permissions assigned successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/role-permissions\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to assign permissions\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation to assign role to user\n  const assignRoleMutation = useMutation({\n    mutationFn: async ({ userId, roleId }: { userId: string; roleId: string }) => {\n      await apiRequest(`/api/admin/assign-role`, \"POST\", { userId, roleId });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Role assigned successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to assign role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update selected permissions when role changes\n  useEffect(() => {\n    if (rolePermissions.length > 0) {\n      setSelectedPermissions(rolePermissions.map(p => p.id));\n    } else {\n      setSelectedPermissions([]);\n    }\n  }, [rolePermissions]);\n\n  const handlePermissionToggle = (permissionId: string) => {\n    setSelectedPermissions(prev => \n      prev.includes(permissionId)\n        ? prev.filter(id => id !== permissionId)\n        : [...prev, permissionId]\n    );\n  };\n\n  const handleSavePermissions = () => {\n    if (!selectedRole) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a role first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    assignPermissionsMutation.mutate({\n      roleId: selectedRole,\n      permissionIds: selectedPermissions,\n    });\n  };\n\n  const handleAssignRole = () => {\n    if (!selectedUser || !selectedRole) {\n      toast({\n        title: \"Error\",\n        description: \"Please select both user and role\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    assignRoleMutation.mutate({\n      userId: selectedUser,\n      roleId: selectedRole,\n    });\n  };\n\n  const getIconComponent = (iconName: string) => {\n    const IconComponent = iconMap[iconName as keyof typeof iconMap] || Shield;\n    return <IconComponent className=\"h-5 w-5\" />;\n  };\n\n  const roleOptions = roles.filter(role => !role.isSystemRole); // Hide Super Admin role from assignment\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-bold\">Role & Permission Management</h2>\n        <p className=\"text-muted-foreground\">\n          Manage user roles and assign specific permissions (Super Admin Only)\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"permissions\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"permissions\">Manage Permissions</TabsTrigger>\n          <TabsTrigger value=\"assign-roles\">Assign Roles to Users</TabsTrigger>\n          <TabsTrigger value=\"overview\">System Overview</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"permissions\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Permission Assignment</CardTitle>\n              <CardDescription>\n                Select a role and assign specific permissions to control access\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Role Selection */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Select Role</label>\n                <Select value={selectedRole} onValueChange={setSelectedRole}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose a role to manage\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {roleOptions.map((role) => (\n                      <SelectItem key={role.id} value={role.id}>\n                        <div className=\"flex items-center space-x-2\">\n                          <Shield className=\"h-4 w-4\" />\n                          <span>{role.displayName}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {selectedRole && (\n                <div className=\"space-y-4\">\n                  <Separator />\n                  \n                  {/* Module Selection */}\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Permission Modules</label>\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-2\">\n                      {modules.map((module) => (\n                        <Button\n                          key={module.id}\n                          variant={selectedModule === module.id ? \"default\" : \"outline\"}\n                          size=\"sm\"\n                          onClick={() => setSelectedModule(module.id)}\n                          className=\"h-auto p-3 flex flex-col items-center space-y-1\"\n                        >\n                          {getIconComponent(module.icon)}\n                          <span className=\"text-xs text-center\">{module.displayName}</span>\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Permission Selection */}\n                  {selectedModule && modulePermissions.length > 0 && (\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium\">\n                        {modules.find(m => m.id === selectedModule)?.displayName} Permissions\n                      </h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                        {modulePermissions.map((permission) => (\n                          <div key={permission.id} className=\"flex items-center space-x-2 p-3 border rounded-lg\">\n                            <Checkbox\n                              id={permission.id}\n                              checked={selectedPermissions.includes(permission.id)}\n                              onCheckedChange={() => handlePermissionToggle(permission.id)}\n                            />\n                            <div className=\"space-y-1\">\n                              <label \n                                htmlFor={permission.id} \n                                className=\"text-sm font-medium cursor-pointer\"\n                              >\n                                {permission.displayName}\n                              </label>\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {permission.action}\n                              </Badge>\n                              {permission.description && (\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {permission.description}\n                                </p>\n                              )}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button \n                      onClick={handleSavePermissions}\n                      disabled={assignPermissionsMutation.isPending}\n                    >\n                      {assignPermissionsMutation.isPending ? \"Saving...\" : \"Save Permissions\"}\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"assign-roles\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Assign Roles to Users</CardTitle>\n              <CardDescription>\n                Assign roles to users to give them specific permissions\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {/* User Selection */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Select User</label>\n                  <Select value={selectedUser} onValueChange={setSelectedUser}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Choose a user\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {users.filter(user => !user.isSuperAdmin).map((user) => (\n                        <SelectItem key={user.id} value={user.id}>\n                          <div className=\"flex items-center space-x-2\">\n                            <Users className=\"h-4 w-4\" />\n                            <span>{user.username} ({user.email})</span>\n                            {user.isAdmin && (\n                              <Badge variant=\"secondary\" className=\"text-xs\">Admin</Badge>\n                            )}\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Role Selection */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Select Role</label>\n                  <Select value={selectedRole} onValueChange={setSelectedRole}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Choose a role\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {roleOptions.map((role) => (\n                        <SelectItem key={role.id} value={role.id}>\n                          <div className=\"flex items-center space-x-2\">\n                            <Shield className=\"h-4 w-4\" />\n                            <span>{role.displayName}</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end\">\n                <Button\n                  onClick={handleAssignRole}\n                  disabled={assignRoleMutation.isPending}\n                >\n                  {assignRoleMutation.isPending ? \"Assigning...\" : \"Assign Role\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Current User-Role Assignments */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Current Role Assignments</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {users.map((user) => (\n                  <div key={user.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Users className=\"h-4 w-4 text-muted-foreground\" />\n                      <div>\n                        <p className=\"font-medium\">{user.username}</p>\n                        <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      {user.isSuperAdmin ? (\n                        <Badge variant=\"destructive\">Super Admin</Badge>\n                      ) : user.isAdmin ? (\n                        <Badge variant=\"default\">Admin</Badge>\n                      ) : (\n                        <Badge variant=\"secondary\">User</Badge>\n                      )}\n                      {user.roleId && (\n                        <Badge variant=\"outline\">\n                          {roles.find(r => r.id === user.roleId)?.displayName || \"Unknown Role\"}\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg\">System Roles</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{roles.length}</div>\n                <p className=\"text-sm text-muted-foreground\">Total roles in system</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg\">Permission Modules</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{modules.length}</div>\n                <p className=\"text-sm text-muted-foreground\">Available modules</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg\">Total Permissions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">46</div>\n                <p className=\"text-sm text-muted-foreground\">System permissions</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Permission Modules Overview</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {modules.map((module) => (\n                  <div key={module.id} className=\"p-4 border rounded-lg\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      {getIconComponent(module.icon)}\n                      <h4 className=\"font-medium\">{module.displayName}</h4>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">{module.description}</p>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":17483},"client/src/components/admin/SiteSettings.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertSiteSettingsSchema, type InsertSiteSettings, type SiteSettings } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Settings, Palette, Mail, Upload, Save, Monitor, Loader2, CheckCircle, ShoppingCart, Bell } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { themes, applyTheme, type ThemeName } from \"@/lib/themes\";\n\nexport function SiteSettings() {\n  const { toast } = useToast();\n  const [isUploading, setIsUploading] = useState(false);\n  const [isTestingEmail, setIsTestingEmail] = useState(false);\n  const [testEmailAddress, setTestEmailAddress] = useState(\"\");\n  const [smtpStatus, setSmtpStatus] = useState<any>(null);\n  \n\n\n  const { data: settings, isLoading } = useQuery<SiteSettings>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const form = useForm<InsertSiteSettings>({\n    resolver: zodResolver(insertSiteSettingsSchema),\n    defaultValues: {\n      siteName: settings?.siteName || \"BAYG\",\n      logoUrl: settings?.logoUrl || \"\",\n      contactEmail: settings?.contactEmail || \"\",\n      supportEmail: settings?.supportEmail || \"\",\n      adminEmail: settings?.adminEmail || \"\",\n      contactPhone: settings?.contactPhone || \"\",\n      contactAddress: settings?.contactAddress || \"\",\n      businessHours: settings?.businessHours || \"\",\n      officeHoursTitle: settings?.officeHoursTitle || \"Office Hours\",\n      paymentMethodsImage: settings?.paymentMethodsImage || \"\",\n      footerLeftImage: settings?.footerLeftImage || \"\",\n      footerLeftImageWidth: settings?.footerLeftImageWidth || 200,\n      paymentMethodsImageWidth: settings?.paymentMethodsImageWidth || 250,\n      loginPageLogoWidth: settings?.loginPageLogoWidth || 80,\n      headerLogoHeight: settings?.headerLogoHeight || 64,\n      theme: settings?.theme || \"default\",\n      textColor: settings?.textColor || \"#1e293b\",\n      headerTextColor: settings?.headerTextColor || \"#64748b\",\n      tabTextColor: settings?.tabTextColor || \"#2563eb\", \n      tabActiveTextColor: settings?.tabActiveTextColor || \"#2563eb\",\n      orderConfirmationTemplate: settings?.orderConfirmationTemplate || \"\",\n      footerDescription: settings?.footerDescription || \"\",\n      footerBackgroundUrl: settings?.footerBackgroundUrl || \"/uploads/footer-background.png\",\n      quickLinksTitle: settings?.quickLinksTitle || \"Quick Links\",\n      quickLinkHome: settings?.quickLinkHome || \"Home\",\n      quickLinkProducts: settings?.quickLinkProducts || \"Products\",\n      quickLinkAbout: settings?.quickLinkAbout || \"About\",\n      quickLinkContact: settings?.quickLinkContact || \"Contact\",\n      socialTitle: settings?.socialTitle || \"Follow Us\",\n      socialFacebook: settings?.socialFacebook || \"\",\n      socialTwitter: settings?.socialTwitter || \"\",\n      socialInstagram: settings?.socialInstagram || \"\",\n      socialLinkedin: settings?.socialLinkedin || \"\",\n      copyrightText: settings?.copyrightText || \"\",\n      additionalFooterText: settings?.additionalFooterText || \"\",\n      // SMTP Email Configuration\n      smtpEnabled: settings?.smtpEnabled || false,\n      smtpHost: settings?.smtpHost || \"\",\n      smtpPort: settings?.smtpPort || 587,\n      smtpSecure: settings?.smtpSecure || false,\n      smtpUser: settings?.smtpUser || \"\",\n      smtpPassword: settings?.smtpPassword || \"\",\n      smtpFromName: settings?.smtpFromName || \"BAYG - Bahrain Asian Youth Games 2025\",\n      smtpFromEmail: settings?.smtpFromEmail || \"\",\n      // Login Page Settings\n      loginPageLogo: settings?.loginPageLogo || \"\",\n      loginPageTitle: settings?.loginPageTitle || \"BAYG Store\",\n    },\n  });\n\n  // Update form when settings load - use useEffect to avoid infinite renders\n  React.useEffect(() => {\n    if (settings) {\n      form.reset({\n        siteName: settings.siteName,\n        logoUrl: settings.logoUrl || \"\",\n        contactEmail: settings.contactEmail || \"\",\n        supportEmail: settings.supportEmail || \"\",\n        adminEmail: settings.adminEmail || \"\",\n        contactPhone: settings.contactPhone || \"\",\n        contactAddress: settings.contactAddress || \"\",\n        businessHours: settings.businessHours || \"\",\n        officeHoursTitle: settings.officeHoursTitle || \"Office Hours\",\n        paymentMethodsImage: settings.paymentMethodsImage || \"\",\n        footerLeftImage: settings.footerLeftImage || \"\",\n        footerLeftImageWidth: settings.footerLeftImageWidth || 200,\n        paymentMethodsImageWidth: settings.paymentMethodsImageWidth || 250,\n        theme: settings.theme || \"default\",\n        textColor: settings.textColor || \"#1e293b\",\n        headerTextColor: settings.headerTextColor || \"#64748b\",\n        tabTextColor: settings.tabTextColor || \"#2563eb\",\n        tabActiveTextColor: settings.tabActiveTextColor || \"#2563eb\",\n        orderConfirmationTemplate: settings.orderConfirmationTemplate || \"\",\n        footerDescription: settings.footerDescription || \"\",\n        footerBackgroundUrl: settings.footerBackgroundUrl || \"/uploads/footer-background.png\",\n        quickLinksTitle: settings.quickLinksTitle || \"Quick Links\",\n        quickLinkHome: settings.quickLinkHome || \"Home\",\n        quickLinkProducts: settings.quickLinkProducts || \"Products\",\n        quickLinkAbout: settings.quickLinkAbout || \"About\",\n        quickLinkContact: settings.quickLinkContact || \"Contact\",\n        socialTitle: settings.socialTitle || \"Follow Us\",\n        socialFacebook: settings.socialFacebook || \"\",\n        socialTwitter: settings.socialTwitter || \"\",\n        socialInstagram: settings.socialInstagram || \"\",\n        socialLinkedin: settings.socialLinkedin || \"\",\n        copyrightText: settings.copyrightText || \"\",\n        additionalFooterText: settings.additionalFooterText || \"\",\n        // Email configuration - Microsoft 365 hardcoded, only fromName configurable\n        smtpFromName: settings.smtpFromName || \"BAYG - Bahrain Asian Youth Games 2025\",\n        emailEnabled: settings.emailEnabled || false,\n        // Login Page Settings\n        loginPageLogo: settings.loginPageLogo || \"\",\n        loginPageTitle: settings.loginPageTitle || \"InnovanceOrbit Store\",\n        loginPageLogoWidth: settings.loginPageLogoWidth || 80,\n        headerLogoHeight: settings.headerLogoHeight || 64,\n      });\n      \n      // Apply the current theme on load\n      if (settings.theme) {\n        applyTheme(settings.theme as ThemeName, {\n          headerTextColor: settings.headerTextColor || undefined,\n          tabTextColor: settings.tabTextColor || undefined,\n          tabActiveTextColor: settings.tabActiveTextColor || undefined,\n        });\n      }\n    }\n  }, [settings, form]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: InsertSiteSettings) => {\n      const response = await apiRequest(\"/api/settings\", \"PUT\", data);\n      return response.json();\n    },\n    onSuccess: (result, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n      \n      // Apply the theme immediately after successful save\n      if (variables.theme) {\n        applyTheme(variables.theme as ThemeName, {\n          headerTextColor: variables.headerTextColor || undefined,\n          tabTextColor: variables.tabTextColor || undefined,\n          tabActiveTextColor: variables.tabActiveTextColor || undefined,\n        });\n      }\n      \n      toast({\n        title: \"Success\",\n        description: \"Site settings and theme updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogoUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setIsUploading(true);\n    try {\n      const formData = new FormData();\n      formData.append('image', file);\n\n      const response = await fetch('/api/upload-image', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const data = await response.json();\n      form.setValue(\"logoUrl\", data.imageUrl);\n      \n      toast({\n        title: \"Logo Uploaded\",\n        description: \"Logo uploaded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Upload Failed\",\n        description: \"Failed to upload logo\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handlePaymentMethodsUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setIsUploading(true);\n    try {\n      const formData = new FormData();\n      formData.append('image', file);\n\n      const response = await fetch('/api/upload-image', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const data = await response.json();\n      form.setValue(\"paymentMethodsImage\", data.imageUrl);\n      \n      toast({\n        title: \"Payment Methods Image Uploaded\",\n        description: \"Payment methods image uploaded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Upload Failed\",\n        description: \"Failed to upload payment methods image\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleFooterLeftImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setIsUploading(true);\n    try {\n      const formData = new FormData();\n      formData.append('image', file);\n\n      const response = await fetch('/api/upload-image', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const data = await response.json();\n      form.setValue(\"footerLeftImage\", data.imageUrl);\n      \n      toast({\n        title: \"Footer Image Uploaded\",\n        description: \"Footer left image uploaded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Upload Failed\",\n        description: \"Failed to upload footer image\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n\n\n  // Login Page Logo Upload Handler\n  const handleLoginPageLogoUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setIsUploading(true);\n    try {\n      const formData = new FormData();\n      formData.append('image', file);\n\n      const response = await fetch('/api/upload-image', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const data = await response.json();\n      form.setValue(\"loginPageLogo\", data.imageUrl);\n      \n      toast({\n        title: \"Login Page Logo Uploaded\",\n        description: \"Login page logo uploaded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Upload Failed\",\n        description: \"Failed to upload login page logo\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  // Email functionality\n  const handleTestEmail = async () => {\n    if (!testEmailAddress) {\n      toast({\n        title: \"Email Required\",\n        description: \"Please enter an email address for testing.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsTestingEmail(true);\n    try {\n      const response = await apiRequest(\"/api/admin/test-smtp\", \"POST\", {\n        testEmail: testEmailAddress,\n      });\n      const result = await response.json();\n      \n      if (result.success) {\n        toast({\n          title: \"Test Email Sent!\",\n          description: result.message,\n        });\n      } else {\n        toast({\n          title: \"Test Email Failed\",\n          description: result.message,\n          variant: \"destructive\",\n        });\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Test Email Failed\",\n        description: error.message || \"Failed to send test email\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsTestingEmail(false);\n    }\n  };\n\n  const checkSmtpStatus = async () => {\n    try {\n      const response = await apiRequest(\"/api/admin/smtp-status\", \"POST\");\n      const status = await response.json();\n      setSmtpStatus(status);\n    } catch (error) {\n      console.error(\"Failed to check SMTP status:\", error);\n    }\n  };\n\n  // Check SMTP status on component mount\n  React.useEffect(() => {\n    checkSmtpStatus();\n  }, []);\n\n  const onSubmit = (data: InsertSiteSettings) => {\n    updateMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return <div>Loading settings...</div>;\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Settings className=\"h-5 w-5\" />\n          Site Settings\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)}>\n            <Tabs defaultValue=\"general\" className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-6\">\n                <TabsTrigger value=\"general\">General</TabsTrigger>\n                <TabsTrigger value=\"branding\">\n                  <Palette className=\"h-4 w-4 mr-2\" />\n                  Branding\n                </TabsTrigger>\n                <TabsTrigger value=\"contact\">Contact</TabsTrigger>\n                <TabsTrigger value=\"footer\">Footer</TabsTrigger>\n                <TabsTrigger value=\"login\">\n                  <Monitor className=\"h-4 w-4 mr-2\" />\n                  Login Page\n                </TabsTrigger>\n                <TabsTrigger value=\"email\">\n                  <Mail className=\"h-4 w-4 mr-2\" />\n                  Email\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"general\" className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"siteName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Site Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"InnovanceOrbit\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"logo-upload\">Site Logo</Label>\n                  <div className=\"flex items-center gap-4\">\n                    {form.watch(\"logoUrl\") && (\n                      <img\n                        src={form.watch(\"logoUrl\") || \"\"}\n                        alt=\"Site Logo\"\n                        className=\"h-12 w-auto border rounded\"\n                      />\n                    )}\n                    <div className=\"flex-1\">\n                      <input\n                        id=\"logo-upload\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleLogoUpload}\n                        className=\"hidden\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => document.getElementById(\"logo-upload\")?.click()}\n                        disabled={isUploading}\n                        className=\"flex items-center gap-2\"\n                      >\n                        <Upload className=\"h-4 w-4\" />\n                        {isUploading ? \"Uploading...\" : \"Upload Logo\"}\n                      </Button>\n                    </div>\n                  </div>\n                  <FormField\n                    control={form.control}\n                    name=\"logoUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Logo URL (Alternative)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"https://example.com/logo.png\" {...field} value={field.value || \"\"} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"headerLogoHeight\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Header Logo Height (px)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"64\" \n                            {...field} \n                            value={field.value || 64}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 64)}\n                          />\n                        </FormControl>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Control the height of your logo in the navigation header\n                        </p>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"branding\" className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"theme\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Theme Preset</FormLabel>\n                      <Select \n                        onValueChange={(value) => {\n                          field.onChange(value);\n                          const selectedTheme = themes[value as ThemeName];\n                          if (selectedTheme) {\n                            // Update form colors when theme changes\n                            form.setValue(\"textColor\", selectedTheme.text);\n                            \n                            // Apply theme preview with current text colors\n                            applyTheme(value as ThemeName, {\n                              headerTextColor: form.getValues(\"headerTextColor\") || \"#ffffff\",\n                              tabTextColor: form.getValues(\"tabTextColor\") || \"#64748b\", \n                              tabActiveTextColor: form.getValues(\"tabActiveTextColor\") || \"#2563eb\",\n                            });\n                          }\n                        }} \n                        value={field.value || \"default\"}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a theme\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {Object.entries(themes).map(([key, theme]) => (\n                            <SelectItem key={key} value={key}>\n                              <div className=\"flex items-center gap-3\">\n                                <div \n                                  className=\"w-4 h-4 rounded-full border-2 border-gray-300\"\n                                  style={{ backgroundColor: theme.primary }}\n                                />\n                                <div>\n                                  <div className=\"font-medium\">{theme.name}</div>\n                                  <div className=\"text-xs text-muted-foreground\">{theme.description}</div>\n                                </div>\n                              </div>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Choose a predefined theme for your site's visual appearance\n                      </p>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"border-t pt-4\">\n                  <h3 className=\"text-sm font-medium mb-4\">Text Colors</h3>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"textColor\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Main Text Color</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value || \"#1e293b\"}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select text color\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"#ffffff\">White</SelectItem>\n                              <SelectItem value=\"#f8fafc\">Off White</SelectItem>\n                              <SelectItem value=\"#e2e8f0\">Light Gray</SelectItem>\n                              <SelectItem value=\"#94a3b8\">Medium Gray</SelectItem>\n                              <SelectItem value=\"#64748b\">Dark Gray</SelectItem>\n                              <SelectItem value=\"#475569\">Darker Gray</SelectItem>\n                              <SelectItem value=\"#334155\">Very Dark Gray</SelectItem>\n                              <SelectItem value=\"#1e293b\">Almost Black</SelectItem>\n                              <SelectItem value=\"#000000\">Black</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"headerTextColor\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Navigation Text Color</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value || \"#64748b\"}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select header text color\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"#ffffff\">White</SelectItem>\n                              <SelectItem value=\"#f8fafc\">Off White</SelectItem>\n                              <SelectItem value=\"#e2e8f0\">Light Gray</SelectItem>\n                              <SelectItem value=\"#94a3b8\">Medium Gray</SelectItem>\n                              <SelectItem value=\"#64748b\">Dark Gray</SelectItem>\n                              <SelectItem value=\"#475569\">Darker Gray</SelectItem>\n                              <SelectItem value=\"#334155\">Very Dark Gray</SelectItem>\n                              <SelectItem value=\"#1e293b\">Almost Black</SelectItem>\n                              <SelectItem value=\"#000000\">Black</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"tabTextColor\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Tab Text Color</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value || \"#2563eb\"}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select tab text color\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"#ffffff\">White</SelectItem>\n                              <SelectItem value=\"#f8fafc\">Off White</SelectItem>\n                              <SelectItem value=\"#e2e8f0\">Light Gray</SelectItem>\n                              <SelectItem value=\"#94a3b8\">Medium Gray</SelectItem>\n                              <SelectItem value=\"#64748b\">Dark Gray</SelectItem>\n                              <SelectItem value=\"#475569\">Darker Gray</SelectItem>\n                              <SelectItem value=\"#334155\">Very Dark Gray</SelectItem>\n                              <SelectItem value=\"#1e293b\">Almost Black</SelectItem>\n                              <SelectItem value=\"#000000\">Black</SelectItem>\n                              <SelectItem value=\"#2563eb\">Blue</SelectItem>\n                              <SelectItem value=\"#1e40af\">Dark Blue</SelectItem>\n                              <SelectItem value=\"#3b82f6\">Light Blue</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"tabActiveTextColor\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Active Tab Text Color</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value || \"#2563eb\"}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select active tab text color\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"#ffffff\">White</SelectItem>\n                              <SelectItem value=\"#f8fafc\">Off White</SelectItem>\n                              <SelectItem value=\"#e2e8f0\">Light Gray</SelectItem>\n                              <SelectItem value=\"#94a3b8\">Medium Gray</SelectItem>\n                              <SelectItem value=\"#64748b\">Dark Gray</SelectItem>\n                              <SelectItem value=\"#475569\">Darker Gray</SelectItem>\n                              <SelectItem value=\"#334155\">Very Dark Gray</SelectItem>\n                              <SelectItem value=\"#1e293b\">Almost Black</SelectItem>\n                              <SelectItem value=\"#000000\">Black</SelectItem>\n                              <SelectItem value=\"#2563eb\">Blue</SelectItem>\n                              <SelectItem value=\"#1e40af\">Dark Blue</SelectItem>\n                              <SelectItem value=\"#3b82f6\">Light Blue</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"contact\" className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"contactEmail\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Contact Email</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"contact@bayg.com\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"supportEmail\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Support Email</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"support@bayg.com\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"adminEmail\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Admin Email (for notifications)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"admin@bayg.com\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"contactPhone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Contact Phone</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"+973 1234 5678\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"contactAddress\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Contact Address</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"123 Main Street, Manama, Bahrain\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"businessHours\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Business Hours</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Mon-Fri: 9:00 AM - 6:00 PM\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"officeHoursTitle\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Office Hours Section Title</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Office Hours\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </TabsContent>\n\n              <TabsContent value=\"footer\" className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"footerDescription\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Footer Description</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"Your company description for the footer\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"copyrightText\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Copyright Text</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"© 2025 InnovanceOrbit. All rights reserved.\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"additionalFooterText\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Additional Footer Text</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"Additional text to display in footer\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Quick Links Section</h3>\n                  <FormField\n                    control={form.control}\n                    name=\"quickLinksTitle\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Quick Links Title</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Quick Links\" {...field} value={field.value || \"\"} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"quickLinkHome\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Home Link Text</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Home\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"quickLinkProducts\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Products Link Text</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Products\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"quickLinkAbout\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>About Link Text</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"About\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"quickLinkContact\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Contact Link Text</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Contact\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Social Media</h3>\n                  <FormField\n                    control={form.control}\n                    name=\"socialTitle\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Social Media Title</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Follow Us\" {...field} value={field.value || \"\"} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"socialFacebook\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Facebook URL</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"https://facebook.com/yourpage\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"socialTwitter\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Twitter URL</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"https://twitter.com/yourhandle\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"socialInstagram\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Instagram URL</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"https://instagram.com/yourhandle\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"socialLinkedin\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>LinkedIn URL</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"https://linkedin.com/company/yourcompany\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Footer Images</h3>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"footer-left-upload\">Footer Left Image</Label>\n                    <div className=\"flex items-center gap-4\">\n                      {form.watch(\"footerLeftImage\") && (\n                        <img\n                          src={form.watch(\"footerLeftImage\") || \"\"}\n                          alt=\"Footer Left\"\n                          className=\"h-12 w-auto border rounded\"\n                        />\n                      )}\n                      <div className=\"flex-1\">\n                        <input\n                          id=\"footer-left-upload\"\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={handleFooterLeftImageUpload}\n                          className=\"hidden\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => document.getElementById(\"footer-left-upload\")?.click()}\n                          disabled={isUploading}\n                        >\n                          <Upload className=\"h-4 w-4 mr-2\" />\n                          {isUploading ? \"Uploading...\" : \"Upload Footer Image\"}\n                        </Button>\n                      </div>\n                    </div>\n                    <FormField\n                      control={form.control}\n                      name=\"footerLeftImageWidth\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Footer Left Image Width (px)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"200\" \n                              {...field} \n                              value={field.value || 200}\n                              onChange={(e) => field.onChange(parseInt(e.target.value) || 200)}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"payment-methods-upload\">Payment Methods Image</Label>\n                    <div className=\"flex items-center gap-4\">\n                      {form.watch(\"paymentMethodsImage\") && (\n                        <img\n                          src={form.watch(\"paymentMethodsImage\") || \"\"}\n                          alt=\"Payment Methods\"\n                          className=\"h-12 w-auto border rounded\"\n                        />\n                      )}\n                      <div className=\"flex-1\">\n                        <input\n                          id=\"payment-methods-upload\"\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={handlePaymentMethodsUpload}\n                          className=\"hidden\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => document.getElementById(\"payment-methods-upload\")?.click()}\n                          disabled={isUploading}\n                        >\n                          <Upload className=\"h-4 w-4 mr-2\" />\n                          {isUploading ? \"Uploading...\" : \"Upload Payment Methods\"}\n                        </Button>\n                      </div>\n                    </div>\n                    <FormField\n                      control={form.control}\n                      name=\"paymentMethodsImageWidth\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Payment Methods Image Width (px)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"250\" \n                              {...field} \n                              value={field.value || 250}\n                              onChange={(e) => field.onChange(parseInt(e.target.value) || 250)}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"login\" className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"loginPageTitle\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Login Page Title</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"InnovanceOrbit Store\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"loginPageLogo\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Login Page Logo URL</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"https://example.com/login-logo.png\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-sm font-medium\">Upload Login Page Logo</h3>\n                    <div className=\"flex items-center space-x-2\">\n                      <input\n                        id=\"login-page-logo-upload\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleLoginPageLogoUpload}\n                        className=\"hidden\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => document.getElementById(\"login-page-logo-upload\")?.click()}\n                        disabled={isUploading}\n                      >\n                        <Upload className=\"h-4 w-4 mr-2\" />\n                        {isUploading ? \"Uploading...\" : \"Upload Logo\"}\n                      </Button>\n                    </div>\n                  </div>\n                  {form.watch(\"loginPageLogo\") && (\n                    <div className=\"p-4 border rounded-lg bg-gray-50 dark:bg-gray-900\">\n                      <div className=\"flex items-center space-x-4\">\n                        <img \n                          src={form.watch(\"loginPageLogo\") || \"\"} \n                          alt=\"Login page logo preview\" \n                          className=\"w-16 h-16 object-contain border rounded\"\n                        />\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\">Current Login Page Logo</p>\n                          <p className=\"text-xs text-gray-500 break-all\">{form.watch(\"loginPageLogo\")}</p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"loginPageLogoWidth\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Login Page Logo Width (px)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"80\" \n                          {...field} \n                          value={field.value || 80}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 80)}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n\n              </TabsContent>\n\n              <TabsContent value=\"email\" className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"text-lg font-medium\">SMTP Configuration</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Configure email settings for order notifications and confirmations\n                      </p>\n                    </div>\n                    {smtpStatus && (\n                      <div className={`px-3 py-1 rounded-full text-xs font-medium ${\n                        smtpStatus.configured && smtpStatus.enabled \n                          ? 'bg-green-100 text-green-800' \n                          : 'bg-yellow-100 text-yellow-800'\n                      }`}>\n                        {smtpStatus.configured && smtpStatus.enabled ? 'Configured' : 'Not Configured'}\n                      </div>\n                    )}\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"smtpEnabled\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                        <div className=\"space-y-0.5\">\n                          <FormLabel className=\"text-base\">Enable Email Notifications</FormLabel>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Send automated emails for order confirmations and updates\n                          </p>\n                        </div>\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"smtpHost\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>SMTP Host</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"smtp.gmail.com\" {...field} />\n                          </FormControl>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Your email provider's SMTP server\n                          </p>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"smtpPort\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>SMTP Port</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"587\" \n                              {...field}\n                              value={field.value || 587}\n                              onChange={(e) => field.onChange(parseInt(e.target.value) || 587)}\n                            />\n                          </FormControl>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Usually 587 for TLS or 465 for SSL\n                          </p>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"smtpSecure\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                        <div className=\"space-y-0.5\">\n                          <FormLabel className=\"text-base\">Use SSL/TLS</FormLabel>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Turn OFF for port 587 (most providers). Turn ON only for port 465.\n                          </p>\n                        </div>\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"smtpUser\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>SMTP Username</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"your-email@gmail.com\" {...field} />\n                          </FormControl>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Your email address or username\n                          </p>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"smtpPassword\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>SMTP Password</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"password\" \n                              placeholder=\"App password or email password\" \n                              {...field} \n                            />\n                          </FormControl>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Use app password for Gmail/Outlook\n                          </p>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"smtpFromName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>From Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"BAYG - Bahrain Asian Youth Games 2025\" {...field} />\n                          </FormControl>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Display name for outgoing emails\n                          </p>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"smtpFromEmail\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>From Email</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"noreply@yourdomain.com\" {...field} />\n                          </FormControl>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Email address for outgoing emails\n                          </p>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"border-t pt-4\">\n                    <h4 className=\"text-md font-medium mb-4\">Email Testing</h4>\n                    <div className=\"flex items-end gap-4\">\n                      <div className=\"flex-1\">\n                        <Label htmlFor=\"test-email\">Test Email Address</Label>\n                        <Input\n                          id=\"test-email\"\n                          type=\"email\"\n                          placeholder=\"Enter email to test\"\n                          value={testEmailAddress}\n                          onChange={(e) => setTestEmailAddress(e.target.value)}\n                        />\n                      </div>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={handleTestEmail}\n                        disabled={isTestingEmail || !testEmailAddress}\n                        className=\"flex items-center gap-2\"\n                      >\n                        <Mail className=\"h-4 w-4\" />\n                        {isTestingEmail ? \"Sending...\" : \"Send Test Email\"}\n                      </Button>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-2\">\n                      Save your SMTP settings first, then test with a real email address\n                    </p>\n                  </div>\n\n                  <div className=\"bg-blue-50 p-4 rounded-lg border-l-4 border-blue-500\">\n                    <h4 className=\"font-medium text-blue-900 mb-2\">Email Setup Instructions</h4>\n                    <div className=\"text-sm text-blue-800 space-y-2\">\n                      <div>\n                        <p><strong>Gmail:</strong> smtp.gmail.com, port 587, SSL/TLS off</p>\n                        <p className=\"text-xs\">Use an App Password (not your regular password)</p>\n                      </div>\n                      <div>\n                        <p><strong>Outlook/Hotmail:</strong> smtp-mail.outlook.com, port 587, SSL/TLS off</p>\n                        <p className=\"text-xs\">Regular password or App Password if 2FA is enabled</p>\n                      </div>\n                      <div>\n                        <p><strong>Yahoo:</strong> smtp.mail.yahoo.com, port 587, SSL/TLS off</p>\n                        <p className=\"text-xs\">Must use an App Password (Yahoo requires it)</p>\n                      </div>\n                      <div className=\"border-t pt-2 mt-2\">\n                        <p className=\"font-medium\">Common Issues:</p>\n                        <ul className=\"text-xs list-disc list-inside space-y-1\">\n                          <li>Use port 587 with SSL/TLS disabled for most providers</li>\n                          <li>Enable \"Less secure app access\" or use App Passwords</li>\n                          <li>For Gmail: Generate App Password in Google Account settings</li>\n                          <li>For Outlook: Use your Microsoft account password or App Password</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n\n              <div className=\"flex justify-end pt-6 border-t\">\n                <Button \n                  type=\"submit\" \n                  disabled={updateMutation.isPending}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Save className=\"h-4 w-4\" />\n                  {updateMutation.isPending ? \"Saving...\" : \"Save Settings\"}\n                </Button>\n              </div>\n            </Tabs>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":60387},"client/src/components/admin/SliderManager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertSliderImageSchema } from \"@shared/schema\";\nimport { Plus, Upload, Edit, Trash2, Eye, EyeOff, GripVertical } from \"lucide-react\";\nimport type { SliderImage, InsertSliderImage } from \"@shared/schema\";\n\nexport function SliderManager() {\n  const { toast } = useToast();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingSlider, setEditingSlider] = useState<SliderImage | null>(null);\n  const [uploadingImage, setUploadingImage] = useState(false);\n\n  const { data: sliderImages, isLoading } = useQuery({\n    queryKey: [\"/api/slider-images\"],\n  });\n\n  const form = useForm<InsertSliderImage>({\n    resolver: zodResolver(insertSliderImageSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      imageUrl: \"\",\n      isActive: true,\n      sortOrder: 0,\n    },\n  });\n\n  const createSliderMutation = useMutation({\n    mutationFn: async (data: InsertSliderImage) => {\n      const res = await apiRequest(\"/api/slider-images\", \"POST\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/slider-images\"] });\n      setIsAddDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Slider image added successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add slider image\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSliderMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<SliderImage> }) => {\n      const res = await apiRequest(`/api/slider-images/${id}`, \"PATCH\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/slider-images\"] });\n      setEditingSlider(null);\n      toast({\n        title: \"Success\",\n        description: \"Slider image updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update slider image\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteSliderMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest(`/api/slider-images/${id}`, \"DELETE\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/slider-images\"] });\n      toast({\n        title: \"Success\",\n        description: \"Slider image deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete slider image\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setUploadingImage(true);\n    const formData = new FormData();\n    formData.append('image', file);\n\n    try {\n      const response = await fetch('/api/upload-image', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        form.setValue('imageUrl', data.imageUrl);\n        toast({\n          title: \"Success\",\n          description: \"Image uploaded successfully\",\n        });\n      } else {\n        throw new Error('Upload failed');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload image\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploadingImage(false);\n    }\n  };\n\n  const onSubmit = (data: InsertSliderImage) => {\n    if (editingSlider) {\n      updateSliderMutation.mutate({ id: editingSlider.id, data });\n    } else {\n      createSliderMutation.mutate(data);\n    }\n  };\n\n  const toggleSliderStatus = (slider: SliderImage) => {\n    updateSliderMutation.mutate({\n      id: slider.id,\n      data: { isActive: !slider.isActive }\n    });\n  };\n\n  const handleEdit = (slider: SliderImage) => {\n    setEditingSlider(slider);\n    form.reset({\n      title: slider.title || \"\",\n      description: slider.description || \"\",\n      imageUrl: slider.imageUrl,\n      isActive: slider.isActive,\n      sortOrder: slider.sortOrder,\n    });\n    setIsAddDialogOpen(true);\n  };\n\n  const handleClose = () => {\n    setIsAddDialogOpen(false);\n    setEditingSlider(null);\n    form.reset();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Slider Images</h2>\n          <p className=\"text-gray-600\">Manage homepage slider images</p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={() => setEditingSlider(null)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Slider Image\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>{editingSlider ? \"Edit\" : \"Add\"} Slider Image</DialogTitle>\n              <DialogDescription>\n                {editingSlider ? \"Update\" : \"Create a new\"} slider image for the homepage.\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title (Optional)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter slide title\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"Enter slide description\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"imageUrl\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Image *</FormLabel>\n                      <FormControl>\n                        <div className=\"space-y-2\">\n                          <Input placeholder=\"Image URL\" {...field} />\n                          <div className=\"flex items-center gap-2\">\n                            <Input\n                              type=\"file\"\n                              accept=\"image/*\"\n                              onChange={handleImageUpload}\n                              className=\"hidden\"\n                              id=\"slider-image-upload\"\n                            />\n                            <Label htmlFor=\"slider-image-upload\" className=\"cursor-pointer\">\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                disabled={uploadingImage}\n                                asChild\n                              >\n                                <span>\n                                  <Upload className=\"h-4 w-4 mr-2\" />\n                                  {uploadingImage ? \"Uploading...\" : \"Upload Image\"}\n                                </span>\n                              </Button>\n                            </Label>\n                          </div>\n                          {field.value && (\n                            <img\n                              src={field.value}\n                              alt=\"Preview\"\n                              className=\"w-full h-32 object-cover rounded border\"\n                            />\n                          )}\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"sortOrder\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Sort Order</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          placeholder=\"0\"\n                          {...field}\n                          value={field.value || 0}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"isActive\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center justify-between\">\n                      <FormLabel>Active</FormLabel>\n                      <FormControl>\n                        <Switch\n                          checked={field.value || false}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-2 pt-4\">\n                  <Button\n                    type=\"submit\"\n                    disabled={createSliderMutation.isPending || updateSliderMutation.isPending}\n                    className=\"flex-1\"\n                  >\n                    {createSliderMutation.isPending || updateSliderMutation.isPending\n                      ? \"Saving...\"\n                      : editingSlider\n                      ? \"Update\"\n                      : \"Add\"}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleClose}\n                    className=\"flex-1\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Slider Images List */}\n      <div className=\"space-y-4\">\n        {isLoading ? (\n          Array.from({ length: 3 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <Skeleton className=\"h-20 w-32\" />\n                  <div className=\"flex-1 space-y-2\">\n                    <Skeleton className=\"h-4 w-32\" />\n                    <Skeleton className=\"h-3 w-48\" />\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Skeleton className=\"h-8 w-8\" />\n                    <Skeleton className=\"h-8 w-8\" />\n                    <Skeleton className=\"h-8 w-8\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : Array.isArray(sliderImages) && sliderImages.length === 0 ? (\n          <Card>\n            <CardContent className=\"text-center py-8\">\n              <p className=\"text-gray-500\">No slider images found. Add your first slider image to get started.</p>\n            </CardContent>\n          </Card>\n        ) : (\n          Array.isArray(sliderImages) ? sliderImages.map((slider: SliderImage) => (\n            <Card key={slider.id} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"cursor-move\">\n                    <GripVertical className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <img\n                    src={slider.imageUrl}\n                    alt={slider.title || \"Slider image\"}\n                    className=\"h-20 w-32 object-cover rounded border\"\n                  />\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium text-gray-900\">\n                      {slider.title || \"Untitled\"}\n                    </h3>\n                    <p className=\"text-sm text-gray-500 mt-1\">\n                      {slider.description || \"No description\"}\n                    </p>\n                    <div className=\"flex items-center gap-2 mt-2\">\n                      <span className=\"text-xs text-gray-400\">Order: {slider.sortOrder}</span>\n                      <span className={`text-xs px-2 py-1 rounded ${\n                        slider.isActive \n                          ? \"bg-green-100 text-green-800\" \n                          : \"bg-gray-100 text-gray-800\"\n                      }`}>\n                        {slider.isActive ? \"Active\" : \"Inactive\"}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => toggleSliderStatus(slider)}\n                      disabled={updateSliderMutation.isPending}\n                    >\n                      {slider.isActive ? (\n                        <EyeOff className=\"h-4 w-4\" />\n                      ) : (\n                        <Eye className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => handleEdit(slider)}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => deleteSliderMutation.mutate(slider.id)}\n                      disabled={deleteSliderMutation.isPending}\n                    >\n                      <Trash2 className=\"h-4 w-4 text-red-500\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )) : null\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":15648},"client/src/components/admin/UnitsOfMeasureManager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUnitOfMeasureSchema, type InsertUnitOfMeasure, type UnitOfMeasure } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Plus, Edit, Trash2, Ruler } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst enhancedUnitSchema = insertUnitOfMeasureSchema.extend({\n  isActive: z.boolean().default(true),\n});\n\ntype EnhancedInsertUnit = z.infer<typeof enhancedUnitSchema>;\n\nexport function UnitsOfMeasureManager() {\n  const { toast } = useToast();\n  const [isAddOpen, setIsAddOpen] = useState(false);\n  const [editingUnit, setEditingUnit] = useState<UnitOfMeasure | null>(null);\n\n  const { data: units, isLoading: unitsLoading } = useQuery<UnitOfMeasure[]>({\n    queryKey: [\"/api/admin/units-of-measure\"],\n  });\n\n  const form = useForm<EnhancedInsertUnit>({\n    resolver: zodResolver(enhancedUnitSchema),\n    defaultValues: {\n      name: \"\",\n      abbreviation: \"\",\n      isActive: true,\n    },\n  });\n\n  const createUnitMutation = useMutation({\n    mutationFn: async (unitData: InsertUnitOfMeasure) => {\n      const res = await apiRequest(\"/api/admin/units-of-measure\", \"POST\", unitData);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/units-of-measure\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/units-of-measure\"] });\n      setIsAddOpen(false);\n      setEditingUnit(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Unit of measure created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create unit of measure\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUnitMutation = useMutation({\n    mutationFn: async ({ id, unitData }: { id: string; unitData: Partial<InsertUnitOfMeasure> }) => {\n      const res = await apiRequest(`/api/admin/units-of-measure/${id}`, \"PUT\", unitData);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/units-of-measure\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/units-of-measure\"] });\n      setEditingUnit(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Unit of measure updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update unit of measure\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUnitMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(`/api/admin/units-of-measure/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/units-of-measure\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/units-of-measure\"] });\n      toast({\n        title: \"Success\",\n        description: \"Unit of measure deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete unit of measure\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: EnhancedInsertUnit) => {\n    if (editingUnit) {\n      updateUnitMutation.mutate({ id: editingUnit.id, unitData: data });\n    } else {\n      createUnitMutation.mutate(data);\n    }\n  };\n\n  const startEdit = (unit: UnitOfMeasure) => {\n    setEditingUnit(unit);\n    form.reset({\n      name: unit.name,\n      abbreviation: unit.abbreviation,\n      isActive: unit.isActive ?? true,\n    });\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this unit of measure?\")) {\n      deleteUnitMutation.mutate(id);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Ruler className=\"w-5 h-5\" />\n              Units of Measure\n            </CardTitle>\n            <CardDescription>\n              Manage units of measure for products (kg, pieces, liters, etc.)\n            </CardDescription>\n          </div>\n          <Dialog open={isAddOpen || !!editingUnit} onOpenChange={(open) => {\n            if (!open) {\n              setIsAddOpen(false);\n              setEditingUnit(null);\n              form.reset();\n            }\n          }}>\n            <DialogTrigger asChild>\n              <Button onClick={() => setIsAddOpen(true)}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Unit\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>\n                  {editingUnit ? \"Edit Unit of Measure\" : \"Add New Unit of Measure\"}\n                </DialogTitle>\n                <DialogDescription>\n                  {editingUnit ? \"Update the unit of measure details\" : \"Create a new unit of measure for products\"}\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., kilogram, piece, liter\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"abbreviation\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Abbreviation</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., kg, pc, L\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"isActive\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox \n                            checked={field.value} \n                            onCheckedChange={field.onChange} \n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel>Active</FormLabel>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Active units are available for selection in product forms\n                          </p>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex justify-end gap-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setIsAddOpen(false);\n                        setEditingUnit(null);\n                        form.reset();\n                      }}\n                    >\n                      Cancel\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={createUnitMutation.isPending || updateUnitMutation.isPending}\n                    >\n                      {createUnitMutation.isPending || updateUnitMutation.isPending\n                        ? \"Saving...\"\n                        : editingUnit\n                        ? \"Update Unit\"\n                        : \"Create Unit\"\n                      }\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {unitsLoading ? (\n          <div className=\"space-y-2\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-12 bg-gray-100 rounded animate-pulse\" />\n            ))}\n          </div>\n        ) : units && units.length > 0 ? (\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Name</TableHead>\n                <TableHead>Abbreviation</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {units.map((unit) => (\n                <TableRow key={unit.id}>\n                  <TableCell className=\"font-medium\">{unit.name}</TableCell>\n                  <TableCell>{unit.abbreviation}</TableCell>\n                  <TableCell>\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                      unit.isActive \n                        ? \"bg-green-100 text-green-800\" \n                        : \"bg-gray-100 text-gray-800\"\n                    }`}>\n                      {unit.isActive ? \"Active\" : \"Inactive\"}\n                    </span>\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <div className=\"flex items-center gap-2 justify-end\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => startEdit(unit)}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleDelete(unit.id)}\n                        disabled={deleteUnitMutation.isPending}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        ) : (\n          <div className=\"text-center py-8 text-gray-500\">\n            No units of measure found. Create your first unit to get started.\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":11503},"client/src/components/admin/UserManager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema, type InsertUser, type User } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Plus, Edit, Trash2, Users, Shield, User as UserIcon, Settings } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface Role {\n  id: string;\n  name: string;\n  displayName: string;\n  description: string;\n}\n\nexport function UserManager() {\n  const { toast } = useToast();\n  const { user: currentUser } = useAuth();\n  const [isAddOpen, setIsAddOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [isPermissionDialogOpen, setIsPermissionDialogOpen] = useState(false);\n  const [selectedUserForPermissions, setSelectedUserForPermissions] = useState<User | null>(null);\n  const [selectedRoleId, setSelectedRoleId] = useState<string>(\"\");\n\n  const { data: users, isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  const { data: roles } = useQuery<Role[]>({\n    queryKey: [\"/api/admin/roles\"],\n  });\n\n  const form = useForm<InsertUser>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      isAdmin: false,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertUser) => {\n      const response = await apiRequest(\"/api/admin/users\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setIsAddOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"User created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertUser> }) => {\n      const response = await apiRequest(`/api/admin/users/${id}`, \"PUT\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setEditingUser(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"User updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(`/api/admin/users/${userId}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleAdminMutation = useMutation({\n    mutationFn: async ({ userId, isAdmin }: { userId: string; isAdmin: boolean }) => {\n      const response = await apiRequest(`/api/admin/users/${userId}`, \"PUT\", { isAdmin });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User role updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const assignRoleMutation = useMutation({\n    mutationFn: async ({ userId, roleId }: { userId: string; roleId: string }) => {\n      await apiRequest(`/api/admin/assign-role`, \"POST\", { userId, roleId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setIsPermissionDialogOpen(false);\n      setSelectedUserForPermissions(null);\n      setSelectedRoleId(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Role assigned successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to assign role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertUser) => {\n    console.log(\"User form submitted with data:\", data);\n    console.log(\"User form errors:\", form.formState.errors);\n    \n    if (editingUser) {\n      updateMutation.mutate({ id: editingUser.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (user: User) => {\n    setEditingUser(user);\n    form.reset({\n      username: user.username,\n      email: user.email,\n      password: \"\", // Don't pre-fill password for security\n      firstName: user.firstName || \"\",\n      lastName: user.lastName || \"\",\n      isAdmin: user.isAdmin || false,\n    });\n  };\n\n  const handleCloseDialog = () => {\n    setIsAddOpen(false);\n    setEditingUser(null);\n    form.reset();\n  };\n\n  const handleToggleAdmin = (user: User) => {\n    toggleAdminMutation.mutate({\n      userId: user.id,\n      isAdmin: !user.isAdmin,\n    });\n  };\n\n  const handleOpenPermissionDialog = (user: User) => {\n    setSelectedUserForPermissions(user);\n    setSelectedRoleId(user.roleId || \"\");\n    setIsPermissionDialogOpen(true);\n  };\n\n  const handleAssignRole = () => {\n    if (selectedUserForPermissions && selectedRoleId) {\n      assignRoleMutation.mutate({\n        userId: selectedUserForPermissions.id,\n        roleId: selectedRoleId,\n      });\n    }\n  };\n\n  if (isLoading) {\n    return <div>Loading users...</div>;\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            User Management\n          </CardTitle>\n          <Button onClick={() => {\n            console.log(\"Add User button clicked\");\n            setIsAddOpen(true);\n          }} className=\"flex items-center gap-2\">\n            <Plus className=\"h-4 w-4\" />\n            Add User\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* User Dialog */}\n        <Dialog open={isAddOpen || !!editingUser} onOpenChange={handleCloseDialog}>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>\n                  {editingUser ? \"Edit User\" : \"Add New User\"}\n                </DialogTitle>\n                <DialogDescription>\n                  {editingUser ? \"Update the user information below.\" : \"Fill in the details to create a new user account.\"}\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"firstName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>First Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"John\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"lastName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Last Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Doe\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"username\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Username</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"johndoe\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"john@example.com\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          Password {editingUser && \"(leave blank to keep current)\"}\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"password\"\n                            placeholder={editingUser ? \"Leave blank to keep current\" : \"Enter password\"}\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"isAdmin\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value || false}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel>Admin User</FormLabel>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Grant admin privileges to this user\n                          </p>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end gap-2\">\n                    <Button type=\"button\" variant=\"outline\" onClick={handleCloseDialog}>\n                      Cancel\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={createMutation.isPending || updateMutation.isPending}\n                    >\n                      {editingUser ? \"Update\" : \"Create\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n        </Dialog>\n        <div className=\"grid gap-4\">\n          {users?.length === 0 ? (\n            <p className=\"text-center text-muted-foreground py-8\">\n              No users found. Add your first user to get started.\n            </p>\n          ) : (\n            users?.map((user) => (\n              <div\n                key={user.id}\n                className=\"flex items-center justify-between p-4 border rounded-lg\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex items-center justify-center w-10 h-10 bg-gray-100 rounded-full\">\n                    {user.isAdmin ? (\n                      <Shield className=\"h-5 w-5 text-blue-600\" />\n                    ) : (\n                      <UserIcon className=\"h-5 w-5 text-gray-600\" />\n                    )}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <h3 className=\"font-semibold\">\n                        {user.firstName && user.lastName \n                          ? `${user.firstName} ${user.lastName}` \n                          : user.username}\n                      </h3>\n                      {user.isAdmin && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          Admin\n                        </Badge>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      @{user.username} • {user.email}\n                    </p>\n                    {user.createdAt && (\n                      <p className=\"text-xs text-muted-foreground\">\n                        Joined {new Date(user.createdAt).toLocaleDateString()}\n                      </p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  {currentUser?.isSuperAdmin && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleOpenPermissionDialog(user)}\n                      title=\"Assign Role & Permissions\"\n                    >\n                      <Settings className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleToggleAdmin(user)}\n                    disabled={toggleAdminMutation.isPending}\n                  >\n                    {user.isAdmin ? \"Remove Admin\" : \"Make Admin\"}\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleEdit(user)}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => deleteMutation.mutate(user.id)}\n                    disabled={deleteMutation.isPending}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n\n        {/* Role Assignment Dialog */}\n        <Dialog open={isPermissionDialogOpen} onOpenChange={setIsPermissionDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Assign Role & Permissions</DialogTitle>\n              <DialogDescription>\n                Assign a role to {selectedUserForPermissions?.username} to control their permissions and access level.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Select Role</label>\n                <Select value={selectedRoleId} onValueChange={setSelectedRoleId}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose a role...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {roles?.map((role) => (\n                      <SelectItem key={role.id} value={role.id}>\n                        <div className=\"flex flex-col\">\n                          <span className=\"font-medium\">{role.displayName}</span>\n                          <span className=\"text-xs text-muted-foreground\">{role.description}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex justify-end gap-2\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setIsPermissionDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleAssignRole}\n                  disabled={!selectedRoleId || assignRoleMutation.isPending}\n                >\n                  {assignRoleMutation.isPending ? \"Assigning...\" : \"Assign Role\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":17737},"client/src/components/admin/admin-request-section.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { CheckCircle, XCircle, Clock, Eye, MessageSquare, Package, User, DollarSign, Calendar } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Order {\n  id: string;\n  userId: string;\n  status: string;\n  total: string;\n  subtotal: string;\n  tax: string;\n  vatPercentage: string;\n  adminApprovalStatus: string;\n  adminApprovedBy?: string;\n  adminApprovedAt?: string;\n  adminRemarks?: string;\n  paymentMethod?: string;\n  shippingAddress: any;\n  createdAt: string;\n  user?: {\n    id: string;\n    username: string;\n    email: string;\n    firstName?: string;\n    lastName?: string;\n  };\n  items?: Array<{\n    id: string;\n    productId: string;\n    quantity: number;\n    price: string;\n    product: {\n      id: string;\n      name: string;\n      imageUrl?: string;\n    };\n  }>;\n}\n\nexport function AdminRequestSection() {\n  const { toast } = useToast();\n  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);\n  const [adminRemarks, setAdminRemarks] = useState(\"\");\n  const [isApprovalDialogOpen, setIsApprovalDialogOpen] = useState(false);\n  const [isRejectionDialogOpen, setIsRejectionDialogOpen] = useState(false);\n  const [filterStatus, setFilterStatus] = useState<'all' | 'pending' | 'approved' | 'rejected'>('pending');\n\n  const { data: orders, isLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/admin/approval-requests\"],\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async ({ orderId, remarks }: { orderId: string; remarks: string }) => {\n      const res = await apiRequest(`/api/admin/orders/${orderId}/approve`, \"PUT\", {\n        adminRemarks: remarks,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/approval-requests\"] });\n      setIsApprovalDialogOpen(false);\n      setAdminRemarks(\"\");\n      setSelectedOrder(null);\n      toast({\n        title: \"Order Approved\",\n        description: \"Customer has been notified via email and can now proceed with payment.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Approval Failed\",\n        description: error.message || \"Failed to approve order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async ({ orderId, remarks }: { orderId: string; remarks: string }) => {\n      const res = await apiRequest(`/api/admin/orders/${orderId}/reject`, \"PUT\", {\n        adminRemarks: remarks,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/approval-requests\"] });\n      setIsRejectionDialogOpen(false);\n      setAdminRemarks(\"\");\n      setSelectedOrder(null);\n      toast({\n        title: \"Order Rejected\",\n        description: \"Customer has been notified via email.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Rejection Failed\",\n        description: error.message || \"Failed to reject order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApprove = (order: Order) => {\n    setSelectedOrder(order);\n    setIsApprovalDialogOpen(true);\n  };\n\n  const handleReject = (order: Order) => {\n    setSelectedOrder(order);\n    setIsRejectionDialogOpen(true);\n  };\n\n  const confirmApproval = () => {\n    if (selectedOrder) {\n      approveMutation.mutate({\n        orderId: selectedOrder.id,\n        remarks: adminRemarks,\n      });\n    }\n  };\n\n  const confirmRejection = () => {\n    if (selectedOrder) {\n      rejectMutation.mutate({\n        orderId: selectedOrder.id,\n        remarks: adminRemarks,\n      });\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"rejected\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case \"rejected\":\n        return <XCircle className=\"h-4 w-4\" />;\n      case \"pending\":\n        return <Clock className=\"h-4 w-4\" />;\n      default:\n        return <Clock className=\"h-4 w-4\" />;\n    }\n  };\n\n  const filteredOrders = orders?.filter(order => {\n    if (filterStatus === 'all') return true;\n    return order.adminApprovalStatus === filterStatus;\n  }) || [];\n\n  const pendingCount = orders?.filter(order => order.adminApprovalStatus === 'pending').length || 0;\n  const approvedCount = orders?.filter(order => order.adminApprovalStatus === 'approved').length || 0;\n  const rejectedCount = orders?.filter(order => order.adminApprovalStatus === 'rejected').length || 0;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold\">Order Approval Requests</h2>\n        </div>\n        <div className=\"space-y-4\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-6 bg-gray-200 rounded w-1/3\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-20 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Order Approval Requests</h2>\n          <p className=\"text-gray-600 mt-1\">Review and manage customer order approvals</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Badge variant=\"secondary\" className=\"px-3 py-1\">\n            {pendingCount} Pending\n          </Badge>\n        </div>\n      </div>\n\n      {/* Status Filter Tabs */}\n      <div className=\"flex space-x-1 bg-gray-100 p-1 rounded-lg w-fit\">\n        {[\n          { key: 'pending', label: 'Pending', count: pendingCount },\n          { key: 'approved', label: 'Approved', count: approvedCount },\n          { key: 'rejected', label: 'Rejected', count: rejectedCount },\n          { key: 'all', label: 'All', count: orders?.length || 0 }\n        ].map(({ key, label, count }) => (\n          <button\n            key={key}\n            onClick={() => setFilterStatus(key as any)}\n            className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n              filterStatus === key\n                ? 'bg-white text-gray-900 shadow-sm'\n                : 'text-gray-600 hover:text-gray-900'\n            }`}\n          >\n            {label} ({count})\n          </button>\n        ))}\n      </div>\n\n      {/* Orders List */}\n      {filteredOrders.length === 0 ? (\n        <Card className=\"text-center py-12\">\n          <CardContent>\n            <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n              {filterStatus === 'pending' ? 'No Pending Requests' : `No ${filterStatus === 'all' ? '' : filterStatus.charAt(0).toUpperCase() + filterStatus.slice(1)} Orders`}\n            </h3>\n            <p className=\"text-gray-600\">\n              {filterStatus === 'pending' \n                ? 'All orders have been reviewed. New requests will appear here.' \n                : 'Orders matching your filter will appear here.'}\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {filteredOrders.map((order) => (\n            <Card key={order.id} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <CardTitle className=\"text-lg font-semibold\">\n                        Order #{order.id.slice(-8).toUpperCase()}\n                      </CardTitle>\n                      <div className=\"flex items-center space-x-4 mt-2 text-sm text-gray-600\">\n                        <div className=\"flex items-center space-x-1\">\n                          <User className=\"h-4 w-4\" />\n                          <span>{order.user?.firstName && order.user?.lastName \n                            ? `${order.user.firstName} ${order.user.lastName}` \n                            : order.user?.username}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span>{formatDistanceToNow(new Date(order.createdAt))} ago</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <DollarSign className=\"h-4 w-4\" />\n                          <span>${order.total}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <Badge className={`${getStatusColor(order.adminApprovalStatus)} border`}>\n                      <div className=\"flex items-center space-x-1\">\n                        {getStatusIcon(order.adminApprovalStatus)}\n                        <span className=\"capitalize\">{order.adminApprovalStatus}</span>\n                      </div>\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Order Items Summary */}\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Items ({order.items?.length || 0})</h4>\n                    <div className=\"space-y-2\">\n                      {order.items?.slice(0, 3).map((item) => (\n                        <div key={item.id} className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">\n                            {item.quantity}x {item.product.name}\n                          </span>\n                          <span className=\"font-medium\">${(parseFloat(item.price) * item.quantity).toFixed(2)}</span>\n                        </div>\n                      ))}\n                      {(order.items?.length || 0) > 3 && (\n                        <div className=\"text-sm text-gray-500\">\n                          +{(order.items?.length || 0) - 3} more items\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Customer Info */}\n                  <div className=\"border-t pt-3\">\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Customer Details</h4>\n                    <div className=\"text-sm text-gray-600 space-y-1\">\n                      <p><strong>Email:</strong> {order.user?.email}</p>\n                      {order.shippingAddress && (\n                        <p><strong>Address:</strong> {order.shippingAddress.address}, {order.shippingAddress.city}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Admin Remarks */}\n                  {order.adminRemarks && (\n                    <div className=\"border-t pt-3\">\n                      <h4 className=\"font-medium text-gray-900 mb-2\">Admin Remarks</h4>\n                      <p className=\"text-sm text-gray-600 italic\">\"{order.adminRemarks}\"</p>\n                    </div>\n                  )}\n\n                  {/* Action Buttons */}\n                  {order.adminApprovalStatus === 'pending' && (\n                    <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleReject(order)}\n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                      >\n                        <XCircle className=\"h-4 w-4 mr-2\" />\n                        Reject\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleApprove(order)}\n                        className=\"bg-green-600 hover:bg-green-700\"\n                      >\n                        <CheckCircle className=\"h-4 w-4 mr-2\" />\n                        Approve\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Approval Dialog */}\n      <Dialog open={isApprovalDialogOpen} onOpenChange={setIsApprovalDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Approve Order</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to approve this order? The customer will be notified and can proceed with payment.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"approval-remarks\">Admin Remarks (Optional)</Label>\n              <Textarea\n                id=\"approval-remarks\"\n                placeholder=\"Add any notes for the customer...\"\n                value={adminRemarks}\n                onChange={(e) => setAdminRemarks(e.target.value)}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsApprovalDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button \n              onClick={confirmApproval}\n              disabled={approveMutation.isPending}\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              {approveMutation.isPending ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\"></div>\n                  Approving...\n                </>\n              ) : (\n                \"Approve Order\"\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Rejection Dialog */}\n      <Dialog open={isRejectionDialogOpen} onOpenChange={setIsRejectionDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Reject Order</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to reject this order? The customer will be notified.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"rejection-remarks\">Reason for Rejection *</Label>\n              <Textarea\n                id=\"rejection-remarks\"\n                placeholder=\"Please provide a reason for rejecting this order...\"\n                value={adminRemarks}\n                onChange={(e) => setAdminRemarks(e.target.value)}\n                required\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsRejectionDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button \n              onClick={confirmRejection}\n              disabled={rejectMutation.isPending || !adminRemarks.trim()}\n              variant=\"destructive\"\n            >\n              {rejectMutation.isPending ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\"></div>\n                  Rejecting...\n                </>\n              ) : (\n                \"Reject Order\"\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":16683},"client/src/components/admin/order-approval-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { CheckCircle, XCircle, Clock, Eye, MessageSquare } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Order {\n  id: string;\n  userId: string;\n  status: string;\n  total: string;\n  subtotal: string;\n  tax: string;\n  vatPercentage: string;\n  adminApprovalStatus: string;\n  adminApprovedBy?: string;\n  adminApprovedAt?: string;\n  adminRemarks?: string;\n  paymentMethod?: string;\n  shippingAddress: any;\n  createdAt: string;\n  user?: {\n    id: string;\n    username: string;\n    email: string;\n    firstName?: string;\n    lastName?: string;\n  };\n  items?: Array<{\n    id: string;\n    productId: string;\n    quantity: number;\n    price: string;\n    product: {\n      id: string;\n      name: string;\n      imageUrl?: string;\n    };\n  }>;\n}\n\nexport function OrderApprovalManagement() {\n  const { toast } = useToast();\n  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);\n  const [adminRemarks, setAdminRemarks] = useState(\"\");\n  const [isApprovalDialogOpen, setIsApprovalDialogOpen] = useState(false);\n  const [isRejectionDialogOpen, setIsRejectionDialogOpen] = useState(false);\n\n  const { data: orders, isLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async ({ orderId, remarks }: { orderId: string; remarks: string }) => {\n      const res = await apiRequest(`/api/admin/orders/${orderId}/approve`, \"PUT\", {\n        adminRemarks: remarks,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      setIsApprovalDialogOpen(false);\n      setAdminRemarks(\"\");\n      toast({\n        title: \"Order Approved\",\n        description: \"Customer has been notified via email.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Approval Failed\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async ({ orderId, remarks }: { orderId: string; remarks: string }) => {\n      const res = await apiRequest(`/api/admin/orders/${orderId}/reject`, \"PUT\", {\n        adminRemarks: remarks,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      setIsRejectionDialogOpen(false);\n      setAdminRemarks(\"\");\n      toast({\n        title: \"Order Rejected\",\n        description: \"Customer has been notified via email.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Rejection Failed\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApprove = () => {\n    if (selectedOrder) {\n      approveMutation.mutate({\n        orderId: selectedOrder.id,\n        remarks: adminRemarks,\n      });\n    }\n  };\n\n  const handleReject = () => {\n    if (selectedOrder) {\n      rejectMutation.mutate({\n        orderId: selectedOrder.id,\n        remarks: adminRemarks,\n      });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\"><Clock className=\"h-3 w-3 mr-1\" />Pending Approval</Badge>;\n      case \"approved\":\n        return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\"><CheckCircle className=\"h-3 w-3 mr-1\" />Approved</Badge>;\n      case \"rejected\":\n        return <Badge variant=\"secondary\" className=\"bg-red-100 text-red-800\"><XCircle className=\"h-3 w-3 mr-1\" />Rejected</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const pendingOrders = orders?.filter(order => order.adminApprovalStatus === \"pending\") || [];\n  const processedOrders = orders?.filter(order => order.adminApprovalStatus !== \"pending\") || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"h-8 bg-gray-200 rounded animate-pulse\"></div>\n        <div className=\"h-64 bg-gray-200 rounded animate-pulse\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">Order Approval Management</h2>\n        <div className=\"flex space-x-4 text-sm\">\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 bg-yellow-400 rounded-full mr-2\"></div>\n            <span>{pendingOrders.length} Pending</span>\n          </div>\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 bg-green-500 rounded-full mr-2\"></div>\n            <span>{processedOrders.filter(o => o.adminApprovalStatus === \"approved\").length} Approved</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Pending Orders */}\n      {pendingOrders.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Clock className=\"h-5 w-5 mr-2 text-yellow-600\" />\n              Pending Approval ({pendingOrders.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {pendingOrders.map((order) => (\n                <div key={order.id} className=\"border rounded-lg p-4 bg-yellow-50 dark:bg-yellow-900/10\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div>\n                      <h3 className=\"font-semibold\">Order #{order.id.slice(0, 8)}</h3>\n                      <p className=\"text-sm text-gray-600\">\n                        {order.user?.firstName} {order.user?.lastName} ({order.user?.email})\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        Submitted {formatDistanceToNow(new Date(order.createdAt))} ago\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-lg font-bold\">${order.total}</p>\n                      {getStatusBadge(order.adminApprovalStatus)}\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-2\">\n                    <Dialog open={isApprovalDialogOpen && selectedOrder?.id === order.id} onOpenChange={setIsApprovalDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button \n                          size=\"sm\" \n                          className=\"bg-green-600 hover:bg-green-700\"\n                          onClick={() => setSelectedOrder(order)}\n                        >\n                          <CheckCircle className=\"h-4 w-4 mr-1\" />\n                          Approve\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Approve Order</DialogTitle>\n                          <DialogDescription>\n                            Approve order #{order.id.slice(0, 8)} for ${order.total}. The customer will be notified via email.\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"approval-remarks\">Admin Remarks (Optional)</Label>\n                          <Textarea\n                            id=\"approval-remarks\"\n                            placeholder=\"Add any notes for the customer...\"\n                            value={adminRemarks}\n                            onChange={(e) => setAdminRemarks(e.target.value)}\n                          />\n                        </div>\n                        <DialogFooter>\n                          <Button variant=\"outline\" onClick={() => setIsApprovalDialogOpen(false)}>\n                            Cancel\n                          </Button>\n                          <Button onClick={handleApprove} disabled={approveMutation.isPending}>\n                            {approveMutation.isPending ? \"Approving...\" : \"Approve Order\"}\n                          </Button>\n                        </DialogFooter>\n                      </DialogContent>\n                    </Dialog>\n\n                    <Dialog open={isRejectionDialogOpen && selectedOrder?.id === order.id} onOpenChange={setIsRejectionDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button \n                          size=\"sm\" \n                          variant=\"destructive\"\n                          onClick={() => setSelectedOrder(order)}\n                        >\n                          <XCircle className=\"h-4 w-4 mr-1\" />\n                          Reject\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Reject Order</DialogTitle>\n                          <DialogDescription>\n                            Reject order #{order.id.slice(0, 8)} for ${order.total}. Please provide a reason for rejection.\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"rejection-remarks\">Reason for Rejection *</Label>\n                          <Textarea\n                            id=\"rejection-remarks\"\n                            placeholder=\"Please provide a reason for rejecting this order...\"\n                            value={adminRemarks}\n                            onChange={(e) => setAdminRemarks(e.target.value)}\n                            required\n                          />\n                        </div>\n                        <DialogFooter>\n                          <Button variant=\"outline\" onClick={() => setIsRejectionDialogOpen(false)}>\n                            Cancel\n                          </Button>\n                          <Button \n                            variant=\"destructive\" \n                            onClick={handleReject} \n                            disabled={rejectMutation.isPending || !adminRemarks.trim()}\n                          >\n                            {rejectMutation.isPending ? \"Rejecting...\" : \"Reject Order\"}\n                          </Button>\n                        </DialogFooter>\n                      </DialogContent>\n                    </Dialog>\n\n                    <Button size=\"sm\" variant=\"outline\">\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      View Details\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Processed Orders */}\n      {processedOrders.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Recently Processed Orders</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {processedOrders.slice(0, 10).map((order) => (\n                <div key={order.id} className=\"flex items-center justify-between py-2 border-b\">\n                  <div>\n                    <h4 className=\"font-medium\">Order #{order.id.slice(0, 8)}</h4>\n                    <p className=\"text-sm text-gray-600\">\n                      {order.user?.firstName} {order.user?.lastName}\n                    </p>\n                    {order.adminRemarks && (\n                      <p className=\"text-xs text-gray-500 flex items-center mt-1\">\n                        <MessageSquare className=\"h-3 w-3 mr-1\" />\n                        {order.adminRemarks}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold\">${order.total}</p>\n                    {getStatusBadge(order.adminApprovalStatus)}\n                    {order.adminApprovedAt && (\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        {formatDistanceToNow(new Date(order.adminApprovedAt))} ago\n                      </p>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {pendingOrders.length === 0 && processedOrders.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <Clock className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Orders Found</h3>\n            <p className=\"text-gray-600\">Orders requiring approval will appear here.</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":13374},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }","size_bytes":1583},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border border-slate-200/60 bg-white/80 backdrop-blur-sm text-card-foreground shadow-lg hover:shadow-xl transition-all duration-300 hover:border-slate-300/60 hover:-translate-y-1\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-2 p-6 pb-4\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-bold leading-tight tracking-tight text-slate-900 mb-1\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-slate-600 leading-relaxed\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-2\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-4 border-t border-slate-100\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":2045},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/order-approval-modal.tsx":{"content":"import { AlertDialog, AlertDialogContent, AlertDialogDescription, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, Clock, X } from \"lucide-react\";\n\ninterface OrderApprovalModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  orderId: string;\n  orderTotal: string;\n}\n\nexport function OrderApprovalModal({ isOpen, onClose, orderId, orderTotal }: OrderApprovalModalProps) {\n  return (\n    <AlertDialog open={isOpen} onOpenChange={onClose}>\n      <AlertDialogContent className=\"max-w-md\">\n        <AlertDialogHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-yellow-100 dark:bg-yellow-900/30\">\n            <Clock className=\"h-8 w-8 text-yellow-600\" />\n          </div>\n          <AlertDialogTitle className=\"text-xl\">Order Request Submitted</AlertDialogTitle>\n          <AlertDialogDescription className=\"space-y-4 text-left\">\n            <div className=\"rounded-lg bg-blue-50 dark:bg-blue-900/20 p-4 border-l-4 border-blue-400\">\n              <div className=\"flex\">\n                <div className=\"flex-shrink-0\">\n                  <CheckCircle className=\"h-5 w-5 text-blue-400\" />\n                </div>\n                <div className=\"ml-3\">\n                  <div className=\"text-sm text-blue-700 dark:text-blue-300\">\n                    <p>\n                      Your order request has been sent to the admin. Once the admin accepts your request, you will receive a notification via email, and then you can proceed with the payment.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Order ID:</span>\n                <span className=\"font-mono text-xs bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded\">\n                  {orderId.slice(0, 8)}...\n                </span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span>Total Amount:</span>\n                <span className=\"font-semibold\">${orderTotal}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span>Status:</span>\n                <span className=\"text-yellow-600 dark:text-yellow-400\">Pending Approval</span>\n              </div>\n            </div>\n\n            <div className=\"rounded-lg bg-green-50 dark:bg-green-900/20 p-3\">\n              <div className=\"text-sm text-green-800 dark:text-green-300 space-y-1\">\n                <p>• Check your email for notifications</p>\n                <p>• Visit your orders page for status updates</p>\n                <p>• Payment will be available after approval</p>\n              </div>\n            </div>\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <div className=\"flex justify-center space-x-2 pt-4\">\n          <Button onClick={onClose} className=\"flex-1\">\n            <CheckCircle className=\"h-4 w-4 mr-2\" />\n            Got it\n          </Button>\n        </div>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}","size_bytes":3228},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":776},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/email-test-advanced.ts":{"content":"import nodemailer from \"nodemailer\";\n\n// Advanced email testing with multiple authentication methods\nexport async function testEmailWithAlternatives() {\n  const testResults: any[] = [];\n\n  // Test 1: Basic Auth (current method)\n  try {\n    console.log(\"Testing Method 1: Basic Authentication...\");\n    const transporter1 = nodemailer.createTransport({\n      host: \"smtp.office365.com\",\n      port: 587,\n      secure: false,\n      auth: {\n        user: \"itsupport@bayg.bh\",\n        pass: \"yccdswrqpghkftfy\",\n      },\n      tls: {\n        ciphers: \"SSLv3\",\n        rejectUnauthorized: false,\n      },\n    });\n\n    await transporter1.verify();\n    testResults.push({ method: \"Basic Auth\", status: \"Success\", error: null });\n  } catch (error: any) {\n    testResults.push({\n      method: \"Basic Auth\",\n      status: \"Failed\",\n      error: error.message,\n      suggestion: \"SMTP authentication disabled by organization\",\n    });\n  }\n\n  // Test 2: OAuth2 Alternative (requires different setup)\n  try {\n    console.log(\"Testing Method 2: Alternative SMTP settings...\");\n    const transporter2 = nodemailer.createTransport({\n      host: \"smtp.office365.com\",\n      port: 25, // Alternative port\n      secure: false,\n      auth: {\n        user: \"itsupport@bayg.bh\",\n        pass: \"yccdswrqpghkftfy\",\n      },\n      requireTLS: true,\n      tls: {\n        rejectUnauthorized: false,\n      },\n    });\n\n    await transporter2.verify();\n    testResults.push({\n      method: \"Alternative Port 25\",\n      status: \"Success\",\n      error: null,\n    });\n  } catch (error: any) {\n    testResults.push({\n      method: \"Alternative Port 25\",\n      status: \"Failed\",\n      error: error.message,\n    });\n  }\n\n  // Test 3: Gmail fallback (if user provides credentials)\n  try {\n    console.log(\"Testing Method 3: Gmail fallback test...\");\n    // This would require Gmail credentials - placeholder for now\n    testResults.push({\n      method: \"Gmail Fallback\",\n      status: \"Not Configured\",\n      error: null,\n      suggestion: \"Gmail credentials not provided\",\n    });\n  } catch (error: any) {\n    testResults.push({\n      method: \"Gmail Fallback\",\n      status: \"Failed\",\n      error: error.message,\n    });\n  }\n\n  return {\n    summary: \"Email system diagnosis complete\",\n    totalTests: testResults.length,\n    successful: testResults.filter((r) => r.status === \"Success\").length,\n    results: testResults,\n    recommendations: [\n      \"Contact IT administrator to enable SMTP authentication for bayg.bh domain\",\n      \"Request a dedicated service account with SMTP permissions\",\n      \"Consider using Gmail as temporary alternative\",\n      \"Set up Microsoft Graph API for email sending (modern approach)\",\n    ],\n  };\n}\n\n// Mock email function for testing UI without actual sending\nexport async function sendMockTestEmail(\n  to: string,\n  testType: string = \"admin\",\n) {\n  console.log(`Mock email test: Sending ${testType} email to ${to}`);\n\n  // Simulate email content based on test type\n  const emailContent = {\n    admin: {\n      subject: \"Admin Test Email - BAYG System\",\n      body: \"This is a test email from the BAYG admin system. Email functionality is being tested.\",\n    },\n    order: {\n      subject: \"Order Confirmation Test - BAYG\",\n      body: \"This is a test order confirmation email from BAYG system.\",\n    },\n    notification: {\n      subject: \"System Notification Test - BAYG\",\n      body: \"This is a test system notification from BAYG.\",\n    },\n  };\n\n  const content =\n    emailContent[testType as keyof typeof emailContent] || emailContent.admin;\n\n  return {\n    success: true,\n    message: `Mock email sent successfully`,\n    details: {\n      to,\n      subject: content.subject,\n      timestamp: new Date().toISOString(),\n      testType,\n      note: \"This is a simulated email test - no actual email was sent due to SMTP authentication restrictions\",\n    },\n  };\n}\n","size_bytes":3864},"server/credimax.ts":{"content":"import { Request, Response } from \"express\";\n\nexport interface CredimaxPayment {\n  amount: number;\n  currency: string;\n  orderId: string;\n  customerInfo: {\n    name: string;\n    email: string;\n    phone: string;\n  };\n}\n\nexport async function createCredimaxTransaction(req: Request, res: Response) {\n  try {\n    const { amount, currency = \"BHD\", orderId, customerInfo }: CredimaxPayment = req.body;\n\n    if (!amount || amount <= 0) {\n      return res.status(400).json({ error: \"Invalid amount\" });\n    }\n\n    if (!orderId || !customerInfo) {\n      return res.status(400).json({ error: \"Missing required fields\" });\n    }\n\n    // In production, you would integrate with Credimax's actual API\n    // For now, we'll simulate the payment process\n    const credimaxResponse = {\n      transactionId: `CREDIMAX_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      status: \"pending\",\n      paymentUrl: `https://credimax.com.bh/pay?transaction=${orderId}&amount=${amount}`,\n      amount,\n      currency,\n      orderId,\n      expiresAt: new Date(Date.now() + 15 * 60 * 1000), // 15 minutes\n    };\n\n    res.json(credimaxResponse);\n  } catch (error: any) {\n    console.error(\"Credimax error:\", error);\n    res.status(500).json({ error: \"Failed to create Credimax transaction\" });\n  }\n}\n\nexport async function verifyCredimaxTransaction(req: Request, res: Response) {\n  try {\n    const { transactionId } = req.params;\n\n    if (!transactionId) {\n      return res.status(400).json({ error: \"Transaction ID is required\" });\n    }\n\n    // In production, you would verify with Credimax's API\n    // For now, we'll simulate verification\n    const verificationResult = {\n      transactionId,\n      status: \"completed\", // or \"failed\", \"pending\"\n      amount: 50.00, // This would come from Credimax\n      currency: \"BHD\",\n      timestamp: new Date().toISOString(),\n    };\n\n    res.json(verificationResult);\n  } catch (error: any) {\n    console.error(\"Credimax verification error:\", error);\n    res.status(500).json({ error: \"Failed to verify Credimax transaction\" });\n  }\n}\n\nexport async function handleCredimaxWebhook(req: Request, res: Response) {\n  try {\n    // In production, you would verify the webhook signature from Credimax\n    const { transactionId, status, amount, orderId } = req.body;\n\n    console.log(\"Credimax webhook received:\", {\n      transactionId,\n      status,\n      amount,\n      orderId,\n    });\n\n    // Handle the webhook data - update order status, etc.\n    \n    res.status(200).json({ success: true, message: \"Webhook processed successfully\" });\n  } catch (error: any) {\n    console.error(\"Credimax webhook error:\", error);\n    res.status(500).json({ error: \"Failed to process webhook\" });\n  }\n}","size_bytes":2711},"server/email-service.ts":{"content":"import nodemailer from \"nodemailer\";\nimport { storage } from \"./storage\";\nimport type { SiteSettings } from \"@shared/schema\";\n\n// Email service with dynamic SMTP configuration\nexport class EmailService {\n  private transporter: nodemailer.Transporter | null = null;\n  private isConfigured = false;\n\n  async initialize() {\n    try {\n      const settings = await storage.getSiteSettings();\n      \n      if (!settings?.smtpEnabled || !settings?.smtpHost || !settings?.smtpUser || !settings?.smtpPassword) {\n        console.log(\"SMTP not configured - email functionality disabled\");\n        this.isConfigured = false;\n        return false;\n      }\n\n      // Configure SMTP based on user settings and best practices\n      const port = settings.smtpPort || 587;\n      \n      const config: any = {\n        host: settings.smtpHost,\n        port: port,\n        secure: settings.smtpSecure === true && port === 465, // Only use secure=true for port 465\n        auth: {\n          user: settings.smtpUser,\n          pass: settings.smtpPassword,\n        },\n      };\n\n      // For port 587 or when secure is disabled, use STARTTLS\n      if (port === 587 || !settings.smtpSecure) {\n        config.secure = false;\n        config.requireTLS = true;\n        config.tls = {\n          rejectUnauthorized: false\n        };\n      }\n\n      // Provider-specific optimizations\n      if (settings.smtpHost?.includes('gmail.com')) {\n        config.service = 'gmail';\n        config.secure = false;\n        config.requireTLS = true;\n      }\n\n      if (settings.smtpHost?.includes('outlook.com') || settings.smtpHost?.includes('hotmail.com')) {\n        config.secure = false;\n        config.requireTLS = true;\n      }\n\n      console.log(\"Creating SMTP transport with config:\", {\n        host: config.host,\n        port: config.port,\n        secure: config.secure,\n        service: config.service || 'custom'\n      });\n\n      this.transporter = nodemailer.createTransport(config);\n      \n      // Verify connection\n      await this.transporter.verify();\n      this.isConfigured = true;\n      console.log(\"Email service initialized successfully\");\n      return true;\n    } catch (error: any) {\n      console.error(\"Email service initialization failed:\", error.message);\n      this.isConfigured = false;\n      return false;\n    }\n  }\n\n  async sendEmail(options: {\n    to: string | string[];\n    subject: string;\n    text?: string;\n    html?: string;\n  }) {\n    if (!this.isConfigured || !this.transporter) {\n      // Try to reinitialize\n      const initialized = await this.initialize();\n      if (!initialized) {\n        throw new Error(\"Email service not configured\");\n      }\n    }\n\n    const settings = await storage.getSiteSettings();\n    const fromName = settings?.smtpFromName || settings?.siteName || \"BAYG System\";\n    const fromEmail = settings?.smtpFromEmail || settings?.smtpUser;\n\n    const mailOptions = {\n      from: `\"${fromName}\" <${fromEmail}>`,\n      to: Array.isArray(options.to) ? options.to.join(\", \") : options.to,\n      subject: options.subject,\n      text: options.text,\n      html: options.html,\n    };\n\n    return await this.transporter!.sendMail(mailOptions);\n  }\n\n  async sendTestEmail(testEmail: string) {\n    const settings = await storage.getSiteSettings();\n    \n    return await this.sendEmail({\n      to: testEmail,\n      subject: `Test Email from ${settings.siteName || \"BAYG System\"}`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <h2 style=\"color: #2563eb; text-align: center;\">📧 Email System Test</h2>\n          \n          <div style=\"background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3 style=\"color: #1f2937; margin-top: 0;\">Test Results:</h3>\n            <ul style=\"color: #374151;\">\n              <li>✅ SMTP Connection: Successful</li>\n              <li>✅ Authentication: Verified</li>\n              <li>✅ Email Delivery: Completed</li>\n            </ul>\n          </div>\n\n          <div style=\"background: #ecfdf5; padding: 15px; border-radius: 8px; border-left: 4px solid #10b981;\">\n            <p style=\"color: #065f46; margin: 0;\">\n              <strong>Success!</strong> Your email system is working correctly.\n            </p>\n          </div>\n\n          <div style=\"margin-top: 20px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center;\">\n            <p style=\"color: #6b7280; font-size: 14px;\">\n              Test sent at: ${new Date().toISOString()}<br>\n              From: ${settings.siteName || \"BAYG System\"}\n            </p>\n          </div>\n        </div>\n      `,\n      text: `Email System Test - Success! Your email system is working correctly. Test sent at: ${new Date().toISOString()}`,\n    });\n  }\n\n  isReady() {\n    return this.isConfigured;\n  }\n}\n\n// Global email service instance\nexport const emailService = new EmailService();","size_bytes":4903},"server/email-templates.ts":{"content":"export const emailTemplates = {\n  // Order submission confirmation\n  orderSubmitted: (data: {\n    customerName: string;\n    orderNumber: string;\n    total: number;\n    siteName: string;\n    items?: Array<{\n      productName: string;\n      quantity: number;\n      price: string;\n      totalPrice: string;\n      rentalStartDate?: string;\n      rentalEndDate?: string;\n      rentalDays?: number;\n    }>;\n  }) => ({\n    subject: `Order Submitted #${data.orderNumber} - ${data.siteName}`,\n    html: `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px;\">\n        <div style=\"text-align: center; margin-bottom: 30px;\">\n          <h1 style=\"color: #2563eb; margin-bottom: 10px;\">${data.siteName}</h1>\n          <h2 style=\"color: #059669;\">Order Submitted Successfully!</h2>\n        </div>\n\n        <div style=\"background: #ecfdf5; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #10b981;\">\n          <p style=\"margin: 0; font-size: 16px;\">Dear ${data.customerName},</p>\n          <p style=\"margin: 15px 0 0 0;\">Your order has been submitted successfully and is now awaiting admin approval.</p>\n        </div>\n\n        <div style=\"background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n          <h3 style=\"color: #1f2937; margin-top: 0;\">Order Details</h3>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Order Number:</strong> #${data.orderNumber}</p>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Total Amount:</strong> $${Number(data.total).toFixed(2)}</p>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Status:</strong> Pending Admin Approval</p>\n          \n          ${data.items && data.items.length > 0 ? `\n          <div style=\"margin-top: 20px;\">\n            <h4 style=\"color: #1f2937; margin-bottom: 10px;\">Order Items:</h4>\n            <table style=\"width: 100%; border-collapse: collapse; margin-top: 10px;\">\n              <thead>\n                <tr style=\"background: #e5e7eb;\">\n                  <th style=\"padding: 8px; text-align: left; border: 1px solid #d1d5db;\">Product</th>\n                  <th style=\"padding: 8px; text-align: center; border: 1px solid #d1d5db;\">Qty</th>\n                  <th style=\"padding: 8px; text-align: right; border: 1px solid #d1d5db;\">Price</th>\n                  <th style=\"padding: 8px; text-align: right; border: 1px solid #d1d5db;\">Total</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${data.items.map(item => `\n                  <tr>\n                    <td style=\"padding: 8px; border: 1px solid #d1d5db;\">\n                      ${item.productName}\n                      ${item.rentalStartDate && item.rentalEndDate ? `\n                        <br><small style=\"color: #6b7280;\">Rental: ${item.rentalStartDate} to ${item.rentalEndDate} (${item.rentalDays} day${item.rentalDays !== 1 ? 's' : ''})</small>\n                      ` : ''}\n                    </td>\n                    <td style=\"padding: 8px; text-align: center; border: 1px solid #d1d5db;\">${item.quantity}</td>\n                    <td style=\"padding: 8px; text-align: right; border: 1px solid #d1d5db;\">$${Number(item.price).toFixed(2)}</td>\n                    <td style=\"padding: 8px; text-align: right; border: 1px solid #d1d5db;\">$${Number(item.totalPrice).toFixed(2)}</td>\n                  </tr>\n                `).join('')}\n              </tbody>\n            </table>\n          </div>\n          ` : ''}\n        </div>\n\n        <div style=\"background: #fef3c7; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #f59e0b;\">\n          <p style=\"color: #92400e; margin: 0;\">\n            <strong>What's Next:</strong> Our admin team will review your order shortly. You'll receive an email notification once it's approved and ready for payment.\n          </p>\n        </div>\n\n        <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center;\">\n          <p style=\"color: #6b7280; font-size: 14px;\">\n            Thank you for choosing us!<br>\n            ${data.siteName}\n          </p>\n        </div>\n      </div>\n    `,\n    text: `Order Submitted #${data.orderNumber}\n\nDear ${data.customerName},\n\nYour order has been submitted successfully and is now awaiting admin approval.\n\nOrder Details:\n- Order Number: #${data.orderNumber}\n- Total Amount: $${Number(data.total).toFixed(2)}\n- Status: Pending Admin Approval\n\nWhat's Next: Our admin team will review your order shortly. You'll receive an email notification once it's approved and ready for payment.\n\nThank you for choosing us!\n${data.siteName}`,\n  }),\n\n  // Order approved notification\n  orderApproved: (data: {\n    customerName: string;\n    orderNumber: string;\n    total: number;\n    siteName: string;\n    items?: Array<{\n      productName: string;\n      quantity: number;\n      price: string;\n      totalPrice: string;\n      rentalStartDate?: string;\n      rentalEndDate?: string;\n      rentalDays?: number;\n    }>;\n  }) => ({\n    subject: `Order Approved #${data.orderNumber} - ${data.siteName}`,\n    html: `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px;\">\n        <div style=\"text-align: center; margin-bottom: 30px;\">\n          <h1 style=\"color: #2563eb; margin-bottom: 10px;\">${data.siteName}</h1>\n          <h2 style=\"color: #059669;\">Order Approved!</h2>\n        </div>\n\n        <div style=\"background: #ecfdf5; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #10b981;\">\n          <p style=\"margin: 0; font-size: 16px;\">Dear ${data.customerName},</p>\n          <p style=\"margin: 15px 0 0 0;\">Great news! Your order has been approved and is ready for payment.</p>\n        </div>\n\n        <div style=\"background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n          <h3 style=\"color: #1f2937; margin-top: 0;\">Order Details</h3>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Order Number:</strong> #${data.orderNumber}</p>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Total Amount:</strong> $${Number(data.total).toFixed(2)}</p>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Status:</strong> Approved - Ready for Payment</p>\n          \n          ${data.items && data.items.length > 0 ? `\n          <div style=\"margin-top: 20px;\">\n            <h4 style=\"color: #1f2937; margin-bottom: 10px;\">Order Items:</h4>\n            <table style=\"width: 100%; border-collapse: collapse; margin-top: 10px;\">\n              <thead>\n                <tr style=\"background: #e5e7eb;\">\n                  <th style=\"padding: 8px; text-align: left; border: 1px solid #d1d5db;\">Product</th>\n                  <th style=\"padding: 8px; text-align: center; border: 1px solid #d1d5db;\">Qty</th>\n                  <th style=\"padding: 8px; text-align: right; border: 1px solid #d1d5db;\">Price</th>\n                  <th style=\"padding: 8px; text-align: right; border: 1px solid #d1d5db;\">Total</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${data.items.map(item => `\n                  <tr>\n                    <td style=\"padding: 8px; border: 1px solid #d1d5db;\">\n                      ${item.productName}\n                      ${item.rentalStartDate && item.rentalEndDate ? `\n                        <br><small style=\"color: #6b7280;\">Rental: ${item.rentalStartDate} to ${item.rentalEndDate} (${item.rentalDays} day${item.rentalDays !== 1 ? 's' : ''})</small>\n                      ` : ''}\n                    </td>\n                    <td style=\"padding: 8px; text-align: center; border: 1px solid #d1d5db;\">${item.quantity}</td>\n                    <td style=\"padding: 8px; text-align: right; border: 1px solid #d1d5db;\">$${Number(item.price).toFixed(2)}</td>\n                    <td style=\"padding: 8px; text-align: right; border: 1px solid #d1d5db;\">$${Number(item.totalPrice).toFixed(2)}</td>\n                  </tr>\n                `).join('')}\n              </tbody>\n            </table>\n          </div>\n          ` : ''}\n        </div>\n\n        <div style=\"background: #dbeafe; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #3b82f6;\">\n          <p style=\"color: #1e40af; margin: 0;\">\n            <strong>Next Steps:</strong> Please proceed with payment to complete your order. You can pay using Credimax or choose Cash on Delivery.\n          </p>\n        </div>\n\n        <div style=\"text-align: center; margin: 30px 0;\">\n          <div style=\"background-color: #10b981; color: white; padding: 15px 25px; border-radius: 8px; display: inline-block; font-weight: 600;\">\n            ✓ Order Approved - Ready for Payment\n          </div>\n        </div>\n\n        <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center;\">\n          <p style=\"color: #6b7280; font-size: 14px;\">\n            Thank you for your business!<br>\n            ${data.siteName}\n          </p>\n        </div>\n      </div>\n    `,\n    text: `Order Approved #${data.orderNumber}\n\nDear ${data.customerName},\n\nGreat news! Your order has been approved and is ready for payment.\n\nOrder Details:\n- Order Number: #${data.orderNumber}\n- Total Amount: $${Number(data.total).toFixed(2)}\n- Status: Approved - Ready for Payment\n\nNext Steps: Please proceed with payment to complete your order. You can pay using Credimax or choose Cash on Delivery.\n\nThank you for your business!\n${data.siteName}`,\n  }),\n\n  // Order rejected notification\n  orderRejected: (data: {\n    customerName: string;\n    orderNumber: string;\n    total: number;\n    reason?: string;\n    siteName: string;\n    items?: Array<{\n      productName: string;\n      quantity: number;\n      price: string;\n      totalPrice: string;\n      rentalStartDate?: string;\n      rentalEndDate?: string;\n      rentalDays?: number;\n    }>;\n  }) => ({\n    subject: `Order Update Required #${data.orderNumber} - ${data.siteName}`,\n    html: `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px;\">\n        <div style=\"text-align: center; margin-bottom: 30px;\">\n          <h1 style=\"color: #2563eb; margin-bottom: 10px;\">${data.siteName}</h1>\n          <h2 style=\"color: #dc2626;\">Order Requires Attention</h2>\n        </div>\n\n        <div style=\"background: #fef2f2; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #ef4444;\">\n          <p style=\"margin: 0; font-size: 16px;\">Dear ${data.customerName},</p>\n          <p style=\"margin: 15px 0 0 0;\">We need to discuss your recent order before we can proceed.</p>\n        </div>\n\n        <div style=\"background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n          <h3 style=\"color: #1f2937; margin-top: 0;\">Order Details</h3>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Order Number:</strong> #${data.orderNumber}</p>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Total Amount:</strong> $${Number(data.total).toFixed(2)}</p>\n          ${data.reason ? `<p style=\"color: #374151; margin: 5px 0;\"><strong>Note:</strong> ${data.reason}</p>` : ''}\n          \n          ${data.items && data.items.length > 0 ? `\n          <div style=\"margin-top: 20px;\">\n            <h4 style=\"color: #1f2937; margin-bottom: 10px;\">Order Items:</h4>\n            <table style=\"width: 100%; border-collapse: collapse; margin-top: 10px;\">\n              <thead>\n                <tr style=\"background: #e5e7eb;\">\n                  <th style=\"padding: 8px; text-align: left; border: 1px solid #d1d5db;\">Product</th>\n                  <th style=\"padding: 8px; text-align: center; border: 1px solid #d1d5db;\">Qty</th>\n                  <th style=\"padding: 8px; text-align: right; border: 1px solid #d1d5db;\">Price</th>\n                  <th style=\"padding: 8px; text-align: right; border: 1px solid #d1d5db;\">Total</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${data.items.map(item => `\n                  <tr>\n                    <td style=\"padding: 8px; border: 1px solid #d1d5db;\">\n                      ${item.productName}\n                      ${item.rentalStartDate && item.rentalEndDate ? `\n                        <br><small style=\"color: #6b7280;\">Rental: ${item.rentalStartDate} to ${item.rentalEndDate} (${item.rentalDays} day${item.rentalDays !== 1 ? 's' : ''})</small>\n                      ` : ''}\n                    </td>\n                    <td style=\"padding: 8px; text-align: center; border: 1px solid #d1d5db;\">${item.quantity}</td>\n                    <td style=\"padding: 8px; text-align: right; border: 1px solid #d1d5db;\">$${Number(item.price).toFixed(2)}</td>\n                    <td style=\"padding: 8px; text-align: right; border: 1px solid #d1d5db;\">$${Number(item.totalPrice).toFixed(2)}</td>\n                  </tr>\n                `).join('')}\n              </tbody>\n            </table>\n          </div>\n          ` : ''}\n        </div>\n\n        <div style=\"background: #fef3c7; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #f59e0b;\">\n          <p style=\"color: #92400e; margin: 0;\">\n            <strong>Next Steps:</strong> Please contact our support team to discuss your order and make any necessary adjustments.\n          </p>\n        </div>\n\n        <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center;\">\n          <p style=\"color: #6b7280; font-size: 14px;\">\n            We're here to help! Please don't hesitate to reach out with any questions.<br>\n            ${data.siteName}\n          </p>\n        </div>\n      </div>\n    `,\n    text: `Order Update Required #${data.orderNumber}\n\nDear ${data.customerName},\n\nWe need to discuss your recent order before we can proceed.\n\nOrder Details:\n- Order Number: #${data.orderNumber}\n- Total Amount: $${Number(data.total).toFixed(2)}\n${data.reason ? `- Note: ${data.reason}` : ''}\n\nNext Steps: Please contact our support team to discuss your order and make any necessary adjustments.\n\nWe're here to help! Please don't hesitate to reach out with any questions.\n${data.siteName}`,\n  }),\n\n  // Payment confirmation\n  paymentConfirmation: (data: {\n    customerName: string;\n    orderNumber: string;\n    total: number;\n    paymentMethod: string;\n    siteName: string;\n    items?: Array<{\n      productName: string;\n      quantity: number;\n      price: string;\n      totalPrice: string;\n      rentalStartDate?: string;\n      rentalEndDate?: string;\n      rentalDays?: number;\n    }>;\n  }) => ({\n    subject: `Payment Confirmed #${data.orderNumber} - ${data.siteName}`,\n    html: `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px;\">\n        <div style=\"text-align: center; margin-bottom: 30px;\">\n          <h1 style=\"color: #2563eb; margin-bottom: 10px;\">${data.siteName}</h1>\n          <h2 style=\"color: #059669;\">Payment Confirmed!</h2>\n        </div>\n\n        <div style=\"background: #ecfdf5; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #10b981;\">\n          <p style=\"margin: 0; font-size: 16px;\">Dear ${data.customerName},</p>\n          <p style=\"margin: 15px 0 0 0;\">Thank you! Your payment has been confirmed and your order is now being processed.</p>\n        </div>\n\n        <div style=\"background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n          <h3 style=\"color: #1f2937; margin-top: 0;\">Payment Details</h3>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Order Number:</strong> #${data.orderNumber}</p>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Amount Paid:</strong> $${Number(data.total).toFixed(2)}</p>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Payment Method:</strong> ${data.paymentMethod}</p>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Status:</strong> Processing</p>\n          \n          ${data.items && data.items.length > 0 ? `\n          <div style=\"margin-top: 20px;\">\n            <h4 style=\"color: #1f2937; margin-bottom: 10px;\">Order Items:</h4>\n            <table style=\"width: 100%; border-collapse: collapse; margin-top: 10px;\">\n              <thead>\n                <tr style=\"background: #e5e7eb;\">\n                  <th style=\"padding: 8px; text-align: left; border: 1px solid #d1d5db;\">Product</th>\n                  <th style=\"padding: 8px; text-align: center; border: 1px solid #d1d5db;\">Qty</th>\n                  <th style=\"padding: 8px; text-align: right; border: 1px solid #d1d5db;\">Price</th>\n                  <th style=\"padding: 8px; text-align: right; border: 1px solid #d1d5db;\">Total</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${data.items.map(item => `\n                  <tr>\n                    <td style=\"padding: 8px; border: 1px solid #d1d5db;\">\n                      ${item.productName}\n                      ${item.rentalStartDate && item.rentalEndDate ? `\n                        <br><small style=\"color: #6b7280;\">Rental: ${item.rentalStartDate} to ${item.rentalEndDate} (${item.rentalDays} day${item.rentalDays !== 1 ? 's' : ''})</small>\n                      ` : ''}\n                    </td>\n                    <td style=\"padding: 8px; text-align: center; border: 1px solid #d1d5db;\">${item.quantity}</td>\n                    <td style=\"padding: 8px; text-align: right; border: 1px solid #d1d5db;\">$${Number(item.price).toFixed(2)}</td>\n                    <td style=\"padding: 8px; text-align: right; border: 1px solid #d1d5db;\">$${Number(item.totalPrice).toFixed(2)}</td>\n                  </tr>\n                `).join('')}\n              </tbody>\n            </table>\n          </div>\n          ` : ''}\n        </div>\n\n        <div style=\"background: #dbeafe; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #3b82f6;\">\n          <p style=\"color: #1e40af; margin: 0;\">\n            <strong>What's Next:</strong> We're now preparing your order for shipment. You'll receive a tracking notification once it's on its way.\n          </p>\n        </div>\n\n        <div style=\"text-align: center; margin: 30px 0;\">\n          <div style=\"background-color: #10b981; color: white; padding: 15px 25px; border-radius: 8px; display: inline-block; font-weight: 600;\">\n            ✓ Payment Confirmed\n          </div>\n        </div>\n\n        <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center;\">\n          <p style=\"color: #6b7280; font-size: 14px;\">\n            Thank you for your business!<br>\n            ${data.siteName}\n          </p>\n        </div>\n      </div>\n    `,\n    text: `Payment Confirmed #${data.orderNumber}\n\nDear ${data.customerName},\n\nThank you! Your payment has been confirmed and your order is now being processed.\n\nPayment Details:\n- Order Number: #${data.orderNumber}\n- Amount Paid: $${Number(data.total).toFixed(2)}\n- Payment Method: ${data.paymentMethod}\n- Status: Processing\n\nWhat's Next: We're now preparing your order for shipment. You'll receive a tracking notification once it's on its way.\n\nThank you for your business!\n${data.siteName}`,\n  }),\n\n  // Admin order notification\n  adminOrderNotification: (data: {\n    customerName: string;\n    customerEmail: string;\n    orderNumber: string;\n    total: number;\n    itemCount: number;\n    siteName: string;\n  }) => ({\n    subject: `New Order Requires Approval #${data.orderNumber} - ${data.siteName}`,\n    html: `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px;\">\n        <div style=\"text-align: center; margin-bottom: 30px;\">\n          <h1 style=\"color: #2563eb; margin-bottom: 10px;\">${data.siteName}</h1>\n          <h2 style=\"color: #f59e0b;\">New Order - Admin Approval Required</h2>\n        </div>\n\n        <div style=\"background: #fef3c7; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #f59e0b;\">\n          <p style=\"margin: 0; font-size: 16px;\"><strong>Admin Notification</strong></p>\n          <p style=\"margin: 15px 0 0 0;\">A new order has been submitted and requires your approval.</p>\n        </div>\n\n        <div style=\"background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n          <h3 style=\"color: #1f2937; margin-top: 0;\">Order Details</h3>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Order Number:</strong> #${data.orderNumber}</p>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Customer:</strong> ${data.customerName}</p>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Email:</strong> ${data.customerEmail}</p>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Total Amount:</strong> $${Number(data.total).toFixed(2)}</p>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Items:</strong> ${data.itemCount} item(s)</p>\n        </div>\n\n        <div style=\"background: #dbeafe; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #3b82f6;\">\n          <p style=\"color: #1e40af; margin: 0;\">\n            <strong>Action Required:</strong> Please review this order in the admin dashboard and approve or reject it.\n          </p>\n        </div>\n\n        <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center;\">\n          <p style=\"color: #6b7280; font-size: 14px;\">\n            ${data.siteName} Admin Panel\n          </p>\n        </div>\n      </div>\n    `,\n    text: `New Order Requires Approval #${data.orderNumber}\n\nAdmin Notification: A new order has been submitted and requires your approval.\n\nOrder Details:\n- Order Number: #${data.orderNumber}\n- Customer: ${data.customerName}\n- Email: ${data.customerEmail}\n- Total Amount: $${Number(data.total).toFixed(2)}\n- Items: ${data.itemCount} item(s)\n\nAction Required: Please review this order in the admin dashboard and approve or reject it.\n\n${data.siteName} Admin Panel`,\n  }),\n\n  // Test email template\n  testEmail: (recipientEmail: string) => ({\n    subject: 'SMTP Test Email - Configuration Successful',\n    html: `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px;\">\n        <div style=\"text-align: center; margin-bottom: 30px;\">\n          <h1 style=\"color: #2563eb; margin-bottom: 10px;\">SMTP Test Email</h1>\n          <h2 style=\"color: #059669;\">Configuration Successful!</h2>\n        </div>\n\n        <div style=\"background: #ecfdf5; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #10b981;\">\n          <p style=\"margin: 0; font-size: 16px;\">Congratulations!</p>\n          <p style=\"margin: 15px 0 0 0;\">Your SMTP email configuration is working correctly. This test email was sent to ${recipientEmail}.</p>\n        </div>\n\n        <div style=\"background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n          <h3 style=\"color: #1f2937; margin-top: 0;\">Test Details</h3>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Recipient:</strong> ${recipientEmail}</p>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Status:</strong> Email delivered successfully</p>\n          <p style=\"color: #374151; margin: 5px 0;\"><strong>Date:</strong> ${new Date().toLocaleString()}</p>\n        </div>\n\n        <div style=\"text-align: center; margin: 30px 0;\">\n          <div style=\"background-color: #10b981; color: white; padding: 15px 25px; border-radius: 8px; display: inline-block; font-weight: 600;\">\n            ✓ SMTP Configuration Working\n          </div>\n        </div>\n\n        <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center;\">\n          <p style=\"color: #6b7280; font-size: 14px;\">\n            Your email system is ready to send order notifications!<br>\n            BAYG - Bahrain Asian Youth Games 2025\n          </p>\n        </div>\n      </div>\n    `,\n    text: `SMTP Test Email - Configuration Successful\n\nCongratulations! Your SMTP email configuration is working correctly. This test email was sent to ${recipientEmail}.\n\nTest Details:\n- Recipient: ${recipientEmail}\n- Status: Email delivered successfully\n- Date: ${new Date().toLocaleString()}\n\nYour email system is ready to send order notifications!\nBAYG - Bahrain Asian Youth Games 2025`,\n  }),\n};","size_bytes":24556}}}